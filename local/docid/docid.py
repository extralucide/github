#!/usr/bin/env python 2.7.3# # -*- coding: latin-1 -*-# -*- coding: utf-8 -*-""" doCID Copyright (c) 2013-2014 Olivier Appere  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN  THE SOFTWARE. This file generates a SCI, HCMR and CID with a format .docx (Word 2007) based on a specific template.    Module Name:%name:%    File version: %version:%    Author: %derived_by:%"""# TODO: add export of reviews checklist# TODO: create GUI to input new checklist# TODO: ajouter CCB meeting dans le check 18 de la SCR# TODO: Supprimer type_cr_workflow de la classe BuildDoc__author__ = "O. Appere <olivier.appere@gmail.com>"## Import#from synergy_thread import ThreadQueryimport loggingimport syssys.path.append("python-docx")from tool import Toolfrom actions_gui import ActionGui#import csvtry:    from Tkinter import *    ##    import Tkinter              # Python 2    import ttkexcept ImportError:    from tkinter import *    ##    import tkinter as Tkinter   # Python 3    import tkinter.ttk as ttkimport tkMessageBoxtry:    import docxexcept ImportError:    print "DoCID requires the python-docx library for Python. " \          "See https://github.com/mikemaccana/python-docx/"    #    raise ImportError, "DoCID requires the python-docx library for Python. " \    #         "See https://github.com/mikemaccana/python-docx/"import timefrom ConfigParser import ConfigParserimport reimport csvimport Queuetry:    from PIL import Imageexcept ImportError:    try:        import Image    except ImportError:        print "DoCID requires the Image library for Python. "        print "No module Image loaded."try:    import Pmwexcept ImportError:    print "DoCID requires the Python MegaWidgets for Python. " \          "See http://sourceforge.net/projects/pmw/"    #raise ImportError, "DoCID requires the Python MegaWidgets for Python. " \    #             "See http://sourceforge.net/projects/pmw/"from reviews import Reviewfrom tkintertable.Tables import TableCanvasfrom tkintertable.TableModels import TableModelimport platformimport osfrom os.path import joinimport subprocessimport tkFileDialogfrom conf import VERSIONimport tkSimpleDialogfrom datetime import datetimeimport webbrowserclass MyDialog(tkSimpleDialog.Dialog):    def body(self, master):        Label(master, text="Name:").grid(row=0)        #Label(master, text="Second:").grid(row=1)        self.e1 = Entry(master,width=300)        self.e1.grid(row=0, column=1)        #self.e2.grid(row=1, column=1)        return self.e1 # initial focus    def apply(self):        value = self.e1.get()        return value        #first = int(self.e1.get())        #second = int(self.e2.get())        #print first, second # or somethingforeground = 'black'count_project = 0count_baseline = 0count_release = 0class Logger(object):    def __init__(self, filename="log.txt"):        self.terminal = sys.stdout        self.log = open(filename, "w")    def write(self, message):        self.terminal.write(message)        self.log.write(message)    def __del__(self):        close(self.log)# -----------------------------------------------------------------------------class ThreadSafeConsole(Text):    """    This class create a widget Text thread safe    """    def __init__(self, master, **options):        Text.__init__(self, master, **options)        self.queue = Queue.Queue()        self.update_me()    def write(self, line):        self.queue.put(line)    def clear(self):        self.queue.put(None)    def update_me(self):        try:            while 1:                line = self.queue.get_nowait()                if line is None:                    self.delete(1.0, END)                else:                    self.insert(END, str(line))                self.see(END)                self.update_idletasks()        except Queue.Empty:            pass        self.after(100, self.update_me)# -----------------------------------------------------------------------------class ThreadSafeListbox(Listbox):    """    This class create a widget Listbox thread safe    """    def __init__(self, master, **options):        Listbox.__init__(self, master, **options)        self.queue = Queue.Queue()        self.update_me()    def write(self, line):        #print "call write method"        self.queue.put("write")        self.queue.put(line)    def clear(self):        #print "call clear method"        self.queue.put("delete")    def white(self):        #print "call white method"        self.queue.put("white")    def begin(self):        #print "call begin method"        self.queue.put("begin")    def enable(self):        #print "call enable method"        self.queue.put("enable")    def disable(self):        #print "call enable method"        self.queue.put("disable")    def update_me(self):        try:            while 1:                cmd = self.queue.get_nowait()                if cmd == "delete":                    #print "ThreadSafeListbox delete method"                    self.delete(0, END)                elif cmd == "white":                    #print "ThreadSafeListbox white method"                    self.configure(bg="white")                elif cmd == "enable":                    #print "ThreadSafeListbox enable method"                    self.configure(state=NORMAL)                elif cmd == "disable":                    #print "ThreadSafeListbox enable method"                    self.configure(state=DISABLED)                elif cmd == "begin":                    #print "ThreadSafeListbox begin method"                    self.selection_set(first=0)                elif cmd == "write":                    #print "ThreadSafeListbox write method"                    line = self.queue.get_nowait()                    self.insert(END, str(line))                else:                    print "ThreadSafeListbox unknown method"                    print "method:",cmd                #self.see(END)                self.update_idletasks()        except Queue.Empty:            pass        self.after(100, self.update_me)# -----------------------------------------------------------------------------class ThreadSafeEntry(Entry):    """    This class create a widget Entry thread safe    """    def __init__(self, master, **options):        Entry.__init__(self, master, **options)        self.queue = Queue.Queue()        self.update_me()    def write(self, line):        self.queue.put(line)    def clear(self):        self.queue.put(None)    def update_me(self):        try:            while 1:                line = self.queue.get_nowait()                if line is None:                    self.delete(1.0, END)                else:                    self.insert(END, str(line))                self.see(END)                self.update_idletasks()        except Queue.Empty:            pass        self.after(100, self.update_me)# -----------------------------------------------------------------------------class ThreadSafeCheckbutton(Checkbutton):    """    This class create a widget Checkbutton thread safe    """    def __init__(self, master, **options):        Checkbutton.__init__(self, master, **options)        self.queue = Queue.Queue()        self.update_me()    def select(self):        self.queue.put("select")    def config(self,state):        self.queue.put("config")        self.queue.put(state)    def configure(self,text):        self.queue.put("configure")        self.queue.put(text)    def update_me(self):        try:            while 1:                arg = self.queue.get_nowait()                if arg is "select":                    self.select()                elif arg is "config":                    state = self.queue.get_nowait()                    self.config(state=state)                elif arg is "configure":                    text = self.queue.get_nowait()                    self.configure(text=text)                self.update_idletasks()        except Queue.Empty:            pass        self.after(100, self.update_me)# -----------------------------------------------------------------------------class ConfigIndexGui():    def __init__(self):        self.default_template_type = "SCI"    def refreshFrame(self,                     filename,                     frame,                     disabled=True):        # Update CID explanations        try:            explain_file = open(filename, 'r')            explain_text = explain_file.read()            explain_file.close()        except IOError:            explain_text = "File {:s} not found".format(filename)        frame.configure(state='normal')        frame.delete("1.0", END)        frame.insert(END, Tool.replaceNonASCII(explain_text))        if disabled:            frame.configure(state='disabled')    def computeCIDType(self,cr_domain):        # set CID type        hcmr_type = ""        if cr_domain == "SCR":            cid_type = "SCI"        elif cr_domain == "HCR":            cid_type = "HCMR"            hcmr_type = "HCMR_BOARD"        elif cr_domain == "PLDCR":            cid_type = "HCMR"            hcmr_type = "HCMR_PLD"        elif cr_domain == "SACR":            cid_type = "CID"        elif cr_domain == "SyCR":            cid_type = "CID"        elif cr_domain == "EXCR":            cid_type = "CID"        else:            cid_type = "SCI"        print "computeCIDType",cid_type,hcmr_type        return cid_type,hcmr_type    def hideHCMR(self):        self.radiobutton_dico["HCMR_PLD"].grid_forget()        self.radiobutton_dico["HCMR_BOARD"].grid_forget()    def displayHCMR(self):        self.radiobutton_dico["HCMR_PLD"].grid(row=4, column=1, padx=10, sticky='W')        self.radiobutton_dico["HCMR_BOARD"].grid(row=4, column=1, padx=10, sticky='E')    def hideSwDeliverySheetButton(self):        print "Hide button_create_delivery_sheet"        self.delivery_sheet_txt.grid_forget()        self.button_create_delivery_sheet.grid_forget()    def displaySwDeliverySheetButton(self):        print "Display button_create_delivery_sheet"        self.delivery_sheet_txt.grid(row=7, column=1, pady=5, sticky='W')        self.button_create_delivery_sheet.grid(row=7, column=1,pady=5, padx=10, sticky='E')    def click_create_sw_delivery_sheet(self):        self.success.config(fg='red',bg = 'yellow',text="SOFTWARE DELIVERY SHEET GENERATION IN PROGRESS")        self.queue.put("BUILD_DELIVERY_SHEET")        # Template key for software delivery sheet        self.queue.put("SDS")        dico = self.getParameters()        self.queue.put(dico)        self.click_clear()    def setCIDType(self,                   cid_type,                   hcmr_type=""):        # CR domains (need to modify function name)        print "setCIDType",cid_type        self.cid_var_type.set(cid_type)        if cid_type == "HCMR":            self.displayHCMR()            self.hideSwDeliverySheetButton()            self.hcmr_var_type.set(hcmr_type)        elif cid_type == "SCI":            self.displaySwDeliverySheetButton()            self.hideHCMR()        else:            self.hideSwDeliverySheetButton()            self.hideHCMR()    def cid_type(self):        cid_type = self.cid_var_type.get()        hcmr_type = self.hcmr_var_type.get()        print "cid_type",cid_type        if cid_type == "HCMR":            if hcmr_type == "HCMR_PLD":                self.forceCCBType("PLDCR")            elif hcmr_type == "HCMR_BOARD":                self.forceCCBType("HCR")            self.displayHCMR()            self.hideSwDeliverySheetButton()        elif cid_type == "CID" or cid_type == "ECMR":            self.forceCCBType("SACR")            # Hide PLD and BOARD HCMR radiobuttons            self.hideHCMR()            self.hideSwDeliverySheetButton()        elif cid_type == "SCI":            self.forceCCBType("SCR")            self.displaySwDeliverySheetButton()            self.hideHCMR()        else:            # Hide PLD and BOARD HCMR radiobuttons            self.hideHCMR()            self.hideSwDeliverySheetButton()    def cb_released(self):        print "variable 'Released' is", self.status_released.get()    def click_build_cid(self):        """        Function which put        - release        - project        - baseline        into the queue        called when the user press the Build button        """        dico = self.getParameters()        #self.cid_word_img_can.itemconfigure(self.cid_word_img,state='hidden')        self.success.config(fg='red',bg = 'yellow',text="CONFIGURATION INDEX DOCUMENT GENERATION IN PROGRESS")        self.log("Configuration Index Document generation in progress ...")        # Get project and database listbox information        self.getGUICRStatus()        cr_domain = self.getListCR_Domain()        self.queue.put("BUILD_CID")  # order to build docx        self.queue.put([dico['release'],                        dico['project'],                        dico['baseline'],                        dico['implemented'],                        dico['item'],                        dico['previous_bas'],                        dico['detect'],                        dico['cr_type'],                        dico['component'],                        cr_domain])        self.click_clear()    def build_cid_folder(self,                         page,                         img_display='hidden'):        """        page --->                top_frame --->                    box_frame --->                        inside_frame ---> Buttons to generate CID                        last_pane ---> Image                    explain_frame --> Customizable part of CID                third_pane --> Description        """        top_frame = Frame(page)        box_frame = Frame(top_frame)        box_frame.pack(anchor=NW)        # Button part        inside_frame = LabelFrame(box_frame,padx=5,bd=0)        # Type of CID        #self.hcmr_var_type = StringVar()        self.cid_var_type.set("HCMR")  # initialize        self.hcmr_var_type.set("HCMR_PLD")  # initialize        cid_type_txt = Label(inside_frame, text='Configuration Index Document type:')        self.radiobutton_dico = {}        for text,value in (("SCI","SCI"),                           ("HCMR","HCMR"),                           ("ECMR","CID"),                           ("HCMR PLD","HCMR_PLD"),                           ("HCMR BOARD","HCMR_BOARD")):            self.radiobutton_dico[value] = Radiobutton(inside_frame,                                               indicatoron=0,                                               width=12,                                               text=text,                                               variable=self.cid_var_type,                                               value=value,                                               command=self.cid_type)        # Specific        self.radiobutton_dico["HCMR_PLD"].configure(indicatoron=1)        self.radiobutton_dico["HCMR_PLD"].configure(variable=self.hcmr_var_type)        self.radiobutton_dico["HCMR_BOARD"].configure(indicatoron=1)        self.radiobutton_dico["HCMR_BOARD"].configure(variable=self.hcmr_var_type)        cid_type_txt.grid(row=1, column=1, sticky='W', padx=2)        self.radiobutton_dico["SCI"].grid(row=3, column=1, padx=10, sticky='W')        self.radiobutton_dico["HCMR"].grid(row=3, column=1, padx=100, sticky='W')        self.radiobutton_dico["CID"].grid(row=3, column=1, padx=10, sticky='E')        self.radiobutton_dico["HCMR_PLD"].grid(row=4, column=1, padx=10, sticky='W')        self.radiobutton_dico["HCMR_BOARD"].grid(row=4, column=1, padx=10, sticky='E')        limitations_txt = Label(inside_frame, text='Limitations:')        limitations_txt.grid(row=5, column=1, pady=5, sticky='W')        button_func_limit = Button(inside_frame,                                    text='Edit',                                    command=self.click_edit_func_limit,                                    width=12)        button_func_limit.grid(row=5,column=1,pady=5, padx=10, sticky='E')        generate_txt = Label(inside_frame, text='Configuration Index Document:')        generate_txt.grid(row=6, column=1, pady=5, sticky='W')        self.button_select = Button(inside_frame,                                    text='Generate',                                    #state=DISABLED,                                    command=self.click_build_cid,                                    width=12)        self.button_select.grid(row=6, column=1,pady=5, padx=10, sticky='E')        self.delivery_sheet_txt = Label(inside_frame, text='Software Delivery sheet:')        self.delivery_sheet_txt.grid(row=7, column=1, pady=5, sticky='W')        self.button_create_delivery_sheet = Button(inside_frame,                                              text='Generate',                                              #state=DISABLED,                                              command=self.click_create_sw_delivery_sheet,                                              width=12)        self.button_create_delivery_sheet.grid(row=7, column=1,pady=5, padx=10, sticky='E')        self.status_released = IntVar()        self.status_integrate = IntVar()        self.check_button_status_released = Checkbutton(inside_frame,                                                        text="Only in state 'Released'",                                                        variable=self.status_released,                                                        command=self.cb_released)        self.check_button_status_integrate = Checkbutton(inside_frame,                                                         text="Only in state 'Integrate'",                                                         variable=self.status_integrate,                                                         command=self.cb_integrate)        inside_frame.pack(side=LEFT,anchor=NW,padx=10)        # Image        if 0==1:            last_pane = Frame(box_frame, padx=20, pady=30)            last_pane.pack()            #Drawing            self.cid_word_img_can = Canvas(last_pane, width=128, height=128, highlightthickness=0)            try:                bitmap = PhotoImage(file="img/kfm.gif")                self.cid_word_img = self.cid_word_img_can.create_image(64, 64, image=bitmap)                self.cid_word_img_can.bitmap = bitmap                self.cid_word_img_can.pack(fill=Y)                self.cid_word_img_can.bind("<Double-Button-1>", self.openCID)                self.cid_word_img_can.itemconfigure(self.cid_word_img, state=img_display)            except TclError as exception:                print "TCL error:", exception        return top_frame    def click_edit_func_limit(self):        def callback():            print "save filename_func"            with open(filename_func, 'w') as of:                txt = edit_limitations.help_text.get(1.0, END)                of.write(txt)            print "save filename_oper"            with open(filename_oper, 'w') as of:                txt = edit_limitations.second_text.get(1.0, END)                of.write(txt)            edit_limitations.destroy()        edit_limitations = smallWindows()        edit_limitations.create(title="Edit limitations",                                labels=("Functional changes since the last version","Operational limitations"),                                callback=callback)        filename_func = join("conf",'func_chg.txt')        self.refreshFrame(filename_func,                          edit_limitations.help_text,                          disabled=False)        filename_oper = join("conf",'oper_chg.txt')        self.refreshFrame(filename_oper,                          edit_limitations.second_text,                          disabled=False)    def click_edit_oper_limit(self):        pass    def openCID(self, event,window):        print "Open CID"        target = join(self.gen_dir, self.docx_filename)        self.openTarget(target)        window.destroy()class Project(TableCanvas):    """    To manage projets set    """    def __init__(self,                 parent=None,                 model=None,                 width=None,                 height=None,                 rows=10,                 cols=5,                 **kwargs):        Canvas.__init__(self, parent,                        bg='white',                        width=width,                        height=height,                        relief=GROOVE,                        scrollregion=(0, 0, 150, 100))        self.parentframe = parent        #get platform into a variable        self.ostyp = self.checkOSType()        if "log" in self.__dict__:            self.log("ostyp" + self.ostyp,False) # From Interface class        self.platform = platform.system()        if "log" in self.__dict__:            self.log("platform" + self.platform,False) # From Interface class        self.width = width        self.height = height        self.set_defaults()        self.currentpage = None        self.navFrame = None        self.currentrow = 0        self.currentcol = 0        self.reverseorder = 0        self.startrow = self.endrow = None        self.startcol = self.endcol = None        self.allrows = False  #for selected all rows without setting multiplerowlist        self.multiplerowlist = []        self.multiplecollist = []        self.col_positions = []  #record current column grid positions        self.mode = 'normal'        self.editable = True        self.filtered = False        self.loadPrefs()        #set any options passed in kwargs to overwrite defaults and prefs        for key in kwargs:            self.__dict__[key] = kwargs[key]        if model == None:            self.model = TableModel(rows=rows, columns=cols)        else:            self.model = model        self.rows = self.model.getRowCount()        self.cols = self.model.getColumnCount()        self.tablewidth = (self.cellwidth) * self.cols        #self.do_bindings()        #initial sort order        self.model.setSortOrder()        #column specific actions, define for every column type in the model        #when you add a column type you should edit this dict        self.columnactions = {'text': {"Edit": 'drawCellEntry'},                              'number': {"Edit": 'drawCellEntry'}}        self.setFontSize()        return    def setProject(self, project):        self.project = project        # in build_checklist folder        self.project_entry.configure(state='normal')        self.project_entry.delete(0, END)        self.project_entry.insert(END, project)        self.project_entry.configure(state='readonly')    def set_project_set_list(self):        """        Called when set project is clicked        - Update self.project_list array with [release,baseline,project]        - UPdate baseline_set_box listbox with project name        """        if self.project == "All":            if tkMessageBox.showinfo("All projects not accepted", "Please select one project."):                self.log("No project selected.")        elif self.project != "":            project = self.project            release = self.release            baseline = self.baseline            if [release, baseline, project] in self.project_set_list:                tkMessageBox.showinfo("Projects set listbox", "Set of release,baseline and project already exists.")            self.project_set_list.append([release, baseline, project])            print "set_project_set_list", self.project_set_list            self.baseline_set_box.insert(END, project)            self._refreshTableProject(self.project_set_list)            self.clear_release()            self.clear_baselines()            self.clear_project()            # Display stack            self.overall_frame.pack()        else:            if tkMessageBox.showinfo("Missing project selection", "Please select a project."):                self.log("No project selected.")    def clear_project_set(self,clear_gui=True):        '''        Clear Projects set        '''        #if clear_gui:        self.baseline_set_box.delete(0, END)        del self.project_set_list[0:]        self._refreshTableProject(self.project_set_list)        # restore release,baseline,project        self.setBaseline(self.release)        self.setBaselineSynergy(self.baseline)        self.setProject(self.project)        self.overall_frame.pack_forget()    def select_project_to_delete(self, event):        index = self.baseline_set_box.curselection()        print "INDEX", index        if index in (0, ()):            self.project_to_delete = ""        else:            self.project_to_delete = self.baseline_set_box.get(index[0])            print "ROW", index[0]            self.table_project.setSelectedRow(int(index[0]))            self.table_project.drawSelectedRow()    def del_project(self):        index = self.baseline_set_box.curselection()        if self.project_to_delete != "":            print "Project to delete", self.project_to_delete            print "Project list", self.project_set_list            self.baseline_set_box.delete(0, END)            new_project_list = []            for release, baseline, project in self.project_set_list:                if project != self.project_to_delete:                    self.baseline_set_box.insert(END, project)                    new_project_list.append([release, baseline, project])            self.project_set_list = new_project_list            print "_refreshTableProject called from del_project"            self._refreshTableProject(self.project_set_list)    def save_projects(self):        extra_project_list = []        for release, baseline, project in self.project_set_list:            extra_project_list.append([self.config_selected_id,release, baseline, project])        self.sqlite_save_projects(extra_project_list,                                  self.config_selected_id)        self.log("Set of project saved in SQLite database ")    def _refreshTableProject(self, project_list):        index = 1        data = {}        for release, baseline, project in project_list:            data[index] = {}            data[index]["Release"] = release            data[index]["Baseline"] = baseline            data[index]["Project"] = project            index += 1        index_max = self.table_project.model.getRowCount()        print "index_max", index_max        while index <= index_max:            data[index] = {}            data[index]["Release"] = ""            data[index]["Baseline"] = ""            data[index]["Project"] = ""            index += 1        model = TableModel()        model.importDict(data)        print "DATA _refreshTableProject",data        self.table_project.model.importDict(data)        # self.table_project.setModel(model)        self.table_project.updateModel(model)        self.table_project.redrawTable()    def _AddTableProject(self, release, baseline, project):        pass    def restore_projects(self):        """        Get release, baseline,project list in SQLite database        """        del self.project_set_list[0:]        # Clear box        #clear_gui = True        self.project_set_list = self.sqlite_restore_projects(self.config_selected_id)        #self.clear_project_set(clear_gui=True)        #if clear_gui:        print "_refreshTableProject called by restore_projects"        self._refreshTableProject(self.project_set_list)        # Display projects        # Extract list of baselines        # Extract list of releases        baselines_tbl = []        releases_tbl = []        for release, baseline, project in self.project_set_list:            self.baseline_set_box.insert(END, project)            baselines_tbl.append(baseline)            releases_tbl.append(release)        baselines_list_str = ", ".join(map(str, baselines_tbl))        # Update GUI in notebook QA report        releases_list_str = ", ".join(map(str, releases_tbl))        # Update GUI in notebook QA report        #if self.project_set_list != None:        #    self.button_select.configure(state=NORMAL)        self.log("Set of project restored from SQLite database ")class Login(Frame, Tool):    def _readConfig(self):        '''         Read csv config file        '''        # read config file        config_parser = ConfigParser()        config_file = join("conf","docid.ini")        result = config_parser.read(config_file)        if result != []:            try:                self.login = config_parser.get("User", "login")                self.password = config_parser.get("User", "password")                if config_parser.has_section("Default"):                    self.system = self.getOptions("Default", "system")                    self.item = self.getOptions("Default", "item")                    start = self.getOptions("Default", "start")                    if start == "auto":                        self.auto_start = True                    else:                        self.auto_start = False            except IOError as exception:                print "Config reading failed:", exception        else:            print "Missing config file"    def __init__(self, fenetre, **kwargs):        '''        init login class             - create GUI             - invoke SQLite query SELECT name FROM systems ORDER BY systems.name ASC                 to populate system listbox        '''        global foreground        global system        global item        global item_id        Tool.__init__(self)        self.auto_start = False        self.system = ""        self.item = ""        self.item_id = ()        # read config file        self._readConfig()        system = self.system        item = self.item        # Create widgets        entry_size = 30        # Create top frame, with scrollbar and listbox        Frame.__init__(self,                       fenetre,                       width=500,                       height=576,                       relief=GROOVE, **kwargs)        self.pack(fill=BOTH, ipady=10)        all_frame = Frame(self)        all_frame.pack(side=LEFT)        login_frame = Frame(all_frame,padx=20)        login_frame.pack(anchor=W)        # Login        self.login_txt = Label(login_frame, text='Login:', fg=foreground, justify=LEFT)        self.login_entry = ThreadSafeEntry(login_frame, state=NORMAL, width=30)        self.login_entry.insert(END, self.login)        self.login_txt.pack(side=LEFT,anchor=W)        self.login_entry.pack(anchor=E)        # Password        password_frame = Frame(all_frame,padx=20)        password_frame.pack(anchor=W);        self.password_txt = Label(password_frame, text='Password:', fg=foreground, justify=LEFT)        self.password_entry = ThreadSafeEntry(password_frame, state=NORMAL, width=26)        self.password_entry.configure(show='*')        self.password_entry.insert(END, self.password)        self.password_txt.pack(side=LEFT,anchor=W)        self.password_entry.pack(anchor=E,padx=5)        #Systems        system_frame = Frame(all_frame)        system_frame.pack()        listbox_txt = Label(system_frame, text='Systems:', fg=foreground, width=40, anchor=W, padx=20)        listbox_frame = Frame(system_frame)        self.vbar_1 = vbar_1 = Scrollbar(listbox_frame, name="vbar_1")        self.vbar_1.pack(side=RIGHT, fill=Y)        self.listbox = ThreadSafeListbox(listbox_frame,                                         height=6,                                         width=entry_size,                                         exportselection=0,                                         yscrollcommand=vbar_1.set)        self.listbox.pack()        list_items_id = self.populate_listbox('SELECT name,id FROM systems ORDER BY systems.name ASC', self.listbox, "None",init=True)        # Tie listbox and scrollbar together        vbar_1["command"] = self.listbox.yview        # Bind events to the list box        self.listbox.bind("<ButtonRelease-1>", self.select_system)        self.listbox.bind("<Key-Up>", lambda event, arg=self.listbox: self.up_event(event, arg))        self.listbox.bind("<Key-Down>", lambda event, arg=self.listbox: self.down_event(event, arg))        listbox_txt.pack()        listbox_frame.pack()        self.vbar_1.pack()        # Items        items_txt = Label(system_frame, text='Items:', fg=foreground, width=40, anchor=W, padx=20)        itemslistbox_frame = Frame(system_frame)        self.vbar_2 = vbar_2 = Scrollbar(itemslistbox_frame, name="vbar_2")        self.vbar_2.pack(side=RIGHT, fill=Y)        self.itemslistbox = ThreadSafeListbox(itemslistbox_frame, height=3, width=entry_size, exportselection=0,                                    yscrollcommand=vbar_2.set)        self.itemslistbox.pack()        self.itemslistbox.insert(END, "None")        vbar_2["command"] = self.itemslistbox.yview        self.itemslistbox.bind("<ButtonRelease-1>", self.select_item)        self.itemslistbox.bind("<Key-Up>", lambda event, arg=self.itemslistbox: self.up_event(event, arg))        self.itemslistbox.bind("<Key-Down>", lambda event, arg=self.itemslistbox: self.down_event(event, arg))        items_txt.pack()        itemslistbox_frame.pack()        self.vbar_2.pack()        #Drawing        can = Canvas(self, width=64, height=196, highlightthickness=0)        try:            bitmap = PhotoImage(file="img/doc.gif")            can.create_image(32, 32, image=bitmap)            can.bitmap = bitmap        except TclError as exception:            print "TCL error:", exception        can.pack(fill=Y, pady=20)        # Build & Quit        self.button_select = Button(self, text='OK', state=DISABLED, command=self.click_select)        self.button_select.bind("<Return>", self.click_select)        self.button_select.focus()        button_quit = Button(self, text='Quit', command=self.click_quit)        self.button_select.pack(side=LEFT)        button_quit.pack(side=LEFT)        system_id = self.getItemID(name=self.system)        if system_id is not None:            self.button_select.configure(state=NORMAL)            for id_sort,id_sql in enumerate(list_items_id):                if system_id == id_sql:                    system = self.system                    self.system_id = id_sort + 1                    self.listbox.select_set(id_sort + 1)                    self.listbox.see(id_sort + 1)                    # Populate items list box                    query = self.getListItems(self.system)                    list_items_id = self.populate_listbox(query, self.itemslistbox, "None",init=True)                    item_id = self.getItemID(table="items",name=self.item)                    if item_id is not None:                        for id_sort,id_sql in enumerate(list_items_id):                            if item_id == id_sql:                                item = self.item                                item_id = (id_sort + 1,)                                self.item_id = item_id                                self.itemslistbox.select_set(id_sort + 1)                                self.itemslistbox.see(id_sort + 1)                                break                    break    def changeColour(self, colour):        print 'Colour: ' + colour        self.listbox_txt.configure(background=colour)    def select_item(self, event):        ''' select item '''        item_id = self.itemslistbox.curselection()        self.item_id = item_id    @staticmethod    def getListItems(system):        query = 'SELECT items.name,items.id FROM items LEFT OUTER JOIN link_systems_items ON items.id = link_systems_items.item_id ' \                    'LEFT OUTER JOIN systems ON systems.id = link_systems_items.system_id WHERE systems.name LIKE \'' + system + '\' ORDER BY items.name ASC'        return query    def select_system(self, event):        self.button_select.configure(state=NORMAL)        # populate items listbox        system_id = self.listbox.curselection()        if system_id != () and '0' not in system_id:            self.system = self.listbox.get(system_id)            # Populate items list box            query = self.getListItems(self.system)            self.populate_listbox(query, self.itemslistbox, "None")            self.listbox.activate(system_id)        else:            pass    def press_start_apache(self, event):        config = "httpd_ece.conf"        self.apache_start(config)        pass    def press_bypass_start_session(self, event):        '''        Bypass login. No message START_SESSION sent.        '''        global login_success        global login        global password        global no_start_session        global system        global item        global item_id        if self.system != "":            system = self.system        else:            system = ""        if self.item_id != () and '0' not in self.item_id:            item = self.itemslistbox.get(self.item_id)            item_id = self.item_id        else:            item = ""            item_id = ()        login_success = True        login = ""        password = ""        ##        no_start_session = True        self.destroy()        login_window.destroy()    def click_bypass(self):        global login_success        global login        global password        #global item        #global item_id        #global system        #system = self.system        # Get login and password information        login = self.login        password = self.password        item_id = ()        login_success = True        self.destroy()    def click_select(self,event=None):        '''         Click OK button and launch the doCID GUI        '''        global login_success        global login        global password        global item        global item_id        global system        system = self.system        # Get login and password information        login = self.login_entry.get()        if login == "":            login = "anonymous"        password = self.password_entry.get()        if password == "":            password = "password"        if self.item_id != () and '0' not in self.item_id:            item = self.itemslistbox.get(self.item_id)            item_id = self.item_id        else:            item = ""            item_id = ()        login_success = True        #login_window.destroy()        self.destroy()        login_window.destroy()    def click_quit(self):        if tkMessageBox.askokcancel("Quit", "Do you really want to quit now?"):            self.destroy()            login_window.destroy()    def changeColour(self, colour):        print 'Colour: ' + colour        self.target.configure(background=colour)    def changeText(self, text):        print 'Text: ' + text        self.target.configure(text=text)class ReviewGui():    """    """    def getReview_ID(self):        get_review_id_window = Toplevel()        get_review_id_window.iconbitmap("ico_sys_desktop.ico")        get_review_id_window.title("get review ID from QAMS")        get_review_id_window.resizable(False,False)        get_review_id_window.grab_set()        get_review_id_window.focus_set()        sub_list_review_frame = Frame(get_review_id_window)        sub_list_review_frame.pack()        self.reviewlistbox = Listbox(sub_list_review_frame,                                     height=15,                                     width=64,                                     exportselection=0,                                     #state=DISABLED,                                     bg="gray")        self.reviewlistbox.insert(END, "All")        self.vbar_reviewlisbox = vbar_reviewlisbox = Scrollbar(sub_list_review_frame, name="vbar_reviewlisbox")        self.vbar_reviewlisbox.pack(side=RIGHT, fill=Y)        vbar_reviewlisbox["command"] = self.reviewlistbox.yview        self.reviewlistbox["yscrollcommand"] = vbar_reviewlisbox.set        self.reviewlistbox.bind("<ButtonRelease-1>", self.select_review_list)        self.reviewlistbox.bind("<MouseWheel>", self.reviewlistbox_scrollEvent)        self.reviewlistbox.bind("<Button-1>", self.reviewlistbox_onselect)        self.reviewlistbox.bind("<Key-Up>", lambda event, arg=self.reviewlistbox: self.up_event(event, arg))        self.reviewlistbox.bind("<Key-Down>", lambda event, arg=self.reviewlistbox: self.down_event(event, arg))        self.reviewlistbox.pack()        self.click_refresh_list()        mid_sub_list_review_frame = Frame(get_review_id_window,width=50)        mid_sub_list_review_frame.pack()        button_refresh_review = Button(mid_sub_list_review_frame,                                       text='Refresh list',                                       state=NORMAL,                                       command=self.click_refresh_list,                                       width=10)        dummy = Label(mid_sub_list_review_frame,width=50,pady=5)        dummy.pack(side=LEFT)        button_refresh_review.pack(anchor=W)        cancel_button = Button(get_review_id_window, text='Cancel', command = get_review_id_window.destroy)        cancel_button.pack(anchor=E)        get_review_id_window.mainloop()    def get_list_checklist(self):        review = Review()        #Get all categories        list_items = review.getChecks(review_id=3, category_id=0)        data = {}        if list_items is not None:            colnames = ["ID", "Description", "Category", "Sub category", "Level"]            index = 1            for item in list_items:                data[index] = {}                data[index]["ID"] = item[0]                data[index]["Description"] = item[1]                data[index]["Category"] = item[2]                data[index]["Sub category"] = item[3]                data[index]["Level"] = item[4]                index += 1        else:            pass        return data    def click_update_checklist(self, item_id=0):        pass    def modify_checklist(self):        pass        # review_id = self.var_review_type.get()        # data = self.get_list_checklist()        # if data != {}:        #     print "Create list action items window"        #     self.list_action = Tk()        #     self.list_action.iconbitmap("qams.ico")        #     self.list_action.title("List checklist items")        #     self.list_action.resizable(False, False)        #     action_frame = Frame(self.list_action, width=768)        #     action_frame.pack()        #        #     model = TableModel()        #     #import after model created        #     model.importDict(data)        #     table = Table_docid(action_frame,        #                         model,        #                         width=960,        #                         height=480,        #                         cellwidth=60,        #                         cellbackgr='#e3f698',        #                         thefont=('Arial', 12),        #                         rowheight=18,        #                         rowheaderwidth=0,        #                         rowselectedcolor='yellow',        #                         editable=False,        #                         callback=self.click_update_checklist)        #        #     table.createTableFrame()        #        #     cancel_button = Button(self.list_action, text='Cancel', command=self.list_action.destroy)        #     cancel_button.pack(side=RIGHT)        #     self.list_action.mainloop()        # else:        #     print "No review checklist items so far."    def select_review_list(self, event):        pass    def click_conformity_level(self):        pass    def reviewlistbox_scrollEvent(self, event):        if event.delta > 0:            self.reviewlistbox.yview_scroll(-2, 'units')        else:            self.reviewlistbox.yview_scroll(2, 'units')    def reviewlistbox_onselect(self, event):        # Note here that Tkinter passes an event object to onselect()        w = event.widget        print "WIDGET:", w        review_index = self.reviewlistbox.curselection()        print"review_index", review_index        if review_index != () and review_index[0] != ():            review = self.reviewlistbox.get(review_index)            print review            m = re.match(r'^([0-9]{1,4})\) (.*) (.*) (.*)$', review)            if m:                review_id = m.group(1)                reference = m.group(3)                self.reference = reference                self.reference_entry.delete(0, END)                self.reference_entry.insert(END, reference)                self.review_qams_id = review_id                self.review_qams_id_entry.delete(0, END)                self.review_qams_id_entry.insert(END, review_id)            else:                review_id = "None"            print 'You selected review %s: "%s"' % (review_id, review)    def _build_sw_checklist_folder(self, page, **kwargs):        """        Create page for software review report generation        """        self.var_review_type = IntVar()        # Create top frame, with scrollbar and listbox        Frame.__init__(self,                       page,                       width=256,                       height=584,                       relief=GROOVE, **kwargs)        self.pack(fill=BOTH)        review_list_frame = Frame(self, page)        # Type of review        review_type_txt = Label(review_list_frame, text='Review type:', fg=foreground, width=40, anchor=W, padx=20)        review_type_txt.pack()        review = Review()        review_list = review.getReviewList()        for id, text in review_list:            b = Radiobutton(review_list_frame, indicatoron=0, width=40, text=text, variable=self.var_review_type,                            value=id)            # if id not in (1,2,3,9):            #     b.config(state=DISABLED)            b.pack()        self.var_review_type.set(1)  # initialize to Plan Review        #spare = Label(review_list_frame)        #spare.pack()        audit_list_frame = Frame(self, page)        audit_type_txt = Label(audit_list_frame,                               text='Evaluation type:',                               fg=foreground, width=40, anchor=N, padx=20)        audit_type_txt.pack()        audit_list = [(20, "Specification"),                      (21, "Design"),                      (22, "Coding"),                      (23, "Tests"),                      (24, "Delivery")]        for id, text in audit_list:            b = Radiobutton(audit_list_frame, indicatoron=0, width=40, text=text, variable=self.var_review_type,                            value=id)            # if id not in (20,):            #     b.config(state=DISABLED)            b.pack(anchor=W)        info_frame = Frame(self, page, width=50)        #        # List of reviews in QAMS MySQL database        #        if 0==1:            list_review_frame = LabelFrame(info_frame, text='Review list:', width=40, bd=0)            #review_qams_id_txt = Label(list_review_frame, text='Review list:', fg=foreground, justify=LEFT)            #review_qams_id_txt.pack()            sub_list_review_frame = Frame(list_review_frame)            sub_list_review_frame.pack()            self.reviewlistbox = Listbox(sub_list_review_frame,                                         height=15,                                         width=64,                                         exportselection=0,                                         state=DISABLED,                                         bg="gray")            self.reviewlistbox.insert(END, "All")            self.vbar_reviewlisbox = vbar_reviewlisbox = Scrollbar(sub_list_review_frame, name="vbar_reviewlisbox")            self.vbar_reviewlisbox.pack(side=RIGHT, fill=Y)            vbar_reviewlisbox["command"] = self.reviewlistbox.yview            self.reviewlistbox["yscrollcommand"] = vbar_reviewlisbox.set            self.reviewlistbox.bind("<ButtonRelease-1>", self.select_review_list)            self.reviewlistbox.bind("<MouseWheel>", self.reviewlistbox_scrollEvent)            ##        self.reviewlistbox.bind("<<ListboxSelect>>", self.reviewlistbox_onselect)            self.reviewlistbox.bind("<Button-1>", self.reviewlistbox_onselect)            self.reviewlistbox.bind("<Key-Up>", lambda event, arg=self.reviewlistbox: self.up_event(event, arg))            self.reviewlistbox.bind("<Key-Down>", lambda event, arg=self.reviewlistbox: self.down_event(event, arg))            self.reviewlistbox.pack()            mid_sub_list_review_frame = Frame(list_review_frame,width=50)            mid_sub_list_review_frame.pack()            button_refresh_review = Button(mid_sub_list_review_frame,                                           text='Refresh list',                                           state=NORMAL,                                           command=self.click_refresh_list,                                           width=10)            dummy = Label(mid_sub_list_review_frame,width=50,pady=5)            dummy.pack(side=LEFT)            button_refresh_review.pack(anchor=W)        # Review QAMS ID        next_sub_list_review_frame = Frame(page)        next_sub_list_review_frame.pack(anchor=W)        button_create_review = Button(review_list_frame,                                      text='Create report',                                      state=NORMAL,                                      command=self.click_create_report,                                      justify=LEFT,                                      width=40)        #print "AFTER"        # Conformity level        self.var_conformity = IntVar()        conformity_frame = Frame(review_list_frame, page)        conformity_level_txt = Label(conformity_frame, text='Conformity level:', fg=foreground)        conformity_level_txt.pack(side=LEFT)        for id, text in ((1, "1"), (2, "2"), (3, "3")):            conformity = Radiobutton(conformity_frame,                                     text=text,                                     variable=self.var_conformity,                                     command=self.click_conformity_level,                                     value=id)            conformity.pack(anchor=W, side=LEFT)        conformity_frame.pack()        self.var_conformity.set(1)  # initialize to level 1        self.empty_checklist = IntVar()        empty_check_button = Checkbutton(review_list_frame, text="Empty checklist", variable=self.empty_checklist)        empty_check_button.pack()        button_create_review.pack()        # Update list of project of GUI        #self.reviewlistbox.configure(state=NORMAL)        #self.reviewlistbox.delete(0, END)        #self.reviewlistbox.configure(bg="white")        review_qams_id_txt = Label(next_sub_list_review_frame,                                   text='Review QAMS ID:',                                   fg=foreground,                                   width=20)        self.review_qams_id_entry = Entry(next_sub_list_review_frame,                                          width=entry_size,                                          state=NORMAL,                                          bg="gray")        review_qams_id_txt.pack(side=LEFT)        self.review_qams_id_entry.pack(side=LEFT)        button_set_review_id = Button(next_sub_list_review_frame,                                       text='Set',                                       state=NORMAL,                                       command=self.getReview_ID,                                       width=10)        button_set_review_id.pack(anchor=W)        review_list_frame.pack(side=LEFT)        audit_list_frame.pack(side=LEFT)        #list_review_frame.pack(anchor=W)        info_frame.pack()    def _build_board_checklist_folder(self, page, **kwargs):        """        Create page for board review report generation        """        self.var_board_review_type = IntVar()        # Create top frame, with scrollbar and listbox        Frame.__init__(self, page, width=256, height=576, relief=GROOVE, **kwargs)        self.pack(fill=BOTH)        review_list_frame = Frame(self, page)        # Type of review        review_type_txt = Label(review_list_frame, text='Review type:', fg=foreground, width=40, anchor=W, padx=20)        review_type_txt.pack()        review = Review()        review_list = review.getReviewList(review_domain="Board")        ##        print review_list        for id, text in review_list:            b = Radiobutton(review_list_frame,                            indicatoron=0,                            width=40,                            text=text,                            variable=self.var_board_review_type,                            value=id)            # Only specification available for now            # if id not in (31,):            #     b.config(state=DISABLED)            b.pack()        self.var_pld_review_type.set(41)  # initialize to Specification Review        spare = Label(review_list_frame)        spare.pack()        button_create_review = Button(review_list_frame,                                      text='Create report',                                      state=NORMAL,                                      command=self.click_create_board_report,                                      justify=LEFT,                                      width=40)        button_create_review.pack()        review_list_frame.pack(side=LEFT)    def _build_eqpt_checklist_folder(self, page, **kwargs):        """        Create page for equipment review report generation        """        self.var_eqpt_review_type = IntVar()        # Create top frame, with scrollbar and listbox        Frame.__init__(self, page, width=256, height=576, relief=GROOVE, **kwargs)        self.pack(fill=BOTH)        review_list_frame = Frame(self, page)        # Type of review        review_type_txt = Label(review_list_frame, text='Review type:', fg=foreground, width=40, anchor=W, padx=20)        review_type_txt.pack()        review = Review()        review_list = review.getReviewList(review_domain="EQPT")        ##        print review_list        for id, text in review_list:            b = Radiobutton(review_list_frame,                            indicatoron=0,                            width=40,                            text=text,                            variable=self.var_eqpt_review_type,                            value=id)            # Only specification available for now            # if id not in (31,):            #     b.config(state=DISABLED)            b.pack()        self.var_eqpt_review_type.set(51)  # initialize to Specification Review        spare = Label(review_list_frame)        spare.pack()        button_create_review = Button(review_list_frame,                                      text='Create report',                                      state=NORMAL,                                      command=self.click_create_eqpt_report,                                      justify=LEFT,                                      width=40)        button_create_review.pack()        review_list_frame.pack(side=LEFT)    def _build_pld_checklist_folder(self, page, **kwargs):        """        Create page for PLD review report generation        """        self.var_pld_review_type = IntVar()        # Create top frame, with scrollbar and listbox        Frame.__init__(self, page, width=256, height=576, relief=GROOVE, **kwargs)        self.pack(fill=BOTH)        review_list_frame = Frame(self, page)        # Type of review        review_type_txt = Label(review_list_frame,                                text='Review type:',                                fg=foreground,                                width=40,                                anchor=W,                                padx=20)        review_type_txt.pack()        review = Review()        review_list = review.getReviewList(review_domain="PLD")        ##        print review_list        for id, text in review_list:            # print "ID PLD",id            b = Radiobutton(review_list_frame, indicatoron=0, width=40, text=text, variable=self.var_pld_review_type,                            value=id)            # Only specification available for now            # if id not in (31,):            #     b.config(state=DISABLED)            b.pack()        self.var_pld_review_type.set(31)  # initialize to Specification Review        spare = Label(review_list_frame)        spare.pack()        button_create_review = Button(review_list_frame,                                      text='Create report',                                      state=NORMAL,                                      command=self.click_create_pld_report,                                      justify=LEFT,                                      width=40)        button_create_review.pack()        review_list_frame.pack(side=LEFT)    def _build_checklist_folder(self, page, **kwargs):        """        Create page for review report generation        """        # notebook        notebook = Pmw.NoteBook(page)        notebook.pack(fill='both', expand=1, padx=10, pady=10)        page_software_reviews = notebook.add('Software')        page_pld_reviews = notebook.add('PLD')        page_board_reviews = notebook.add('Board')        page_eqpt_reviews = notebook.add('Equipment')        # Build HPA checklist folder in the notebook        self._build_sw_checklist_folder(page_software_reviews, **kwargs)        self._build_pld_checklist_folder(page_pld_reviews, **kwargs)        self._build_board_checklist_folder(page_board_reviews, **kwargs)        self._build_eqpt_checklist_folder(page_eqpt_reviews, **kwargs)        # TODO: Checklist update not implemented yet        button_mngt_checklists = Button(page, text='Modify checklists', state=DISABLED, command=self.modify_checklist)        button_mngt_checklists.pack(anchor=E, padx=50)    def click_create_report(self):        review_id = self.var_review_type.get()        print "REVIEW_ID",review_id        result = self.empty_checklist.get()        if result == 1:            empty = True        else:            empty = False        print "EMPTY", empty        self.queue.put("BUILD_REVIEW_REPORT")        self.queue.put(review_id)        self.queue.put(empty)        self.click_clear()    def click_refresh_list(self):        """        Refresh reviews listbox        """        self.review_qams_id_entry.delete(0, END)        from api_mysql import MySQL        inter = 0        self.reviewlistbox.delete(0, END)        mysql = MySQL()        list_review,stderr = mysql.exportReviewsList(self.component,self.impl_release)        if not stderr:            self.log(list_review)        else:            for review_description in list_review:                self.reviewlistbox.insert(END, review_description)                if inter % 2 == 0:                    self.reviewlistbox.itemconfig(inter, {'bg': 'darkgrey', 'fg': 'white'})                else:                    self.reviewlistbox.itemconfig(inter, {'bg': 'lightgrey', 'fg': 'black'})                inter += 1        print "click_refresh_list"    def click_create_pld_report(self):        review_id = self.var_pld_review_type.get()        print "review_id", review_id        self.queue.put("BUILD_REVIEW_REPORT")        self.queue.put(review_id)        self.queue.put(False)    def click_create_board_report(self):        review_id = self.var_board_review_type.get()        print "review_id", review_id        self.queue.put("BUILD_REVIEW_REPORT")        self.queue.put(review_id)        self.queue.put(False)    def click_create_eqpt_report(self):        review_id = self.var_eqpt_review_type.get()        print "review_id", review_id        self.queue.put("BUILD_REVIEW_REPORT")        self.queue.put(review_id)        self.queue.put(False)class GuiTool():    def createEntry(self,                    frame,                    tag,                    content,                    bg="white",                    entry_size = 30,                    width=20,                    side=""):            """            :param frame:            :param tag:            :param content:            :param bg:            :param entry_size:            :param width:            :param side:            :return: Entry object            """            box = Frame(frame)            label_txt = Label(box, text=tag, fg=foreground, width=width, anchor=W, padx=2)            label_txt.pack(side=LEFT)            entry = ThreadSafeEntry(box,                                    state=NORMAL,                                    width=entry_size,                                    bg=bg)            entry.insert(END, content)            entry.pack()            if side != "":                box.pack(side=side)            else:                box.pack()            return entryclass ChangeGui(ConfigIndexGui,                Tool,                GuiTool,                ConfigParser):    """    Notebook 'Create CCB'    """    def __init__(self):        ConfigIndexGui.__init__(self)        self.list_cr_status = []        self.list_cr_type = []        self.list_cr_doamin = []        self.dico_cr_status={"closed":self.getStatusClosed,                        "cancel":self.getStatusCancel,                        "reject":self.getStatusReject,                        "analysis":self.getStatusAnalysis,                        "compl_analysis":self.getStatusComplAnalysis,                        "review":self.getStatusReview,                        "modif":self.getStatusModif,                        "verif":self.getStatusVerif,                        "fixed":self.getStatusFixed,                        "postponed":self.getStatusPostpon,                        }        self.checkbutton_all = False        # ccb_var_type define which CR domain is used        self.ccb_var_type = StringVar()        self.ccb_var_type.set("PLDCR")  # initialize        self.list_cr_doamin = ["PLDCR"]        # cid_var_type define which CID is to be built        self.cid_var_type = StringVar()        self.hcmr_var_type = StringVar()        self.cid_var_type.set("HCMR")        self.hcmr_var_type.set("HCMR_PLD")        self.action = ActionGui(system=self.system,                                callback=self.setActionIemsDb)        self.attribute = "CR_implemented_for"        self.type_cr_workflow = "None"        self.status_old_workflow = IntVar()        config_file = join("conf","docid.ini")        #from ConfigParser import ConfigParser        self.config_parser = ConfigParser()        self.config_parser.read(config_file)        self.ccb_cr_sort = self.getOptions("Generation","ccb_cr_sort")        self.ccb_cr_parent = self.getOptions("Generation","ccb_cr_parent")    def click_create_actions_db(self):        print "click_create_actions_db"        db_name = self.action.createActionItemsDb(get_user_filename=True)        self.action.setActionIemsDb(db_name)    def select_actions_db(self):        db_name = tkFileDialog.askopenfilename(defaultextension = '.db3',                                                filetypes=[('SQLite v3 database','.db3'),('SQLite database','.db')],                                                title="set Action Items database.")        self.log("Set {:s} SQLite action items database.".format(db_name))        self.defill()        self.action.setActionIemsDb(db_name)        #self.setActionIemsDb(db_name)    def getTypeWorkflow(self):        if self.type_cr_workflow in ("Old", "New"):            if self.type_cr_workflow == "Old":                old_cr_workflow = True            else:                old_cr_workflow = False        else:            old_cr_workflow = self.status_old_workflow.get()        self.old_cr_workflow = old_cr_workflow        return (old_cr_workflow)    def crlistbox_scrollEvent(self, event):        if event.delta > 0:            self.crlistbox.yview_scroll(-2, 'units')        else:            self.crlistbox.yview_scroll(2, 'units')    def crlistbox_onselect(self, event):        # Note here that Tkinter passes an event object to onselect()        cr_index = self.crlistbox.curselection()[0]        if cr_index != ():            cr = self.crlistbox.get(cr_index)            m = re.match(r'^([0-9]{1,4})\) (.*)$', cr)            if m:                cr_id = m.group(1)                # Remove zeros on the left only                cr_id = cr_id.lstrip('0')            else:                cr_id = "None"            print 'You selected CR %s: "%s"' % (cr_id, cr)            ##        webbrowser.open("http://spar-syner1.in.com:8600/change/framesetLoader.do?frameName=panelAndDialog&temp_token=792414148515128161")            self.success.config(fg='red',bg = 'yellow',text="EXPORT IN PROGRESS")            self.queue.put("EXPORT_CR")            self.queue.put(cr_id)            self.click_clear()    def select_cr_list(self, event):        pass    def getWithParentOption(self):        cr_with_parent = self.cr_with_parent.get()        if cr_with_parent is 1:            return True        else:            return False    def openTarget(self, target):        try:            if sys.platform.startswith('win32'):                # Windows                os.startfile(target, 'open')            elif sys.platform.startswith('darwin'):                # Mac OSX                opener = "open"                subprocess.call([opener, target])            else:                opener = "xdg-open"                subprocess.call([opener, target])        except WindowsError,e:            print "{:s}".format(e)    def openHLink_ccb(self, event):        start, end = self.general_output_txt.tag_prevrange("hlink",                                                           self.general_output_txt.index("@%s,%s" % (event.x, event.y)))        print "Going to %s..." % self.general_output_txt.get(start, end)        print "gen_dir", self.gen_dir        print "docx_filename", self.docx_filename        target = join(self.gen_dir, self.docx_filename)        self.openTarget(target)        #webbrowser.open    def beginCmd(self,text,color=True):        if color:            self.success.config(fg='red',bg = 'yellow',text=text)        else:            self.success.config(fg='black',bg = 'grey',text=text)    def endCmd(self,text):        pass    def click_get_cr(self):        '''        Function which put        - GET_CR command        - baseline        - cr type        into the queue        called when the user press the "List CR" button in folder "Create CCB"        '''        self.beginCmd("CHANGE REQUEST LISTING IN PROGRESS")        dico = self.getParameters()        self.click_clear()        self.getGUICRStatus()        self.selectCR_Domain()        self.getGUICRType(self.system,                          self.item)        self.click_set_parameters()        baseline = self.getBaseline()        ccb_type = None # deprecated        for_review_on = self.cr_for_review_var.get()        cr_with_parent = self.cr_with_parent.get()        log_on = self.log_on_var.get()        old_cr_workflow = self.getTypeWorkflow()        ccb_time = self.time_capsule_entry.get()        # Check if CR type is coherent CR domain        list_cr_domain = self.getListCR_Domain()    # Ex: SACR, SCR etc.        cr_type = dico["cr_type"]                   # Ex: ESSNESS, SW_ENM, etc.        proceed = True        if len(list_cr_domain) == 1:            if self.domain_reference != list_cr_domain[0]:                print "Warning, CR domain not compatible with CR type"                if tkMessageBox.askokcancel("List CR", "Do you really want to proceed anyway?"):                    proceed = True                else:                    proceed = False        if proceed:            print "CR domain",list_cr_domain            print "CR type",cr_type            self.queue.put("GET_CR")  # order to get CR            self.queue.put([baseline,                            ccb_type,                            for_review_on,                            cr_with_parent,                            log_on,                            dico["cr_type"],                            dico["detect"],                            dico["implemented"],                            old_cr_workflow,                            ccb_time])            self.click_clear()    def setActionIemsDb(self, db_name):        self.ccb_action_items_db_entry.configure(state='normal')        self.ccb_action_items_db_entry.delete(0,END)        self.ccb_action_items_db_entry.insert(END,db_name)        self.ccb_action_items_db_entry.configure(state='readonly')    def _build_list_cr_frame(self, ccb_right):        # Button List CR        list_cr_frame = LabelFrame(ccb_right,                                   text="Change Requests found:",                                   bd=0)        #list_cr_frame.grid(row =row_index,sticky='E')        sub_list_cr_frame = Frame(list_cr_frame)        sub_list_cr_frame.pack(anchor=W)        # crlistbox is updated thanks to RELOAD_CRLISTBOX keyword        self.crlistbox = ThreadSafeListbox(sub_list_cr_frame,                                 height=16,                                 width=150,                                 exportselection=0,                                 state=DISABLED,                                 bg="gray",                                 selectmode=EXTENDED)        #self.crlistbox.insert(END, "All")        self.vbar_crlisbox = vbar_crlisbox = Scrollbar(sub_list_cr_frame, name="vbar_crlisbox")        self.vbar_crlisbox.pack(side=RIGHT, fill=Y)        vbar_crlisbox["command"] = self.crlistbox.yview        self.crlistbox["yscrollcommand"] = vbar_crlisbox.set        self.crlistbox.bind("<ButtonRelease-1>", self.select_cr_list)        self.crlistbox.bind("<MouseWheel>", self.crlistbox_scrollEvent)        self.crlistbox.bind("<Double-Button-1>", self.crlistbox_onselect)        self.crlistbox.bind("<Key-Up>", lambda event, arg=self.crlistbox: self.up_event(event, arg))        self.crlistbox.bind("<Key-Down>", lambda event, arg=self.crlistbox: self.down_event(event, arg))        self.crlistbox.pack(fill=BOTH)        # Checkbuttons        self.log_on_var = IntVar()        self.cr_for_review_var = IntVar()        self.cr_with_parent = IntVar()        self.with_tasks_var = IntVar()        self.button_cr_for_review = Checkbutton(list_cr_frame, text="Export CR for review report",                                                variable=self.cr_for_review_var, fg=foreground,                                                command=self.cb_cr_for_review)        self.button_log_on = Checkbutton(list_cr_frame, text="Log on",                                         variable=self.log_on_var,                                         fg=foreground,                                         command=self.cb_log_on)        self.button_with_tasks = Checkbutton(list_cr_frame,                                             text="With tasks",                                             variable=self.with_tasks_var,                                             fg=foreground,                                             command=self.cb_with_tasks)        self.button_cr_with_parent = Checkbutton(list_cr_frame,                                                 text="With parent CR",                                                 variable=self.cr_with_parent,                                                 fg=foreground,                                                 command=self.cb_with_parent_cr)        if self.ccb_cr_parent != "":            if self.ccb_cr_parent == "yes":                self.cr_with_parent.set(1)            else:                self.cr_with_parent.set(0)            self.button_cr_with_parent.configure(state="disabled")        else:            self.button_cr_with_parent.configure(state="normal")        self.button_cr_for_review.configure(state="disabled")        self.button_log_on.pack(side=LEFT)        self.button_cr_for_review.pack(side=LEFT)        self.button_cr_with_parent.pack(side=LEFT)        # Time capsule        timecapsule_frame = Frame(list_cr_frame)        timecapsule_frame.pack(anchor=W)        if 0==1:            default_time = datetime.now()            default_time_converted = "{:d}/{:d}/{:d} {:d}:{:d}:{:d}".format(default_time.year,                                               default_time.month,                                               default_time.day,                                               default_time.hour,                                               default_time.minute,                                               default_time.second)        #d = datetime.strptime(default_time, '%Y/%m/%d %H:%M:%S')        self.time_capsule_entry = self.createEntry(timecapsule_frame,                                                   'CCB meeting time:',                                                   Tool.getDateNow(),                                                   side=LEFT)        #self.time_capsule_entry.pack()        explain = Label(timecapsule_frame,                        text="Format:YYYY/MM/DD HH:MM:SS",                        fg=foreground, width=40,anchor=W)        explain.pack()        return list_cr_frame    def createRadioButtonDomainPanel(self,                          type_frame,                          var_domain,                          excr_type,                          ccb_type):        row_index = 1        ccb_type_txt = Label(type_frame, text='Change Requests domains:')        radiobutton_ex = Radiobutton(type_frame,                                     indicatoron=0,                                     width=8,                                     text="EXCR",                                     variable=var_domain,                                     value="EXCR",                                     fg=foreground,                                     command=excr_type)        radiobutton_dico = {}        for domain in ("SyCR","ECR","SACR","HCR","PLDCR","SCR","All"):            radiobutton_dico[domain] = Radiobutton(type_frame,                                             indicatoron=0,                                             width=8,                                             text=domain,                                             value=domain,                                             variable=var_domain,                                             fg=foreground,                                             command=ccb_type)        ccb_type_txt.grid(row=row_index, column=1, sticky='W', padx=20)        row_index += 1        radiobutton_ex.grid(row=row_index, column=1, padx=10, sticky='W')        radiobutton_dico["SyCR"].grid(row=row_index, column=1, padx=75, sticky='W')        radiobutton_dico["ECR"].grid(row=row_index, column=1, padx=140, sticky='W')        radiobutton_dico["SACR"].grid(row=row_index, column=1, padx=75, sticky='E')        row_index += 1        radiobutton_dico["HCR"].grid(row=row_index, column=1, padx=10, sticky='W')        radiobutton_dico["PLDCR"].grid(row=row_index, column=1, padx=75, sticky='W')        radiobutton_dico["SCR"].grid(row=row_index, column=1, padx=140, sticky='W')        radiobutton_dico["All"].grid(row=row_index, column=1, padx=75, sticky='E')    def createCkeckButtonDomainPanel(self,                          type_frame,                          var_domain,                          excr_type,                          ccb_type):        self.dico_var_domain = {"EXCR":False,                                "SyCR":False,                                "ECR":False,                                "SACR":False,                                "HCR":False,                                "PLDCR":False,                                "SCR":False,                                "All":False}        self.previous_cr_domain_status_all = False        for domain in self.dico_var_domain:            self.dico_var_domain[domain] = IntVar()        row_index = 1        ccb_type_txt = Label(type_frame, text='Change Requests domains:')        self.domain_button_dico = {}        #self.domain_button_dico["EXCR"] = Checkbutton(type_frame,        #                             indicatoron=0,        #                             width=8,        #                             text="EXCR",        #                             variable=self.dico_var_domain["EXCR"],        #                             #value="EXCR",        #                             fg=foreground,        #                             onvalue=True, offvalue=False,        #                             command=self.selectCR_Domain)        #self.domain_button_dico["EXCR"].var = self.dico_var_domain["EXCR"]        for domain in ("EXCR","SyCR","ECR","SACR","HCR","PLDCR","SCR","All"):            self.domain_button_dico[domain] = Checkbutton(type_frame,                                             indicatoron=0,                                             width=8,                                             text=domain,                                             #value=domain,                                             variable=self.dico_var_domain[domain],                                             fg=foreground,                                             onvalue=True, offvalue=False,                                             command=self.selectCR_Domain)            self.domain_button_dico[domain].var = self.dico_var_domain[domain]        ccb_type_txt.grid(row=row_index, column=1, sticky='W', padx=20)        row_index += 1        self.domain_button_dico["EXCR"].grid(row=row_index, column=1, padx=10, sticky='W')        self.domain_button_dico["SyCR"].grid(row=row_index, column=1, padx=75, sticky='W')        self.domain_button_dico["ECR"].grid(row=row_index, column=1, padx=140, sticky='W')        self.domain_button_dico["SACR"].grid(row=row_index, column=1, padx=75, sticky='E')        row_index += 1        self.domain_button_dico["HCR"].grid(row=row_index, column=1, padx=10, sticky='W')        self.domain_button_dico["PLDCR"].grid(row=row_index, column=1, padx=75, sticky='W')        self.domain_button_dico["SCR"].grid(row=row_index, column=1, padx=140, sticky='W')        self.domain_button_dico["All"].grid(row=row_index, column=1, padx=75, sticky='E')    def excr_type(self):        # Customize EXCR workflow        self.check_button_status_in_analysis.configure(text="Entered")        self.check_button_status_under_modif.configure(text="In progress")        self.check_button_status_fixed.configure(text="Implemented")        self.check_button_status_postponed.configure(text="Workaround")        self.check_button_status_compl_analysis.grid_forget()        self.check_button_status_in_review.grid_forget()        self.check_button_status_under_verif.grid_forget()        self.check_button_status_canceled.grid_forget()        self.cr_activate_all_button()    def cr_activate_all_button(self):        self.check_button_status_in_analysis.config(state=NORMAL)        self.check_button_status_compl_analysis.config(state=NORMAL)        self.check_button_status_in_review.config(state=NORMAL)        self.check_button_status_postponed.config(state=NORMAL)        self.check_button_status_under_modif.config(state=NORMAL)        self.check_button_status_under_verif.config(state=NORMAL)        self.check_button_status_fixed.config(state=NORMAL)        self.check_button_status_closed.config(state=NORMAL)        self.check_button_status_canceled.config(state=NORMAL)        self.check_button_status_rejected.config(state=NORMAL)        self.check_button_status_all.config(state=NORMAL)    def cr_deactivate_all_button(self):        self.check_button_status_in_analysis.config(state=DISABLED)        self.check_button_status_compl_analysis.config(state=DISABLED)        self.check_button_status_in_review.config(state=DISABLED)        self.check_button_status_postponed.config(state=DISABLED)        self.check_button_status_under_modif.config(state=DISABLED)        self.check_button_status_under_verif.config(state=DISABLED)        self.check_button_status_fixed.config(state=DISABLED)        self.check_button_status_closed.config(state=DISABLED)        self.check_button_status_canceled.config(state=DISABLED)        self.check_button_status_rejected.config(state=DISABLED)        self.check_button_status_all.config(state=DISABLED)    def resetCR_Domain_Buttons(self,keep_excr=False):        self.dico_var_domain = {"EXCR":keep_excr,                                "SyCR":False,                                "ECR":False,                                "SACR":False,                                "HCR":False,                                "PLDCR":False,                                "SCR":False}        for domain in ("EXCR","SyCR","ECR","SACR","HCR","PLDCR","SCR"):            self.domain_button_dico[domain].deselect()        del self.list_cr_doamin[0:]    def resetCR_Status_Buttons(self):        self.check_button_status_in_analysis.deselect()        self.check_button_status_compl_analysis.deselect()        self.check_button_status_in_review.deselect()        self.check_button_status_postponed.deselect()        self.check_button_status_under_modif.deselect()        self.check_button_status_under_verif.deselect()        self.check_button_status_fixed.deselect()        self.check_button_status_closed.deselect()        self.check_button_status_canceled.deselect()        self.check_button_status_rejected.deselect()        self.check_button_status_all.deselect()        self.cr_deactivate_all_button()        self.checkbutton_all = False    def setAllCR_Status_Buttons(self):        self.check_button_status_in_analysis.select()        self.check_button_status_compl_analysis.select()        self.check_button_status_in_review.select()        self.check_button_status_postponed.select()        self.check_button_status_under_modif.select()        self.check_button_status_under_verif.select()        self.check_button_status_fixed.select()        self.check_button_status_closed.select()        self.check_button_status_canceled.select()        self.check_button_status_rejected.select()        self.check_button_status_all.select()        self.cr_activate_all_button()        self.checkbutton_all = True    def getListCR_Domain(self):        print "list_cr_doamin",self.list_cr_doamin        return self.list_cr_doamin    def resetAll(self):        self.domain_button_dico["All"].deselect()        self.dico_var_domain["All"] = False        self.previous_cr_domain_status_all = False    def selectCR_Domain(self):        dico_cr_domain_status = {}        nb_buttons_selected = 0        del self.list_cr_doamin[0:]        cr_domain = ""        for domain,tk_status in self.domain_button_dico.iteritems():            status = tk_status.var.get()            dico_cr_domain_status[domain] = status            if status and (domain != "All"):                cr_domain = domain                self.list_cr_doamin.append(domain)                nb_buttons_selected += 1                if self.previous_cr_domain_status_all:                    dico_cr_domain_status["All"] = False                    self.resetAll()                print "cr_domain",cr_domain            #print "selectCR_Domain",domain,status        print "nb_buttons_selected",nb_buttons_selected        print "getListCR_Domain",self.getListCR_Domain()        print "dico_cr_domain_status",dico_cr_domain_status        if nb_buttons_selected >= 2:            # Disable CR status checkbuttons            self.resetGUICRStatus()            self.cr_deactivate_all_button()        else:            self.cr_activate_all_button()        if dico_cr_domain_status["All"]:            if not self.previous_cr_domain_status_all:                self.previous_cr_domain_status_all = True                # Domains                self.resetCR_Domain_Buttons()                self.setAllCR_Status_Buttons()                # Status                self.click_status_all()            else:                self.resetAll()        else:            if nb_buttons_selected == 0:                # No buttons                self.domain_button_dico["All"].select()                self.dico_var_domain["All"] = True            elif nb_buttons_selected <= 1:                if dico_cr_domain_status["EXCR"]:                    print "EXCR selected alone"                    self.excr_type()                    self.domain_reference = ""                else:                    print "classic CR radiobuttons"                    # which button ?                    #self.domain_reference = cr_domain                    self.ccb_type(cr_domain)        #for domain,status  in self.dico_var_domain.iteritems():        #    print  "selectCR_Domain",domain,status    def ccb_type(self,cr_domain=""):        """        Called when a CR button is clicked.        :return:        """        if cr_domain == "":            cr_domain = self.ccb_var_type.get()        # set CID type        cid_type,hcmr_type = self.computeCIDType(cr_domain)        self.setCIDType(cid_type,                        hcmr_type)        # Set [X]CR workflow        self.cb_old_workflow()        row_index = 0        self.check_button_status_compl_analysis.grid(row=row_index + 1, column=3, padx=10, sticky='W')        self.check_button_status_in_review.grid(row=row_index + 2,      column=2, padx=10, sticky='W')        self.check_button_status_under_verif.grid(row=row_index + 4,    column=2, padx=10, sticky='W')        self.check_button_status_canceled.grid(row=row_index + 5,       column=3, padx=10, sticky='W')        ##        print "CCB type is '{:s}'".format(self.ccb_var_type.get())        if cr_domain == "ALL":            self.resetCR_Status_Buttons()        else:            self.setAllCR_Status_Buttons()    def cb_log_on(self):        print "variable 'Log on' is", self.log_on_var.get()    def cb_with_tasks(self):        print "variable 'With tasks' is", self.with_tasks_var.get()    def cb_with_parent_cr(self):        print "variable 'With parent CR' is", self.cr_with_parent.get()    def cb_cr_for_review(self):        print "variable 'Export CR for review' is", self.cr_for_review_var.get()    def cb_integrate(self):        print "variable 'Integrate' is", self.status_integrate.get()    def cb_old_workflow(self):        old_workflow = self.getTypeWorkflow()        if old_workflow:            # Old workflow requested            self.check_button_status_in_analysis.configure(text="entered")            self.check_button_status_under_modif.configure(text="assigned")            self.check_button_status_fixed.configure(text="resolved")            self.check_button_status_postponed.configure(text="postponed")            self.check_button_status_closed.configure(text="concluded")        else:            # New workflow requested            self.check_button_status_in_analysis.configure(text="In analysis")            self.check_button_status_under_modif.configure(text="Under modification")            self.check_button_status_fixed.configure(text="Fixed")            self.check_button_status_postponed.configure(text="Postponed")            self.check_button_status_closed.configure(text="Closed")        print "variable 'Old CR workflow' is", old_workflow    def click_status_all(self):        print "click_status_all",self.checkbutton_all        if not self.checkbutton_all:            # checkbutton 'All' is selected            self.check_button_status_in_analysis.select()            self.check_button_status_postponed.select()            self.check_button_status_under_modif.select()            self.check_button_status_fixed.select()            self.check_button_status_closed.select()            self.check_button_status_rejected.select()            if self.ccb_var_type.get() != "EXCR":                self.check_button_status_canceled.select()                self.check_button_status_under_verif.select()                self.check_button_status_compl_analysis.select()                self.check_button_status_in_review.select()            else:                self.check_button_status_canceled.deselect()                self.check_button_status_under_verif.deselect()                self.check_button_status_compl_analysis.deselect()                self.check_button_status_in_review.deselect()            self.checkbutton_all = True            print "Select all"        else:            self.check_button_status_in_analysis.deselect()            self.check_button_status_compl_analysis.deselect()            self.check_button_status_in_review.deselect()            self.check_button_status_postponed.deselect()            self.check_button_status_under_modif.deselect()            self.check_button_status_under_verif.deselect()            self.check_button_status_fixed.deselect()            self.check_button_status_closed.deselect()            self.check_button_status_canceled.deselect()            self.check_button_status_rejected.deselect()            self.checkbutton_all = False            print "Deselect all"    def createCR_StatusPanel(self,square_frame):        # right panel        self.status_in_analysis = IntVar()        self.status_in_review = IntVar()        self.status_under_modif = IntVar()        self.status_under_verif = IntVar()        self.status_fixed = IntVar()        self.status_closed = IntVar()        self.status_postponed = IntVar()        self.status_compl_analysis = IntVar()        self.status_canceled = IntVar()        self.status_rejected = IntVar()        self.status_all = IntVar()        state_frame = LabelFrame(square_frame,                                 text='Change Requests state:',                                 width=300,                                 height=200,                                 bd=0)        #TODO Use ThreadSafeCheckbutton class        self.check_button_status_in_analysis = Checkbutton(state_frame,                                                           text="In analysis",                                                           variable=self.status_in_analysis,                                                           fg=foreground)        self.check_button_status_in_review = Checkbutton(state_frame,                                                         text="In review",                                                         variable=self.status_in_review,                                                         fg=foreground)        self.check_button_status_under_modif = Checkbutton(state_frame,                                                           text="Under modification",                                                           variable=self.status_under_modif,                                                           fg=foreground)        self.check_button_status_under_verif = Checkbutton(state_frame,                                                           text="Under verification",                                                           variable=self.status_under_verif,                                                           fg=foreground)        self.check_button_status_fixed = Checkbutton(state_frame,                                                     text="Fixed",                                                     variable=self.status_fixed,                                                     fg=foreground)        self.check_button_status_closed = Checkbutton(state_frame,                                                      text="Closed",                                                      variable=self.status_closed,                                                      fg=foreground)        self.check_button_status_postponed = Checkbutton(state_frame,                                                         text="Postponed",                                                         variable=self.status_postponed,                                                         fg=foreground)        self.check_button_status_compl_analysis = Checkbutton(state_frame,                                                              text="Complementary analysis",                                                              variable=self.status_compl_analysis,                                                              fg=foreground)        self.check_button_status_canceled = Checkbutton(state_frame,                                                        text="Canceled",                                                        variable=self.status_canceled,                                                        fg=foreground)        self.check_button_status_rejected = Checkbutton(state_frame,                                                        text="Rejected",                                                        variable=self.status_rejected,                                                        fg=foreground)        self.check_button_status_all = Checkbutton(state_frame,                                                   text="All",                                                   variable=self.status_all,                                                   fg=foreground,                                                   command=self.click_status_all)        row_index = 0        self.check_button_status_in_analysis.grid(row=row_index + 1,    column=2, padx=10, sticky='W')        self.check_button_status_compl_analysis.grid(row=row_index + 1, column=3, padx=10, sticky='W')        self.check_button_status_in_review.grid(row=row_index + 2,      column=2, padx=10, sticky='W')        self.check_button_status_postponed.grid(row=row_index + 2,      column=3, padx=10, sticky='W')        self.check_button_status_under_modif.grid(row=row_index + 3,    column=2, padx=10, sticky='W')        self.check_button_status_under_verif.grid(row=row_index + 4,    column=2, padx=10, sticky='W')        self.check_button_status_fixed.grid(row=row_index + 5,          column=2, padx=10, sticky='W')        self.check_button_status_canceled.grid(row=row_index + 5,       column=3, padx=10, sticky='W')        self.check_button_status_closed.grid(row=row_index + 6,         column=2, padx=10, sticky='W')        self.check_button_status_rejected.grid(row=row_index + 6,       column=3, padx=10, sticky='W')        self.check_button_status_all.grid(row=row_index + 7,            column=2, padx=10, sticky='W')        self.ccb_type()        return state_frame    def _build_ccb_folder(self,                          page,                          width=768,                          height=600,                          img_display='hidden',                          **kwargs):        '''        Create folder for change requests        ccb_left                last_pane (img)        ccb_right            panel_domains                type_frame (Change Request domains)                context_frame (Generate CCB --------- List CR)            state_frame (Change requests state: pack)            list_cr_frame (Change requests found pack)        '''        global entry_size        # Create top frame, with scrollbar and listbox        #Frame.__init__(self,        #               page,        #               width=width,        #               height=height,        #               relief=GROOVE,        #               **kwargs)        #self.pack(fill=BOTH)        ccb_right = Frame(page)        square_frame = Frame(ccb_right)        square_frame.pack(anchor=NW)        panel_domains = LabelFrame(square_frame,bd=0)        image_frame = Frame(square_frame)        type_frame = Frame(panel_domains)        type_frame.pack(anchor=W)        #grid(row=1,        #                column=0,        #                sticky='NW')        row_index = 1        if 0==1:            self.createRadioButtonDomainPanel(type_frame,                                              self.ccb_var_type,                                              self.excr_type,                                              self.ccb_type)        else:            self.createCkeckButtonDomainPanel(type_frame,                                              self.ccb_var_type,                                              self.excr_type,                                              self.ccb_type)        row_index += 2        context_frame = Frame(panel_domains,padx=5)        context_frame.pack(anchor=W,padx=5)#grid(row=2, column=1, sticky='W')        row_index += 2        # Change built-in keyword mirror of "Parameters" folder        #change_keywords_frame = LabelFrame(context_frame, text="Change attributes",bd=0)        #change_keywords_frame.grid(row=row_index, column=1, sticky='NW')        #change_keywords_frame.pack(ipady=10,ipadx=5)        #balloon_help_change_keywords = Pmw.Balloon(context_frame)        #balloon_help_change_keywords.bind(change_keywords_frame, 'Go into the "Parameters" folder\n'        #                                                         'to modify these fields')        # Build        row_index += 2        button_select_ccb = Button(context_frame,                                   text='Generate CCB',                                   state=NORMAL,                                   command=self.click_build_ccb)        button_get_cr = Button(context_frame,                               text='List CR',                               state=NORMAL,                               command=self.click_get_cr)        button_add_action = Button(context_frame,                               text='Add action',                               state=NORMAL,                               command=self.action.click_update_action_item)        button_select_ccb.pack(side=LEFT,anchor=W)            #grid(row=row_index,   column=1, pady=5, sticky='W', padx=10)        button_get_cr.pack(side=LEFT,anchor=W)            #grid(row=row_index,       column=1, pady=5, sticky='W', padx=100)        button_add_action.pack(side=LEFT,anchor=W)            #grid(row=row_index,   column=1, pady=5, sticky='E', padx=150)        #row_index += 1        actions_frame = Frame(panel_domains)        ccb_action_items_db_txt = Label(actions_frame,                                   text='Action items database:',                                   fg=foreground,                                   width=20)        self.ccb_action_items_db_entry = Entry(actions_frame,                                          width=40,                                          state=NORMAL,                                          bg="gray")        row_index += 1        ccb_action_items_db_txt.pack(anchor=W)#grid(row=row_index, column=1, pady=5, sticky='W', padx=10)        row_index += 1        self.ccb_action_items_db_entry.pack(anchor=W)#grid(row=row_index, column=1, pady=5, sticky='W', padx=10)        self.ccb_action_items_db_entry.configure(state='readonly')        actions_frame.pack(anchor=W)        # Image        row_index += 1        #Drawing        if 0==1:            self.ccb_word_img_can = Canvas(image_frame,                                           width=128,                                           height=128,                                           highlightthickness=0)            try:                bitmap = PhotoImage(file="img/file_doc.gif")                self.ccb_word_img = self.ccb_word_img_can.create_image(64, 64, image=bitmap)                self.ccb_word_img_can.bitmap = bitmap                self.ccb_word_img_can.pack(fill=Y, padx=10, pady=25)                self.ccb_word_img_can.bind("<Double-Button-1>", self.openCCB)                self.ccb_word_img_can.itemconfigure(self.ccb_word_img, state=img_display)            except TclError as exception:                print "TCL error:", exception        # right panel        state_frame = self.createCR_StatusPanel(square_frame)        state_frame.pack(anchor=W,side=LEFT)        panel_domains.pack(side=LEFT)        image_frame.pack()        self.ccb_type()        self.cid_type()        self.setActionIemsDb(self.action.actions_db_filename)        return ccb_right    def openCCB(self, event):        print "Open CCD"        target = join(self.gen_dir, self.docx_filename)        self.openTarget(target)    def displayCRWorkflow(self, event):        print "Click canvas"    def createCR_Status(self,status_suffix):        cr_domain = self.getCR_Domain()        if cr_domain is not None:            status = "{:s}_{:s}".format(cr_domain,status_suffix)        else:            status = None        return status    def getCR_Domain(self):        """        get CR type button value            EXCR, SyCR, ECR, SACR, HCR, PLDCR, SCR        :return:        """        #result = self.ccb_var_type.get()        if len(self.list_cr_doamin) == 1:            # Only one domain selected            result = self.list_cr_doamin[0]        else:            # At least 2 domains, cannot select CR domain for now            result = None        return result    def setCR_Domain(self,cr_domain):        del self.list_cr_doamin[0:]        self.list_cr_doamin.append(cr_domain)    def forceCCBType(self, cr_domain):        print "forceCCBType set ccb_var_type to {:s}".format(cr_domain)        self.resetCR_Domain_Buttons()        self.domain_button_dico["All"].deselect()        self.dico_var_domain["All"] = False        if cr_domain in self.domain_button_dico:            self.domain_button_dico[cr_domain].select()        self.setCR_Domain(cr_domain)    def _getListCRForCCB(self):        """        Get list of CR in crlistbox listbox in IHM to take into account in the CCB minutes        from the CR list box        """        index_list_crs = self.crlistbox.curselection()        list_cr_for_ccb = []        for cr_index in index_list_crs:            if cr_index != ():                cr = self.crlistbox.get(cr_index)                m = re.match(r'^([0-9]*)\) (.*)$',cr)                if m:                    cr_id = m.group(1).lstrip('0')                else:                    pass                list_cr_for_ccb.append(cr_id)                self.log("CR in CCB scope: " + cr_id)        if list_cr_for_ccb == []:            list_cr_for_ccb_available = False        else:            list_cr_for_ccb_available = True        return list_cr_for_ccb,list_cr_for_ccb_available    def click_build_ccb(self):        '''        Function which put        - author        - reference        - revision        - release        - baseline        - project        - cr type        into the queue        called when the user press the Build button        '''        self.click_set_parameters()        dico_parameters = self.getParameters()        cr_with_parent = self.getWithParentOption()        cr_workflow = self.type_cr_workflow        cr_domain = self.getCR_Domain()        log_on = self.log_on_var.get()        list_cr_for_ccb,status_list = self._getListCRForCCB()        ccb_time = self.time_capsule_entry.get()        self.getGUICRStatus()        self.selectCR_Domain()        self.getGUICRType(self.system,                          self.item)        message_box_txt = "Generate CCB Report ?"        if tkMessageBox.askokcancel("CCB report generation",                                    message_box_txt):            self.beginCmd("CHANGE CONTROL BOARD REPORT GENERATION IN PROGRESS")            # Create docx            self.queue.put("BUILD_CCB")  # order to build docx            self.queue.put([dico_parameters,                            cr_with_parent,                            cr_workflow,                            cr_domain,                            log_on,                            list_cr_for_ccb,                            status_list,                            ccb_time])    def resetGUICRStatus(self):        del self.list_cr_status[0:]    def getGUICRStatus(self):        """        Convert dictionary like:        {"analysis":self.getStatusAnalysis}        in        ("SACR_In_Analysis")        :return:        """        del self.list_cr_status[0:]        for tag,func in self.dico_cr_status.iteritems():            status = func()            if status is not None:                self.list_cr_status.append(status)    def getGUICRType(self,                     system="",                     item=""):        # cr type        dico = self.getParameters()        print "system",system        print "item",item        del self.list_cr_type[0:]        print "len(self.list_cr_doamin)",len(self.list_cr_doamin)        if len(self.list_cr_doamin) <= 1:            if Tool.isAttributeValid(dico["cr_type"]):                self.list_cr_type.append(dico["cr_type"])        else:            if Tool.isAttributeValid(item):                lru_cr_type = self._getItemCRType(system=system,item=item)                self.list_cr_type.append(lru_cr_type)                result = self.getListComponents(system=system,item=item)                for name,cr_type in result:                    self.list_cr_type.append(cr_type)            else:                self.list_cr_type.append(dico["cr_type"])    # [X]CR Workflow    def getStatusClosed(self):        '''        concluded        [X]CR_Closed        '''        try:            cr_status = self.status_closed.get()        except AttributeError:            cr_status = 1        if cr_status == 0:            status = None        else:            if self.getTypeWorkflow():                status = "concluded"            else:                status = self.createCR_Status("Closed")        return status    def getStatusCancel(self):        try:            cr_status = self.status_canceled.get()        except AttributeError:            cr_status = 1        if cr_status == 0 or self.getTypeWorkflow():            status = None        else:            status = self.createCR_Status("Cancelled")        return status    def getStatusReject(self):        try:            cr_status = self.status_rejected.get()        except AttributeError:            cr_status = 1        if cr_status == 0 or self.getTypeWorkflow():            status = None        else:            status = self.createCR_Status("Rejected")        return status    def getStatusAnalysis(self):        '''        entered        [EX]CR_Entered        [X]CR_In_Analysis        '''        try:            cr_status = self.status_in_analysis.get()        except AttributeError:            cr_status = 1        if cr_status == 0:            status = None        else:            if self.getTypeWorkflow():                status = "entered"            else:                if self.getCR_Domain() == "EXCR":                    status = self.createCR_Status("Entered")                else:                    status = self.createCR_Status("In_Analysis")        return status    def getStatusComplAnalysis(self):        try:            cr_status = self.status_compl_analysis.get()        except AttributeError:            cr_status = 1        if cr_status == 0 or self.getTypeWorkflow():            status = None        else:            status = self.createCR_Status("Complementary_Analysis")        return status    def getStatusReview(self):        '''        in_review        [X]_In_Review        '''        try:            cr_status = self.status_in_review.get()        except AttributeError:            cr_status = 1        if cr_status == 0:            status = None        else:            if self.getTypeWorkflow():                status = "in_review"            else:                status = self.createCR_Status("In_Review")        return status    def getStatusModif(self):        '''        assigned        [EX]CR_In_Progress        [X]CR_Under_Modification        '''        try:            cr_status = self.status_under_modif.get()        except AttributeError:            cr_status = 1        if cr_status == 0:            status = None        else:            if self.getTypeWorkflow():                status = "assigned"            else:                if self.getCR_Domain() == "EXCR":                    status = self.createCR_Status("In_Progress")                else:                    status = self.createCR_Status("Under_Modification")        return status    def getStatusVerif(self):        try:            cr_status = self.status_under_verif.get()        except AttributeError:            cr_status = 1        if cr_status == 0 or self.getTypeWorkflow():            status = None        else:            status = self.createCR_Status("Under_Verification")        return status    def getStatusFixed(self):        """        assigned        [EX]CR_Implemented        [X]CR_Fixed        """        try:            cr_status = self.status_fixed.get()        except AttributeError:            cr_status = 1        if cr_status == 0:            status = None        else:            if self.getTypeWorkflow():                status = "resolved"            else:                if self.getCR_Domain() == "EXCR":                    status = self.createCR_Status("Implemented")                else:                    status = self.createCR_Status("Fixed")        return status    def getStatusPostpon(self):        '''        Get postponed checkbox status of the GUI according to CR workfow (Old,EXCR or [X]CR)        [EX]CR_Workaround        [X]CR_Postponed        Note this function should be in Interface class with workflow type for parameter        '''        try:            cr_status = self.status_postponed.get()        except AttributeError:            cr_status = 1        if cr_status == 0:            status = None        else:            if self.getTypeWorkflow():                status = "postponed"            else:                if self.getCR_Domain() == "EXCR":                    status = self.createCR_Status("Workaround")                else:                    status = self.createCR_Status("Postponed")        return status    # Change part    def _createConditionStatus(self,                               detect_release="",                               impl_release="",                               cr_type="",                               old_cr_workflow=False, # to be deleted                               cr_status="",                               attribute="CR_implemented_for"):        '''            Create CR status filter for Change query        '''        # Get filter attributes        #        # Default = CR_implemented_for        # Detected on        # Implemented for        # Applicable Since        if attribute is "None":            filter_cr = ""        else:            filter_cr = attribute        # Determine wether an old or new Change Request workflow is used        # Query format is modified accordingly        if self.getTypeWorkflow():            detection_word = "detected_on"            filter_cr = "implemented_in"        else:            detection_word = "CR_detected_on"            filter_cr = "CR_implemented_for"        detect_attribut = "%{:s};%{:s}".format(detection_word,filter_cr)        condition = '"(cvtype=\'problem\') '        if  Tool.isAttributeValid(impl_release):            # implemented            condition += ' and '            condition += self._createImpl(filter_cr, impl_release)            # detected            if Tool.isAttributeValid(detect_release):                condition += ' or '                condition += self._createImpl(detection_word, detect_release)        else:            # detected            if Tool.isAttributeValid(detect_release):                condition += ' and '                condition += self._createImpl(detection_word, detect_release)        # CR types        if self.list_cr_type != []:            condition += ' and '            condition += self._createImpl("CR_type", self.list_cr_type)        if 0==1:            if len(self.list_cr_doamin) <= 1:                if Tool.isAttributeValid(cr_type):                    condition += ' and '                    condition += self._createImpl("CR_type", cr_type)            else:                list_cr_type = []                tool = Tool()                cr_type = tool._getItemCRType(system=self.system,item=self.item)                list_cr_type.append(cr_type)                result = tool.getListComponents(system=self.system,item=self.item)                for name,cr_type in result:                    list_cr_type.append(cr_type)                if list_cr_type != []:                    condition += ' and '                    condition += self._createImpl("CR_type", list_cr_type)        # CR status        if self.list_cr_status != []:            condition += ' and '            condition += self._createImpl("crstatus", self.list_cr_status)        # CR domains        if self.list_cr_doamin != []:            condition += ' and '            condition += self._createImpl("CR_domain", self.list_cr_doamin)        if 0==1:            if Tool.isAttributeValid(cr_status):                # Specific CR status                condition += self._createImpl("crstatus", cr_status)  #and (crstatus=\'{:s}\') '.format(cr_status)            else:                # All selected CR status                #find_status = False                if self.list_cr_doamin == []:                    if self.cr_status != []:                        condition += ' and '                        condition += self._createImpl("crstatus", self.cr_status)                    #for status,func in self.dico_cr_status.iteritems():                    #    delta_condition, find_status = self.createCrStatus(self.cr_status[status], find_status)                    #    condition += delta_condition                else:                    # CR domain                    condition += ' and '                    condition += self._createImpl("CR_domain", self.list_cr_doamin)        condition += '" '        return condition, detect_attribut    def getStatusCheck(self):        """            This function            - select all checkbuttons for Change Request status            - build the Change query condition filtering according checkbuttons state            Attention cette fonction est deja implementee dans la fonction suivante getPR        """        self.check_button_status_in_analysis.select()        self.check_button_status_compl_analysis.select()        self.check_button_status_in_review.select()        self.check_button_status_postponed.select()        self.check_button_status_under_modif.select()        self.check_button_status_under_verif.select()        self.check_button_status_fixed.select()        self.check_button_status_closed.select()        self.check_button_status_canceled.select()        self.check_button_status_rejected.select()        self.check_button_status_all.select()        self.cr_activate_all_button()        self.checkbutton_all = True        self.cr_activate_all_button()        self.getGUICRStatus()        condition, detect_attribut = self._createConditionStatus()        return conditionclass ParametersGui():    parameter_keys = ["author",                      "reference",                      "issue",                      "part_number",                      "board_pn",                      "checksum",                      "dal",                      "previous_bas",                      "release",                      "baseline",                      "project",                      "detect",                      "implemented",                      "item",                      "component",                      "system",                      "cr_type",                      "cr_domain"]    def click_open_relbasproj(self):        if not self.click_open_relbaspro_flag_on:            print "open click_open_relbasproj window"            self.click_open_relbaspro_flag_on = True            get_review_id_window = Toplevel()            get_review_id_window.iconbitmap("ico_sys_desktop.ico")            get_review_id_window.title("Set release/baseline/project")            get_review_id_window.resizable(False,False)            get_review_id_window.grab_set()            get_review_id_window.focus_set()            page = Frame(get_review_id_window)            page.pack()            # Projects set            projects_set_frame = Frame(page)            projects_set_frame.pack(side=LEFT)            # Releases  Baselines   Projects listboxes            relbasproj_frame = Frame(projects_set_frame)            self.displayRelBasProj(relbasproj_frame,top=get_review_id_window)            relbasproj_frame.pack(anchor=W)            # Button PUSH            bottom_frame = Frame(projects_set_frame)            bottom_frame.pack()            self.button_set_project_set_list = Button(bottom_frame, text='Add', command=self.set_project_set_list,anchor=W)            self.button_set_project_set_list.pack(padx=5,side=LEFT)            explain_button_set_txt = Label(bottom_frame, text="Push current release, baseline and project in stack below")            explain_button_set_txt.pack()            cancel_button = Button(get_review_id_window,                                   text='Close',                                   command = lambda arg=get_review_id_window,flag=self.reset_click_open_relbaspro_flag_on: self.click_window_destroy(arg,flag))            cancel_button.pack(anchor=E)            get_review_id_window.protocol("WM_DELETE_WINDOW", lambda arg=get_review_id_window,flag=self.reset_click_open_relbaspro_flag_on: self.click_window_destroy(arg,flag))            get_review_id_window.mainloop()    def reset_click_open_relbaspro_flag_on(self):        self.click_open_relbaspro_flag_on = False    def reset_click_set_user_config_flag_on(self):        self.click_set_user_config_flag_on = False    def click_window_destroy(self,window,reset_flag_call_back):        window.destroy()        reset_flag_call_back()        print "Destroy window"    def click_set_user_config(self):        if not self.click_set_user_config_flag_on:            self.click_set_user_config_flag_on = True            get_review_id_window = Toplevel()            get_review_id_window.iconbitmap("ico_sys_desktop.ico")            get_review_id_window.title("Set user configuration")            get_review_id_window.resizable(False,False)            get_review_id_window.grab_set()            get_review_id_window.focus_set()            page = Frame(get_review_id_window)            page.pack()            # Configurations            true_last_pane = LabelFrame(page,text="Configuration:",bd=0)            true_last_pane.pack()            self.project_setting_listbox = ThreadSafeListbox(true_last_pane,                                                             height=10,                                                             width=30,                                                             exportselection=0)            self.project_setting_listbox.pack()            self.project_setting_listbox.bind("<ButtonRelease-1>", self.select_project_setting)            self.project_setting_listbox.bind("<Double-Button-1>", self.config_onselect)            self.fillConfig()            self.project_setting_listbox.selection_set(first=0)            self.project_setting_listbox.pack(padx=10)            balloon_help_project_setting = Pmw.Balloon(true_last_pane)            balloon_help_project_setting.bind(self.project_setting_listbox, 'This listbox allows the user\n'                                                                            'to save and restore multiple context ')            bottom_buttons_frame = Frame(true_last_pane,height=50)            top_frame = Frame(bottom_buttons_frame)            top_frame.pack()            button_save_projects = Button(top_frame,                                          text='Save',                                          state=NORMAL,                                          command=self.save_parameters,                                          width=10)            button_save_projects.pack(side=LEFT,pady=20)            button_restore_projects = Button(top_frame,                                             text='Restore',                                             state=NORMAL,                                             command = lambda arg=get_review_id_window,flag=self.reset_click_set_user_config_flag_on: self.restore_parameters(arg,flag),                                             width=10)            button_restore_projects.pack(side=LEFT,pady=20)            bottom_buttons_frame.pack(ipadx=10,side=LEFT)            cancel_button = Button(get_review_id_window,                                   text='Close',                                   command = lambda arg=get_review_id_window,flag=self.reset_click_set_user_config_flag_on: self.click_window_destroy(arg,flag))            cancel_button.pack(anchor=E)            get_review_id_window.protocol("WM_DELETE_WINDOW", lambda arg=get_review_id_window,flag=self.reset_click_set_user_config_flag_on: self.click_window_destroy(arg,flag))            get_review_id_window.mainloop()    def populateReleaseBox(self,buffer):        if len(buffer) > 1:            self.releaselistbox.write("All")        for line in buffer:            line = re.sub(r"^ *[0-9]{1,3}\) ",r"",line)            if line !="":                self.releaselistbox.write(line)                self.log("   " + line)        self.releaselistbox.begin()        self.releaselistbox.white()        # Authorize button clicking        self.setStateButtons(NORMAL)    def setStateButtons(self,button_state):        self.button_list_items.configure(state=button_state)        self.button_list_tasks.configure(state=button_state)        self.button_list_history.configure(state=button_state)        self.baselinelistbox.configure(state=button_state)        self.button_find_projects.configure(state=button_state)        self.button_set_project_set_list.configure(state=button_state)    def displayRelBasProj(self, frame,top=None):        if self.getStandard():            size_list_box = 28            change_frame = LabelFrame(frame, text="From doCID database (.csv file)")            change_frame.pack(side=LEFT)            balloon_help_standard = Pmw.Balloon(frame)            balloon_help_standard.bind(change_frame, 'The file CSV defined in docid.ini\n'                                                     'in [Standard] section makes the link\n'                                                     'between standards,\n'                                                     'board part number\n'                                                     'and Synergy release\n'                                                     'Ex: \n'                                                     'Standard 0,STD,EPDS,S0\n'                                                     '955CE05Y00,PN,ATUPU,S0,Standard 1\n'                                                     'ECEABA3380101,SW,ENMU,S0\n'                                                     'SW_ENM/02,RL,ENM,ECEABA3380101')            spare_frame = Frame(frame, width=30)            spare_frame.pack(side=LEFT)        else:            size_list_box = 38        rel_bas_proj_frame = Frame(frame)        rel_bas_proj_frame.pack(anchor=W)        bottom_frame = Frame(frame)        bottom_frame.pack(anchor=W)        # Project listbox        project_frame = Frame(rel_bas_proj_frame)        checkbutton_project_frame = Frame(project_frame)        self.project_txt = Label(checkbutton_project_frame,                                 text="Project:",                                 anchor=W,                                 padx=2,width=40)        self.project_txt.pack(side=LEFT)        checkbutton_project_frame.pack()        # Create the Balloon.        balloon_help_project = Pmw.Balloon(frame)        balloon_help_project.bind(self.project_txt, 'A Synergy project is a user-defined\ngroup of related files, \ndirectories, and other projects')        sub_project_frame = Frame(project_frame)        sub_project_frame.pack()        self.projectlistbox = ThreadSafeListbox(sub_project_frame,                                                height=6,                                                width=size_list_box,                                                exportselection=0,                                                #state=DISABLED,                                                bg="gray")        self.projectlistbox.insert(END, "All")        self.vbar_4 = vbar_4 = Scrollbar(sub_project_frame, name="vbar_4")        self.vbar_4.pack(side=RIGHT, fill=Y)        vbar_4["command"] = self.projectlistbox.yview        self.projectlistbox["yscrollcommand"] = vbar_4.set        self.projectlistbox.bind("<ButtonRelease-1>", self.select_project)        self.projectlistbox.bind("<Key-Up>", lambda event, arg=self.projectlistbox: self.up_event(event, arg))        self.projectlistbox.bind("<Key-Down>", lambda event, arg=self.projectlistbox: self.down_event(event, arg))        buttons_project_frame = Frame(project_frame)        buttons_project_frame.pack()        self.button_find_projects = Button(buttons_project_frame,                                           text='Update',                                           #state=DISABLED,                                           command=self._find_projects)        self.button_clear_project = Button(buttons_project_frame,                                           text='Unselect',                                           #state=DISABLED,                                           command=self.clear_project)        self.projectlistbox.pack(anchor=W)        self.button_find_projects.pack(side=RIGHT)        self.button_clear_project.pack(side=RIGHT)        project_frame.pack(side=RIGHT)        # Baseline listbox        baseline_frame = Frame(rel_bas_proj_frame)        checkbutton_baseline_synergy_frame = Frame(baseline_frame)        self.baseline_synergy_txt = Label(checkbutton_baseline_synergy_frame, text="Baseline:",anchor=W, padx=2,width=40)        self.baseline_synergy_txt.pack(side=LEFT)        checkbutton_baseline_synergy_frame.pack()        #self.baseline_synergy_txt = LabelFrame(rel_bas_proj_frame, text="Baseline:", bd=0)        #self.baseline_synergy_txt.pack(side=RIGHT, ipadx=5, ipady=5)        balloon_help_baseline = Pmw.Balloon(frame)        balloon_help_baseline.bind(self.baseline_synergy_txt, 'A baseline is an object (of type baseline)\n'                                                                'in the Synergy database which is\n'                                                                'related to various objects including tasks,\n'                                                                'project hierarchies etc. which together represent\n'                                                                'a milestone in your development cycle.')        sub_baseline_frame = Frame(baseline_frame)        sub_baseline_frame.pack()        self.baselinelistbox = ThreadSafeListbox(sub_baseline_frame,                                                 height=6,                                                 width=size_list_box,                                                 exportselection=0,                                                 #state=DISABLED,                                                 bg="gray")        self.baselinelistbox.insert(END, "All")        self.vbar_5 = vbar_5 = Scrollbar(sub_baseline_frame, name="vbar_5")        self.vbar_5.pack(side=RIGHT, fill=Y)        vbar_5["command"] = self.baselinelistbox.yview        self.baselinelistbox["yscrollcommand"] = vbar_5.set        self.baselinelistbox.bind("<ButtonRelease-1>", self.select_baseline)        self.baselinelistbox.bind("<Key-Up>", lambda event, arg=self.baselinelistbox: self.up_event(event, arg))        self.baselinelistbox.bind("<Key-Down>", lambda event, arg=self.baselinelistbox: self.down_event(event, arg))        buttons_baseline_synergy_frame = Frame(baseline_frame)        buttons_baseline_synergy_frame.pack()        self.button_find_baselines = Button(buttons_baseline_synergy_frame,                                            text='Update',                                            #state=DISABLED,                                            command=self.find_baselines)        self.button_clear_baseline = Button(buttons_baseline_synergy_frame,                                            text='Unselect',                                            #state=DISABLED,                                            command=self.clear_baselines)        self.button_get_baseline_status = Button(buttons_baseline_synergy_frame,                                                 text='Get status',                                                 #state=DISABLED,                                                 command=self.click_get_baseline_status)        self.baselinelistbox.pack(anchor=W)        self.button_find_baselines.pack(side=RIGHT)        self.button_clear_baseline.pack(side=RIGHT)        self.button_get_baseline_status.pack(side=RIGHT)        baseline_frame.pack(side=RIGHT)        # Release listbox        relaase_frame = Frame(rel_bas_proj_frame)        checkbutton_release_frame = Frame(relaase_frame)        baseline_txt = Label(checkbutton_release_frame, text="Release:",anchor=W, padx=2,width=30)        baseline_txt.pack(side=LEFT)        software_release_only_var = IntVar(top)        check_release_sw_only = Checkbutton(checkbutton_release_frame,                                                text="SW only",                                                variable=software_release_only_var,                                                fg=foreground)                                                #command=self.cb_software_release_only)        check_release_sw_only.software_release_only_var = software_release_only_var        check_release_sw_only.pack()        check_release_sw_only.configure(command = lambda arg=check_release_sw_only.software_release_only_var: self.cb_software_release_only(arg))        if self.filterSWRelease():            check_release_sw_only.select()        checkbutton_release_frame.pack()        balloon_help_release = Pmw.Balloon(frame)        balloon_help_release.bind(baseline_txt, 'A Synergy release enables you to mark projects,\n'                                                     'tasks, and folders for particular releases.\n'                                                     'It also helps you to keep track of which object\n'                                                     'versions were developed for each release.')        sub_release_frame = Frame(relaase_frame)        sub_release_frame.pack()        self.releaselistbox = ThreadSafeListbox(sub_release_frame,                                                height=6,                                                width=size_list_box,                                                exportselection=0,                                                bg="gray")        self.vbar_3 = vbar_3 = Scrollbar(sub_release_frame, name="vbar_3")        self.vbar_3.pack(side=RIGHT, fill=Y)        vbar_3["command"] = self.releaselistbox.yview        self.releaselistbox["yscrollcommand"] = vbar_3.set        self.releaselistbox.bind("<ButtonRelease-1>", self.select_release)        self.releaselistbox.bind("<Key-Up>", lambda event, arg=self.releaselistbox: self.up_event(event, arg))        self.releaselistbox.bind("<Key-Down>", lambda event, arg=self.releaselistbox: self.down_event(event, arg))        self.releaselistbox.pack(anchor=W)        buttons_release_frame = Frame(relaase_frame)        buttons_release_frame.pack()        self.button_find_releases = Button(buttons_release_frame,                                           text='Update',                                           #state=DISABLED,                                           command=self.find_releases)        active_release_var = IntVar(top)        check_release_active = Checkbutton(buttons_release_frame,                                                text="Active",                                                variable=active_release_var,                                                fg=foreground)                                                #command=self.cb_active_release)        check_release_active.active_release_var = active_release_var        check_release_active.configure(command = lambda arg=check_release_active.active_release_var: self.cb_active_release(arg))        self.button_clear_release = Button(buttons_release_frame,                                           text='Unselect',                                           #state=DISABLED,                                           command=self.clear_release)        self.button_get_release_status = Button(buttons_release_frame,                                                 text='Get status',                                                 #state=DISABLED,                                                 command=self.click_get_release_status)        self.button_find_releases.pack(side=RIGHT)        self.button_clear_release.pack(side=RIGHT)        self.button_get_release_status.pack(side=RIGHT)        check_release_active.pack(side=RIGHT)        relaase_frame.pack()        self.display_release()        if self.getStandard():            #            # Part number            #            pn_frame = LabelFrame(change_frame, text="Part Number", bd=0)            pn_frame.pack(side=RIGHT, ipadx=5, ipady=5)            sub_pn_frame = Frame(pn_frame)            sub_pn_frame.pack()            self.pnlistbox = ThreadSafeListbox(sub_pn_frame, height=6, width=size_list_box, exportselection=0, bg="gray")            self.vbar_pn = vbar_pn = Scrollbar(sub_pn_frame, name="vbar_pn")            self.vbar_pn.pack(side=RIGHT, fill=Y)            vbar_pn["command"] = self.pnlistbox.yview            self.pnlistbox["yscrollcommand"] = vbar_pn.set            self.pnlistbox.bind("<ButtonRelease-1>", self.select_partnumber)            self.pnlistbox.bind("<Key-Up>", lambda event, arg=self.pnlistbox: self.up_event(event, arg))            self.pnlistbox.bind("<Key-Down>", lambda event, arg=self.pnlistbox: self.down_event(event, arg))            self.pnlistbox.pack()            self.display_partnumber()            #            # Standard            #            standard_frame = LabelFrame(change_frame, text="Standard", bd=0)            standard_frame.pack(side=RIGHT, ipadx=5, ipady=5)            sub_standard_frame = Frame(standard_frame)            sub_standard_frame.pack()            self.stdlistbox = ThreadSafeListbox(sub_standard_frame, height=6, width=size_list_box, exportselection=0, bg="gray")            self.vbar_std = vbar_std = Scrollbar(sub_standard_frame, name="vbar_std")            self.vbar_std.pack(side=RIGHT, fill=Y)            vbar_std["command"] = self.stdlistbox.yview            self.stdlistbox["yscrollcommand"] = vbar_std.set            self.stdlistbox.bind("<ButtonRelease-1>", self.select_standard)            self.stdlistbox.bind("<Key-Up>", lambda event, arg=self.stdlistbox: self.up_event(event, arg))            self.stdlistbox.bind("<Key-Down>", lambda event, arg=self.stdlistbox: self.down_event(event, arg))            self.stdlistbox.pack()            self.display_standard()    def click_clean_parameters(self):        self.previous_release_entry.delete(0, END)        self.impl_release_entry.delete(0, END)        #self.cr_type_entry.delete(0, END)        self.previous_release = ""        self.impl_release = ""        self.cr_type = ""        self.defill()        self.author = ""        self.author_entry.delete(0, END)        self.reference = ""        self.reference_entry.delete(0, END)        self.revision = ""        self.revision_entry.delete(0, END)        self.part_number = ""        self.part_number_entry.delete(0, END)        self.board_part_number = ""        self.board_part_number_entry.delete(0, END)        self.checksum = ""        self.checksum_entry.delete(0, END)        self.dal = ""        self.dal_entry.delete(0, END)        self.previous_baseline = ""        self.previous_baseline_entry.delete(0, END)        self.clear_release()        self.clear_baselines()        self.clear_project()        self._setPreviousRelease()        self._setImplRelease()        self._setCRType()    def build_parameters_folder(self, page,**kwarg):        """        ----------------------------------------------------------------------------------------------------------------------------------        |left_pane (Author ...) | middle pane (Previous baseline ...) | last pane (System ...)  | righ_pane (Board items...)             |        |                       |                                     |                         | componentslistbox_frame (Software ...) |        |bottom_buttons_frame   |                                     |                         |                                        |        ----------------------------------------------------------------------------------------------------------------------------------        |projects_set_frame                                                     |                   true_last_pane        |   rel_bas_proj_frame        |   bottom_frame        |   overall_frame        |       projects_frame        |           set_projects_frame        |       matrix_frame        ----------------------------------------------------------------------------------------------------------------------------------        :param page:        :return:        """        #global item_id        main_frame = Frame(page)        main_frame.pack(anchor=W)        #        # Left pane        #        left_pane = Frame(main_frame)        left_pane.pack(side=LEFT,anchor=N,padx=5,pady=5)        row_index = 1        # Author        self.author_entry = self.createEntry(left_pane,'Author:',self.author)        # Reference        self.reference_entry = self.createEntry(left_pane,'Reference:',self.reference)        # Issue        self.revision_entry = self.createEntry(left_pane,'Issue:',self.revision)        # Part number        self.part_number_entry = self.createEntry(left_pane,'Part Number:',self.part_number)        # Board Part number        self.board_part_number_entry = self.createEntry(left_pane,'Board P/N:',self.board_part_number)        # Checksum        self.checksum_entry = self.createEntry(left_pane,'Checksum:',self.checksum)        # DAL        self.dal_entry = self.createEntry(left_pane,'DAL:',self.dal)        # Regexp to filter releases        #self.regexp_entry = self.createEntry(left_pane,'Regular expression:\nex: ^SW_(.*)/(.*)$',self.release_regexp)        self.regexp_entry = self.createEntry(left_pane,'',self.release_regexp)        self.regexp_entry.pack_forget()        #balloon_help_regexp = Pmw.Balloon(left_pane)        #balloon_help_regexp.bind(self.regexp_entry, 'Regular expression is used\n'        #                                             'to filter release\n when clicking\n'        #                                             'on "Update" button related\n'        #                                             'to Release listbox')        #explain_regexp_txt = Label(left_pane, text="to filter release list below", fg=foreground, width=20, anchor=W, padx=2)        #explain_regexp_txt.pack(side=LEFT)        #        # Middle pane        #        middle_pane = Frame(main_frame)        middle_pane.pack(side=LEFT,anchor=N)        # Previous baseline        self.previous_baseline_entry = self.createEntry(middle_pane,'Previous Baseline:',self.previous_baseline)        # Synergy built-in keyword        synergy_keywords_frame = LabelFrame(middle_pane, text="Synergy built-in keywords",width=60)        synergy_keywords_frame.pack(ipady=2,ipadx=5)        # Release        self.release_entry = self.createEntry(synergy_keywords_frame,'Release:',self.release,bg="gray")        # Baseline        self.baseline_entry = self.createEntry(synergy_keywords_frame,'Baseline:',self.baseline,bg="gray")        # Project        self.project_entry = self.createEntry(synergy_keywords_frame,'Project:',self.project,bg="gray")        self.release_entry.configure(state='readonly')        self.baseline_entry.configure(state='readonly')        self.project_entry.configure(state='readonly')        self.button_synergy_keyset = Button(synergy_keywords_frame,                                       text='Set',                                       command=self.click_open_relbasproj,                                       state=DISABLED,                                       width=10)        self.button_synergy_keyset.pack(anchor=E,side=LEFT)        balloon_help_set = Pmw.Balloon(synergy_keywords_frame)        balloon_help_set.bind(self.button_synergy_keyset, 'Click to set Synergy release(s), baseline(s) or project(s)')        button_synergy_addset = Button(synergy_keywords_frame,                                       text='Add',                                       command=self.set_project_set_list,                                       width=10)        button_synergy_addset.pack(anchor=E)        balloon_help_add = Pmw.Balloon(synergy_keywords_frame)        balloon_help_add.bind(button_synergy_addset, 'Click to add a set of Synergy release(s), baseline(s) or project(s)\n in stack (Not displayed if empty)')        # Change built-in keyword        change_keywords_frame = LabelFrame(middle_pane, text="Change Requests attributes")        change_keywords_frame.pack(ipady=2,ipadx=5)        # Previous release        self.previous_release_entry = self.createEntry(change_keywords_frame,'Detected on release:',self.previous_release)        self.previous_release_entry.bind("<Return>", self._setPreviousRelease)        # Implemented for release        self.impl_release_entry = self.createEntry(change_keywords_frame,'Implemented for release:',self.impl_release)        self.impl_release_entry.bind("<Return>", self._setImplRelease)        # CR type        self.cr_type_entry = self.createEntry(change_keywords_frame,'CR type:',self.cr_type)        self.cr_type_entry.bind("<Return>", self._setCRType)        self.updateCR_Type(self.system,self.item)        self.cr_type_entry.configure(state='readonly')        #        # Right        #        # Image        last_pane = Frame(main_frame)        last_pane.pack(side=LEFT,anchor=N)        self.project_description = Label(last_pane, text='System:' + self.system, fg=foreground)        self.project_description.pack(anchor=W)        img_pane = Frame(last_pane, width=60)        can = Canvas(img_pane, width=240, height=146, highlightthickness=0)        # Display aircraft image        if self.aircraft not in ("", None, "None"):            aircraft_img = self.get_image(self.aircraft)            try:                bitmap = PhotoImage(file="img/" + aircraft_img)            except TclError as exception:                print "TCL error:", exception                bitmap = PhotoImage(file="img/earhart12_240x116.gif")        else:            bitmap = PhotoImage(file='img/earhart12_240x116.gif')        try:            can.create_image(120, 68, image=bitmap)            can.bitmap = bitmap            can.pack()        except TclError as exception:            print "TCL error:", exception        img_pane.pack()        righ_pane = Frame(last_pane)        righ_pane.pack()        row_index = 1        #        # Description of the selected project        # Items        items_txt = Label(righ_pane,                          text='LRU items:',                          fg=foreground,                          width=40,                          anchor=W,                          padx=0,                          justify=CENTER)        items_txt.pack()        itemslistbox_frame = Frame(righ_pane)        itemslistbox_frame.pack()        self.itemslistbox, self.vbar_items = self.createListbox(itemslistbox_frame,                                                                self.select_item,                                                                self.up_event,                                                                self.down_event,                                                                self.item_id)        # Components        components_txt = Label(righ_pane,                               text='Software or PLD or PCB components:',                               fg=foreground,                               width=40,                               anchor=W,                               padx=0,                               justify=CENTER)        components_txt.pack()        componentslistbox_frame = Frame(righ_pane)        componentslistbox_frame.pack()        self.componentslistbox, self.vbar_components = self.createListbox(componentslistbox_frame,                                                                          self.select_component,                                                                          self.up_event,                                                                          self.down_event,                                                                          self.item_id)        # Populate items list box        self.itemslistbox.insert(END, "None")        self.item = self.populate_specific_listbox(self.itemslistbox,                                                   self.item_id,                                                   self.system)        # Populate components list box        self.componentslistbox.insert(END, "None")        self.populate_components_listbox(self.componentslistbox, (),                                         self.item,                                         self.system)        bottom_buttons_frame = Frame(left_pane,height=50)        bottom_buttons_frame.pack(ipadx=10,side=LEFT)        top_frame = Frame(bottom_buttons_frame)        top_frame.pack()        button_clear_parameters = Button(top_frame, text='Clear', state=NORMAL, command=self.click_clean_parameters, width=10)        button_clear_parameters.pack(side=LEFT,pady=20)        self.overall_frame = LabelFrame(page,bd=0, text='Releases/Baselines/Projects stack:')        self.overall_frame.pack(anchor=W)        project_setting_frame = Frame(self.overall_frame)        project_setting_frame.pack(side=LEFT, anchor=N)        projects_frame = Frame(self.overall_frame)        projects_frame.pack(side=LEFT)        set_projects_frame = Label(projects_frame)        row_index = 1        set_projects_frame.pack(side=LEFT)        baseline_set_frame = Frame(set_projects_frame)        baseline_set_frame.pack()        self.vbar_baseline_set = vbar_baseline_set = Scrollbar(baseline_set_frame, name="vbar_baseline_set")        self.vbar_baseline_set.pack(side=RIGHT, fill=Y)        self.baseline_set_box = ThreadSafeListbox(baseline_set_frame,                                                  height=8,                                                  width=30,                                                  exportselection=0,                                                  yscrollcommand=vbar_baseline_set.set)        self.baseline_set_box.pack()        vbar_baseline_set["command"] = self.baseline_set_box.yview        self.baseline_set_box.bind("<ButtonRelease-1>", self.select_project_to_delete)        row_index += 1        button_clear_projects = Button(set_projects_frame,                                            text='Clear stack',                                            state=NORMAL,                                            command=self.clear_project_set)        button_clear_projects.pack(side=LEFT)        button_del_project = Button(set_projects_frame,                                         text='Delete line',                                         state=NORMAL,                                         command=self.del_project)        button_del_project.pack()        balloon_help_projects_set = Pmw.Balloon(set_projects_frame)        balloon_help_projects_set.bind(self.overall_frame, 'This listbox displays releases,baselines and projects selected for\n'                                                                'CID and reviews report generation by the "Push" button above.')        matrix_frame = Frame(self.overall_frame, padx=10)        matrix_frame.pack(side=LEFT)        data = {"colnames": {"Release": "", "Baseline": "", "Project": ""}}        model = TableModel()        #import after model created        model.importDict(data)        self.table_project = Project(matrix_frame,                                     model=model,                                     cellwidth=150,                                     width=450,                                     height=120,                                     cellbackgr='#E3F6CE',                                     thefont=('Arial', 8),                                     rowheight=16,                                     editable=False,                                     rowheaderwidth=0,                                     rowselectedcolor='white',                                     reverseorder=1)        self.table_project.createTableFrame()        self.overall_frame.pack_forget() #lower(main_frame)    def config_onselect(self, event):        # Note here that Tkinter passes an event object to onselect()        configuration_index = self.project_setting_listbox.curselection()[0]        if configuration_index != ():            txt = self.project_setting_listbox.get(configuration_index)            print "Configuration:",txt            conf_id = int(configuration_index[0]) + 1            conf_text = Tool.getConfigList(id=conf_id)            result = tkSimpleDialog.askstring("Customize configuration name",                                              "Label",                                              initialvalue=conf_text)            if result:                Tool.setConfig(id=conf_id,txt=result)                new_conf_text = Tool.getConfigList(id=conf_id)                self.fillConfig()    def fillConfig(self):        config_list = Tool.getConfigList()        self.project_setting_listbox.delete(0,END)        for id,config_name in config_list:            self.project_setting_listbox.insert(END, "{:s}".format(config_name))    @staticmethod    def createListbox(listbox_frame,                      select,                      up_event,                      down_event,                      item_id_tuple=(),                      width=30,                      height=3):        """        Create a Listbox        :param listbox_frame: Frame containing the listbox        :param select: callback when an item is selected        :param item_id_tuple: set item        :return: return listbox object with scrollbar        """        vbar = vbar_components = Scrollbar(listbox_frame, name="vbar_components")        vbar.pack(side=RIGHT, fill=Y)        componentslistbox = ThreadSafeListbox(listbox_frame,                                    height=height,                                    width=width,                                    exportselection=0,                                    yscrollcommand=vbar_components.set)        if item_id_tuple != ():            item_id = item_id_tuple[0]            print "createItemsListbox", item_id            componentslistbox.select_set(item_id)        componentslistbox.pack()        vbar_components["command"] = componentslistbox.yview        componentslistbox.bind("<ButtonRelease-1>", select)        componentslistbox.bind("<Key-Up>", lambda event, arg=componentslistbox: up_event(event, arg))        componentslistbox.bind("<Key-Down>", lambda event, arg=componentslistbox: down_event(event, arg))        return componentslistbox, vbar    def _setCRType(self, event=""):        """        Set implemented for parameter for change request query        """        self.cr_type = self.cr_type_entry.get()        if self.cr_type == "":            text = "All CR types "        else:            text = "CR type selected: " + self.cr_type        self.log(text, False)        self.defill()    def _setImplRelease(self, event=""):        """        Set implemented for parameter for change request query        """        self.impl_release = self.impl_release_entry.get()        #self.target_release_entry.delete(END)        #self.target_release_entry.insert(END,self.impl_release)        text = "Filter Change requests implemented in "        if self.impl_release == "":            text += "all releases "        else:            text += "release " + self._splitComma(self.impl_release)        # self.impl_cr.configure(text=text)        self.log(text)        self.defill()    def save_parameters(self, parameter={}):        self.save_projects()        if parameter != {}:            author = parameter.get("author")            reference = parameter.get("reference")            issue = parameter.get("issue")            part_number = parameter.get("part_number")            board_pn = parameter.get("board_pn")            checksum = parameter.get("checksum")            dal = parameter.get("dal")            previous_bas = parameter.get("previous_bas")            release = parameter.get("release")            baseline = parameter.get("baseline")            project = parameter.get("project")            detect = parameter.get("detect")            implemented = parameter.get("implemented")            item = parameter.get("item")            component = parameter.get("component")            cr_domain = parameter.get("domain")        else:            author = self.author_entry.get()            reference = self.reference_entry.get()            issue = self.revision_entry.get()            part_number = self.part_number_entry.get()            board_pn = self.board_part_number_entry.get()            checksum = self.checksum_entry.get()            dal = self.dal_entry.get()            previous_bas = self.previous_baseline_entry.get()            release = self.release_entry.get()            baseline = self.baseline_entry.get()            project = self.project_entry.get()            detect = self.previous_release_entry.get()            implemented = self.impl_release_entry.get()            item = self.item            component = self.component            system = self.system            cr_type = self.cr_type_entry.get()            cr_domain = self.getCCBType()            regexp = self.regexp_entry.get()        config_id = self.config_selected_id        data = [author, reference, issue, part_number, board_pn, checksum, dal, previous_bas, release, baseline, project,             detect, implemented, item, component, system, cr_type, cr_domain]        dico = self.getParameters()        self.sqlite_save_parameters(data,dico,config_id)        self.log("Set of parameters saved in SQLite database ")    def updateField(self,entry, dico, key):        """        :param entry:        :param dico:        :param key:        :return:        """        entry.delete(0, END)        if key in dico:            value = dico[key]            entry.insert(END, value)        else:            value = ""        return value    def set_mirror_parameters(self,                              detect,                              implemented,                              cr_type):        dico = {}        dico["detect"] = detect        dico["implemented"] = implemented        dico["cr_type"] = cr_type        #print "SET MIRROR IMPLEMENTED",dico["implemented"]        self.mirror_previous_release_entry.configure(state='normal')        self.mirror_impl_release_entry.configure(state='normal')        self.mirror_cr_type_entry.configure(state='normal')        self.updateField(self.mirror_previous_release_entry, dico, "detect")        self.updateField(self.mirror_impl_release_entry, dico, "implemented")        self.updateField(self.mirror_cr_type_entry, dico, "cr_type")        self.mirror_previous_release_entry.configure(state='readonly')        self.mirror_impl_release_entry.configure(state='readonly')        self.mirror_cr_type_entry.configure(state='readonly')    def click_set_parameters(self):        """        :return:        """        self._setPreviousRelease()        self._setImplRelease()        self._setCRType()        self.author = self.author_entry.get()        self.reference = self.reference_entry.get()        self.revision = self.revision_entry.get()        self.part_number = self.part_number_entry.get()        self.board_part_number = self.board_part_number_entry.get()        self.checksum = self.checksum_entry.get()        self.dal = self.dal_entry.get()        self.previous_baseline = self.previous_baseline_entry.get()        #detect = self.previous_release_entry.get()        #implemented = self.impl_release_entry.get()        #cr_type = self.cr_type_entry.get()        #self.set_mirror_parameters(detect,implemented,cr_type)        self.release_regexp = self.regexp_entry.get()    def getParameters(self):        """        Get UI information        Caution: Use get method from TKinter        :return: dictionary        """        author = self.author_entry.get()        if author == "":            author,mail,tel,service,qams_user_id = self.get_user_infos(self.login)        reference = self.reference_entry.get()        issue = self.revision_entry.get()        print "part_number", self.part_number        part_number = self.part_number_entry.get()        print "part_number", part_number        board_pn = self.board_part_number_entry.get()        checksum = self.checksum_entry.get()        dal = self.dal_entry.get()        previous_bas = self.previous_baseline_entry.get()        release = self.release_entry.get()        if release == "":            release = "None"        baseline = self.baseline_entry.get()        if baseline == "":            baseline = "None"        project = self.project_entry.get()        detect = self.previous_release_entry.get()        implemented = self.impl_release_entry.get()        item = self.item        print "getParameters ITEM",item        component = self.component        system = self.system        cr_type = self.cr_type_entry.get()        cr_domain = self.getCR_Domain()        regexp = self.regexp_entry.get()        values = [author, reference, issue, part_number, board_pn, checksum, dal, previous_bas, release, baseline,                  project, detect, implemented, item, component, system, cr_type,cr_domain]        print "Values in getParameters", values        dico = dict(zip(self.parameter_keys, values))        return dico    def resfreshParameters(self, dico,update_relbasproj=True):        def convert_values(x):            """            :param x:            :return:            """            y = "{:s}".format(x)            return y        def setSelection(listbox,                         item):            """            :param listbox:            :param item_selected:            :return:            """            listbox.selection_clear(0, END)            list_items_unicode = listbox.get(0, END)            list_items = map(convert_values, list_items_unicode)            if item in list_items:                num = list_items.index(item)                listbox.selection_set(first=num)        self.updateField(self.author_entry, dico, "author")        self.updateField(self.reference_entry, dico, "reference")        self.updateField(self.revision_entry, dico, "issue")        self.updateField(self.part_number_entry, dico, "part_number")        self.updateField(self.board_part_number_entry, dico, "board_pn")        self.updateField(self.checksum_entry, dico, "checksum")        self.updateField(self.dal_entry, dico, "dal")        self.updateField(self.previous_baseline_entry, dico, "previous_bas")        self.release_entry.configure(state='normal')        release = self.updateField(self.release_entry, dico, "release")        self.release_entry.configure(state='readonly')        self.baseline_entry.configure(state='normal')        baseline = self.updateField(self.baseline_entry, dico, "baseline")        self.baseline_entry.configure(state='readonly')        self.project_entry.configure(state='normal')        project = self.updateField(self.project_entry, dico, "project")        self.project_entry.configure(state='readonly')        #if update_relbasproj:        self.setBaseline(release)        self.setBaselineSynergy(baseline)        self.setProject(project)        detect = self.updateField(self.previous_release_entry, dico, "detect")        implemented = self.updateField(self.impl_release_entry, dico, "implemented")        # CR type        self.cr_type_entry.configure(state='normal')        cr_type = self.updateField(self.cr_type_entry, dico, "cr_type")        self.cr_type_entry.configure(state='readonly')        self.cr_type = cr_type        # set Domain of CR ex: SCR, SACR etc.        self.forceCCBType(dico["cr_domain"])        # set CID type        cid_type,hcmr_type = self.computeCIDType(dico["cr_domain"])        self.setCIDType(cid_type,                        hcmr_type)        if "system" in dico:            self.system = dico["system"]            self.project_description.configure(text="System: {:s}".format(dico["system"]))            # Populate items list box            self.itemslistbox.delete(0,END)            self.itemslistbox.insert(END, "None")            self.populate_specific_listbox(self.itemslistbox,                                           self.item_id,                                           self.system)            # Populate components list box            self.componentslistbox.delete(0,END)            self.componentslistbox.insert(END, "None")            self.populate_components_listbox(self.componentslistbox, (),                                             self.item,                                             self.system)        if "item" in dico:            self.item = dico["item"]            setSelection(self.itemslistbox,                         self.item)            # Populate components list box            self.componentslistbox.delete(0,END)            self.componentslistbox.insert(END, "None")            self.populate_components_listbox(self.componentslistbox, (),                                             self.item,                                             self.system)        if "component" in dico:            self.component = dico["component"]            setSelection(self.componentslistbox,                         self.component)        self.getGUICRType(self.system,                          self.item)        self.button_select.configure(state=NORMAL)    def restore_parameters(self,window,reset_flag_call_back):        self.restore_projects()        values = self.sqlite_restore_parameters(self.config_selected_id)        if values:            values = values + ("",) #.extend("")            #print "restore_parameters", values            #print "KEYS", self.parameter_keys            dico = dict(zip(self.parameter_keys, values))            if "system" in dico:                system = dico["system"]            else:                system = ""            if system == self.system:                print "get,current",system,self.system                #print dico                self.resfreshParameters(dico,update_relbasproj=False)                self.log("Set of parameters restored from SQLite database ")            else:                tkMessageBox.showinfo("Error","Configuration selected is not compatible with current project {:s}.\n Please logout and select {:s} project.".format(self.system,system))        else:            self.log("Set of parameters restoration failed from SQLite database ")        self.click_window_destroy(window,reset_flag_call_back)class CustomText(Text):    '''A text widget with a new method, HighlightPattern    example:    text = CustomText()    text.tag_configure("red",foreground="#ff0000")    text.HighlightPattern("this should be red", "red")    The highlight_pattern method is a simplified python    version of the tcl code at http://wiki.tcl.tk/3246    '''    enabled = True    def __init__(self, *args, **kwargs):        Text.__init__(self, *args, **kwargs)    def HighlightPattern(self, pattern, tag, start="1.0", end="end", regexp=False):        '''Apply the given tag to all text that matches the given pattern        If 'regexp' is set to True, pattern will be treated as a regular expression        '''        start = self.index(start)        end = self.index(end)        self.mark_set("matchStart",start)        self.mark_set("matchEnd",start)        self.mark_set("searchLimit", end)        count = IntVar()        counter = 0        while True and self.enabled and counter < 100:            index = self.search(pattern, "matchEnd","searchLimit",                                count=count, regexp=regexp)            if index == "": break            self.mark_set("matchStart", index)            count_get = count.get()            self.mark_set("matchEnd", "%s+%sc" % (index,count_get))            #print "INDEX:",index,count_get            self.tag_add(tag, "matchStart","matchEnd")            counter += 1class Baseline():    def updateBaselineListboxInProgress(self):        self.baselinelistbox.configure(state=NORMAL)        self.baselinelistbox.delete(0, END)        self.baselinelistbox_1.delete(0, END)        self.baselinelistbox_2.delete(0, END)        self.baselinelistbox.configure(bg="white")        self.baselinelistbox.insert(END, "Looking for baselines ...")    def find_baselines(self):        self.success.config(fg='red',bg = 'yellow',text="SYNERGY GET BASELINES COMMAND IN PROGRESS")        self.updateBaselineListboxInProgress()        self.log("Get available baselines ...")        self.queue.put("GET_BASELINES")  # action to get baselines        self.queue.put(self.release)        self.baseline = "All"        self.click_clear()    def setBaselineSynergy(self, baseline_synergy):        '''         set CM Synergy baseline        '''        self.baseline = baseline_synergy        self.log("Selected baseline: " + self.baseline)        # in build_checklist folder        self.baseline_entry.configure(state='normal')        self.baseline_entry.delete(0, END)        self.baseline_entry.insert(END, baseline_synergy)        self.baseline_entry.configure(state='readonly')        self.list_items_explain.configure(            text="Export items listing linked to a baseline " + baseline_synergy + " (directories and executable objects are discarded)")        self.list_tasks_explain.configure(            text="Export tasks listing linked to a baseline " + baseline_synergy + " (automatic tasks and components tasks are discarded)")        self.list_history_explain.configure(text="Export history listing linked to a baseline " + baseline_synergy)    def clear_baselines(self):        self.baseline = "All"        self.unsetBaselineSynergy()        #self.baselinelistbox.selection_clear(first=0, last=END)        self.list_items_explain.configure(            text="Export items listing (directories and executable objects are discarded)")        self.list_tasks_explain.configure(            text="Export tasks listing (automatic tasks and components tasks are discarded)")        self.list_history_explain.configure(text="Export history listing")        self.baseline_entry.configure(state='normal')        self.baseline_entry.delete(0, END)        self.baseline_entry.configure(state='readonly')    def select_baseline_prev(self, event):        index = self.baselinelistbox_1.curselection()        if index in (0, ()):            baseline = ""        else:            baseline = self.baselinelistbox_1.get(index)            if self.baseline_cur != "":                self.button_make_diff.configure(state=NORMAL)        self.baseline_prev = baseline    def select_baseline_cur(self, event):        index = self.baselinelistbox_2.curselection()        if index in (0, ()):            baseline = ""        else:            baseline = self.baselinelistbox_2.get(index)            self.button_show_baseline.configure(state=NORMAL)            self.setBaselineSynergy(baseline)            if self.baseline_prev != "":                self.button_make_diff.configure(state=NORMAL)        self.baseline_cur = baseline    def click_make_baseline_diff(self):        self.queue.put("MAKE_DIFF")  # order to make diff        self.queue.put([self.baseline_prev,                        self.baseline_cur])        self.click_clear()    def click_show_baseline(self):        self.queue.put("SHOW_BASELINE")  # order to make diff        self.queue.put([self.baseline_cur])        self.click_clear()    def click_list_tasks(self):        '''         Order to list tasks in the release or baseline        '''        self.queue.put("LIST_TASKS")        self.queue.put(self.release)        self.queue.put(self.baseline)        self.click_clear()    def click_list_history(self):        '''         Order to list history in the release or baseline        '''        self.queue.put("LIST_HISTORY")        self.queue.put(self.release)        self.queue.put(self.baseline)        self.queue.put(self.project)        self.click_clear()    def _check_baseline_folder(self, page, width=500, height=576, **kwargs):        #Frame.__init__(self,        #               page,        #               width=width,        #               height=height,        #               relief=GROOVE,        #              **kwargs)        #self.pack(fill=BOTH)        baseline_frame = LabelFrame(page, text='Baseline', bd=1, padx=10, pady=10)        baseline_frame.pack(fill=BOTH, expand=1, ipadx=5, ipady=5)        # Previous baseline        self.baseline_txt_1 = LabelFrame(baseline_frame, text='Previous baseline:', fg=foreground, bd=0)        self.baseline_txt_1.pack(side=LEFT);        self.baselinelistbox_1 = ThreadSafeListbox(self.baseline_txt_1, height=6, width=entry_size, exportselection=0)        self.vbar_5_1 = vbar_5_1 = Scrollbar(self.baseline_txt_1, width=16, name="vbar_5_1")        vbar_5_1["command"] = self.baselinelistbox_1.yview        self.baselinelistbox_1["yscrollcommand"] = vbar_5_1.set        self.vbar_5_1.pack(side=RIGHT, fill=Y)        self.baselinelistbox_1.bind("<ButtonRelease-1>", self.select_baseline_prev)        self.baselinelistbox_1.bind("<Key-Up>", lambda event, arg=self.baselinelistbox_1: self.up_event(event, arg))        self.baselinelistbox_1.bind("<Key-Down>", lambda event, arg=self.baselinelistbox_1: self.down_event(event, arg))        self.baselinelistbox_1.pack();        # Current baseline        self.baseline_txt_2 = LabelFrame(baseline_frame, text='Current baseline:', fg=foreground, bd=0)        self.baseline_txt_2.pack(side=LEFT);        self.baselinelistbox_2 = ThreadSafeListbox(self.baseline_txt_2, height=6, width=entry_size, exportselection=0)        self.vbar_5_2 = vbar_5_2 = Scrollbar(self.baseline_txt_2, width=16, name="vbar_5_2")        vbar_5_2["command"] = self.baselinelistbox_2.yview        self.baselinelistbox_2["yscrollcommand"] = vbar_5_2.set        self.vbar_5_2.pack(side=RIGHT, fill=Y)        self.baselinelistbox_2.bind("<ButtonRelease-1>", self.select_baseline_cur)        self.baselinelistbox_2.bind("<Key-Up>", lambda event, arg=self.baselinelistbox_2: self.up_event(event, arg))        self.baselinelistbox_2.bind("<Key-Down>", lambda event, arg=self.baselinelistbox_2: self.down_event(event, arg))        self.baselinelistbox_2.pack();        # Diff        self.button_make_diff = Button(baseline_frame, text='Diff baselines', state=DISABLED,                                       command=self.click_make_baseline_diff)        self.button_make_diff.pack(side=LEFT, fill=Y, padx=5, pady=20);        self.button_show_baseline = Button(baseline_frame, text='Show baseline', state=DISABLED,                                           command=self.click_show_baseline)        self.button_show_baseline.pack(side=LEFT, fill=Y, padx=5, pady=20);        # List items and tasks        commands_txt = LabelFrame(page, text='Miscelleanous commands:', fg=foreground, bd=0)        commands_txt.pack(side=LEFT);        button_frame = LabelFrame(commands_txt, fg=foreground, bd=0)        button_frame.pack(side=LEFT);        self.button_list_items = Button(button_frame,                                        text='List items',                                        state=NORMAL, width=18,                                        command=self.list_items)        self.button_list_items.pack(padx=5)        self.button_list_tasks = Button(button_frame,                                        text='List tasks',                                        state=NORMAL, width=18,                                        command=self.click_list_tasks)        self.button_list_tasks.pack(padx=5);        self.button_list_history = Button(button_frame,                                          text='List history',                                          state=NORMAL, width=18,                                          command=self.click_list_history)        self.button_list_history.pack(padx=5,fill=X);        self.history_scope = IntVar()        self.with_cr = IntVar()        checkbox_frame = LabelFrame(commands_txt, fg=foreground, bd=0)        checkbox_frame.pack(side=LEFT);        self.radio_scope_list_tasks = Checkbutton(checkbox_frame, text="With CR", variable=self.with_cr, fg=foreground)        self.radio_scope_list_tasks.pack(fill=X, pady=10, anchor=W)        self.radio_scope_list_tasks.config(state=NORMAL)        ##        self.radio_scope_list_tasks.select()        self.radio_scope_list_history = Checkbutton(checkbox_frame, text="Only source files",                                                    variable=self.history_scope, fg=foreground)        self.radio_scope_list_history.pack(fill=X, anchor=W)        self.radio_scope_list_history.config(state=NORMAL)        self.radio_scope_list_history.select()        explain_frame = LabelFrame(commands_txt, fg=foreground, bd=0)        explain_frame.pack(fill=X);        self.list_items_explain = Label(explain_frame,                                        text="Export items listing linked to a release or a baseline (directories and executable objects are discarded)",                                        fg=foreground, width=80, anchor=W, padx=50, pady=4)        self.list_items_explain.pack(fill=X)        self.list_tasks_explain = Label(explain_frame,                                        text="Export tasks listing linked to a release or a baseline (automatic tasks and components tasks are discarded)",                                        fg=foreground, width=80, anchor=W, padx=50, pady=4)        self.list_tasks_explain.pack(fill=X)        self.list_history_explain = Label(explain_frame,                                          text="Export history of items linked to a release or a baseline",                                          fg=foreground, width=80, anchor=W, padx=50, pady=4)        self.list_history_explain.pack(fill=X)class CheckGui():    def getFolderDialogLLR(self):        # open dialog window        filename = tkFileDialog.askdirectory(title="Get folder name where are located the LLRs")        if filename:            self.folder_llr_entry.delete(0,END)            self.folder_llr_entry.insert(END, filename)    def getFolderDialogHLR(self):        # open dialog window        filename = tkFileDialog.askdirectory(title="Get folder name where are located the HLRs")        if filename:            self.folder_hlr_entry.delete(0,END)            self.folder_hlr_entry.insert(END, filename)        return filename    def getFolderDialogSHLVCP(self):        # open dialog window        filename = tkFileDialog.askdirectory(title="Get folder name where are located the SHLVCPs")        if filename:            self.folder_shlvcp_entry.delete(0,END)            self.folder_shlvcp_entry.insert(END, filename)        return filename    def getFolderDialogUpper(self):        # open dialog window        filename = tkFileDialog.askdirectory(title="Get folder name where are located the HLRs")        if filename:            self.folder_upper_req_entry.delete(0,END)            self.folder_upper_req_entry.insert(END, filename)        return filename    def getFolderDialogIS(self):        # open dialog window        # get filename        filename = tkFileDialog.askopenfilename(defaultextension = '.xlsx',                                                filetypes=[('excel files with macro','.xlsm'),('excel files','.xlsx')],                                                title="Get Inspection Sheet name and path")        if filename:            self.inspection_sheet_entry.delete(0,END)            self.inspection_sheet_entry.insert(END, filename)        return filename    def getHSIDName(self):        # open dialog window        # get filename        filename = tkFileDialog.askopenfilename(filetypes=[('Word document openxml','.docx')],title="Get HSID name and path")        if filename:            self.hsid_entry.delete(0,END)            self.hsid_entry.insert(END, filename)        return filename    def launchCheckLLR(self):        # Clear output log        self.click_clear()        dirname = self.folder_llr_entry.get()        hsid_dirname = self.hsid_entry.get()        self.queue.put("CHECK_LLR")  # order to check LLR        self.queue.put(dirname)        self.queue.put(hsid_dirname)    def genDerivedLLR(self):        # Clear output log        self.click_clear()        dirname = self.folder_llr_entry.get()        self.queue.put("GEN_DERIVED_LLR")  # order to generate derived LLR        self.queue.put(dirname)    def genInspectSheetLLR(self):        # Clear output log        self.click_clear()        dirname = self.folder_llr_entry.get()        dirname_upper = self.folder_hlr_entry.get()        reference = self.reference_entry.get()        issue = self.revision_entry.get()        release = self.release_entry.get()        hsid_dirname = self.hsid_entry.get()        self.queue.put("EXPORT_IS_LLR")  # order to generate IS for LLR        self.queue.put(dirname)        self.queue.put(dirname_upper)        self.queue.put(reference)        self.queue.put(issue)        self.queue.put(release)        self.queue.put(hsid_dirname)    def genInspectSheetHLR(self):        # Clear output log        self.click_clear()        # Directory containint SwRD data        dirname = self.folder_hlr_entry.get()        # Directory containint upper data        dirname_upper = self.folder_upper_req_entry.get()        reference = self.reference_entry.get()        issue = self.revision_entry.get()        release = self.release_entry.get()        self.success.config(fg='red',bg = 'yellow',text="INSPECTION SHEET EXPORT IN PROGRESS ...")        self.queue.put("EXPORT_IS_HLR")  # order to generate IS for HLR        self.queue.put(dirname)        self.queue.put(dirname_upper)        self.queue.put(reference)        self.queue.put(issue)        self.queue.put(release)    def genInspectSheetSHLVCP(self):        # Clear output log        self.click_clear()        dirname_spec = self.folder_hlr_entry.get()        dirname_test = self.folder_shlvcp_entry.get()        reference = self.reference_entry.get()        issue = self.revision_entry.get()        release = self.release_entry.get()        self.queue.put("EXPORT_IS_SHLVCP")  # order to generate IS for SHLVCP        self.queue.put(dirname_spec)        self.queue.put(dirname_test)        self.queue.put(reference)        self.queue.put(issue)        self.queue.put(release)    def genDerivedHLR(self):        # Clear output log        self.click_clear()        dirname = self.folder_hlr_entry.get()        self.queue.put("GEN_DERIVED_HLR")  # order to generate derived LLR        self.queue.put(dirname)    def genDerivedUpper(self):        # Clear output log        self.click_clear()        dirname = self.folder_upper_req_entry.get()        self.queue.put("GEN_DERIVED_UPPER")  # order to generate derived LLR        self.queue.put(dirname)    def launchCheckHLR(self):        # Clear output log        self.click_clear()        dirname = self.folder_hlr_entry.get()        self.queue.put("CHECK_HLR")  # order to check LLR        self.queue.put(dirname)    def launchCheckSHLVCP(self):        # Clear output log        self.click_clear()        dirname = self.folder_shlvcp_entry.get()        self.queue.put("CHECK_SHLVCP")  # order to check LLR        self.queue.put(dirname)    def launchCheckUpper(self):        # Clear output log        self.click_clear()        dirname = self.folder_upper_req_entry.get()        self.queue.put("CHECK_UPPER")  # order to check LLR        self.queue.put(dirname)    def launchCheckIS_HLR(self):        # Clear output log        self.click_clear()        dirname_upper = self.folder_upper_req_entry.get()        dirname_req = self.folder_hlr_entry.get()        filename_is = self.inspection_sheet_entry.get()        self.success.config(fg='red',bg = 'yellow',text="INSPECTION CHECK IN PROGRESS ...")        skip_change_synergy_var = self.skip_change_synergy_var.get()        if filename_is == "":            if dirname_req == "":                tkMessageBox.showinfo("Error","Missing specification document folder.")            else:                # Check only specification document                self.queue.put("CHECK_HLR")  # order to check LLR                self.queue.put(dirname_req)        else:            self.queue.put("CHECK_IS_HLR")  # order to check LLR            self.queue.put(dirname_upper)            self.queue.put(dirname_req)            self.queue.put(filename_is)            self.queue.put(self.component)            # Focus on the "Ouput" notebook            #self.notebook.tab('Output').focus_set()    def getChapterDialogHLR(self):        # Clear output log        self.click_clear()        filename = tkFileDialog.askopenfilename(filetypes=[('.txt','')],title="Get chapter versus requirements filename and path")        self.folder_chapter_hlr_entry.delete(0,END)        self.folder_chapter_hlr_entry.insert(END, filename)    def updateChapterHLR(self):        filename = self.folder_chapter_hlr_entry.get()        if filename == "":            tkMessageBox.showinfo("Error","Missing chapter versus requirements filename.")        else:            self.queue.put("UPDATE_CHAPTER_HLR")  # order to check LLR            self.queue.put(filename)    def launchCheckIS_LLR(self):        # Clear output log        self.click_clear()        dirname_upper = self.folder_hlr_entry.get()        dirname_req = self.folder_llr_entry.get()        filename_is = self.inspection_sheet_llr_entry.get()        if dirname_req == "":            tkMessageBox.showinfo("Error","Missing specification document folder.")        else:            if filename_is == "":                hsid_dirname = self.hsid_entry.get()                self.queue.put("CHECK_LLR")  # order to check LLR                self.queue.put(dirname_req)                self.queue.put(hsid_dirname)            else:                self.queue.put("CHECK_IS_LLR")  # order to check LLR                self.queue.put(dirname_upper)                self.queue.put(dirname_req)                self.queue.put(filename_is)                # Focus on the "Ouput" notebook                #self.notebook.tab('Output').focus_set()    def launchCheckIS_Doc(self):        # Clear output log        self.click_clear()        filename_is = self.inspection_sheet_doc_entry.get()        verif_issue_cr_process_start = self.verif_issue_cr_process_start_entry.get()        if filename_is == "":            tkMessageBox.showinfo("Error","Missing inspection sheet filename.")        else:            self.queue.put("CHECK_IS_DOC")  # order to check any doc            self.queue.put(filename_is)            self.queue.put(verif_issue_cr_process_start)    def build_check_folder(self, page_check_llr):        # Check requirements        check_reqs = Frame(page_check_llr)        check_reqs.pack(anchor=W)        width_button = 20        width_check = 10        # Upper requirements        second_check_reqs = LabelFrame(check_reqs,text="Upper Requirement",bd=0)        second_check_reqs.pack(anchor=W)        box = Frame(second_check_reqs,padx=10)        box.pack()        button_get_folder_hlr = Button(box, text='Set Upper Req. Folder',width=width_button, state=NORMAL,command=self.getFolderDialogUpper)        button_get_folder_hlr.pack(side=LEFT)        self.folder_upper_req_entry = Entry(box, bg="white",width=100,font=("Times", 9))        self.folder_upper_req_entry.pack(side=LEFT)        #self.folder_upper_req_entry.insert(END,"C:/Documents and Settings/appereo1/Bureau/sqa/ENM/SSCS")        button_check = Button(box, text='Check',width=width_check, state=NORMAL,command=self.launchCheckUpper)        button_check.pack(side=LEFT)        button_gen_derived_hlr = Button(box, text='Export Derived Req.',width=width_button, state=NORMAL,command=self.genDerivedUpper)        button_gen_derived_hlr.pack()        # HLR        second_check_reqs = LabelFrame(check_reqs,text="High Level Requirement",bd=0)        second_check_reqs.pack(anchor=W)        box = Frame(second_check_reqs,padx=10)        box.pack()        button_get_folder_hlr = Button(box, text='Set HLR Folder',width=width_button, state=NORMAL,command=self.getFolderDialogHLR)        button_get_folder_hlr.pack(side=LEFT)        self.folder_hlr_entry = Entry(box, bg="white",width=100,font=("Times", 9))        self.folder_hlr_entry.pack(side=LEFT)        #self.folder_hlr_entry.insert(END,"C:/Documents and Settings/appereo1/Bureau/sqa/ENM/SWRD")        #button_check_hlr = Button(box, text='Check',width=width_check, state=NORMAL,command=self.launchCheckHLR)        #button_check_hlr.pack(side=LEFT)        button_gen_is_hlr = Button(box, text='Export IS',width=width_check, state=NORMAL,command=self.genInspectSheetHLR)        button_gen_is_hlr.pack(side=LEFT)        button_gen_derived_hlr = Button(box, text='Export Derived Req.',width=width_button, state=NORMAL,command=self.genDerivedHLR)        button_gen_derived_hlr.pack()        box = Frame(second_check_reqs,padx=10)        box.pack(anchor=W)        width_button = 20        width_check = 10        button_get_folder_hlr = Button(box, text='Set HLR chapter',width=width_button, state=NORMAL,command=self.getChapterDialogHLR)        button_get_folder_hlr.pack(side=LEFT)        self.folder_chapter_hlr_entry = Entry(box, bg="white",width=100,font=("Times", 9))        self.folder_chapter_hlr_entry.pack(side=LEFT)        #self.folder_chapter_hlr_entry.insert(END,"C:/Documents and Settings/appereo1/Bureau/sqa/ENM/chap_swrd_enm_req.txt")        button_check_hlr = Button(box, text='Update',width=width_check, state=NORMAL,command=self.updateChapterHLR)        button_check_hlr.pack()        box_is = Frame(second_check_reqs,padx=10)        box_is.pack(anchor=W)        button_get_is_filename = Button(box_is, text='Set Inspection sheet',width=width_button, state=NORMAL,command=self.getFolderDialogIS)        button_get_is_filename.pack(side=LEFT)        self.inspection_sheet_entry = Entry(box_is, bg="white",width=100,font=("Times", 9))        self.inspection_sheet_entry.pack(side=LEFT)        #self.inspection_sheet_entry.insert(END,"C:/Documents and Settings/appereo1/Bureau/sqa/ENM/IS_SwRD_ENM_ET3135_S-5.1.1.xlsm")        button_check_hlr = Button(box_is, text='Check',width=width_check, state=NORMAL,command=self.launchCheckIS_HLR)        button_check_hlr.pack(side=LEFT)        # LLR        first_check_reqs = LabelFrame(check_reqs,text="Low Level Requirement",bd=0)        first_check_reqs.pack(anchor=W)        box = Frame(first_check_reqs,padx=10)        box.pack(anchor=W)        button_get_hsid_filename = Button(box, text='Set HSID name',width=width_button, state=NORMAL,command=self.getHSIDName)        button_get_hsid_filename.pack(side=LEFT)        self.hsid_entry = Entry(box, bg="white",width=100,font=("Times", 9))        self.hsid_entry.pack()        #self.hsid_entry.insert(END,"C:/Documents and Settings/appereo1/Bureau/sqa/ENM/HSID")        box = Frame(first_check_reqs,padx=10)        box.pack()        button_get_folder_llr = Button(box, text='Set LLR Folder',width=width_button, state=NORMAL,command=self.getFolderDialogLLR)        button_get_folder_llr.pack(side=LEFT)        self.folder_llr_entry = Entry(box, bg="white",width=100,font=("Times", 9))        self.folder_llr_entry.pack(side=LEFT)        #self.folder_llr_entry.insert(END,"C:/Documents and Settings/appereo1/Bureau/sqa/Template + Description + LLR + internal")        #button_check_llr = Button(box, text='Check',width=width_check, state=NORMAL,command=self.launchCheckLLR)        #button_check_llr.pack(side=LEFT)        button_gen_is_llr = Button(box, text='Export IS',width=width_check, state=NORMAL,command=self.genInspectSheetLLR)        button_gen_is_llr.pack(side=LEFT)        button_gen_derived_llr = Button(box, text='Export Derived Req.',width=width_button, state=NORMAL,command=self.genDerivedLLR)        button_gen_derived_llr.pack(side=LEFT)        box_is = Frame(first_check_reqs,padx=10)        box_is.pack(anchor=W)        button_get_is_filename = Button(box_is, text='Set Inspection sheet',width=width_button, state=NORMAL,command=self.getFolderDialogIS)        button_get_is_filename.pack(side=LEFT)        self.inspection_sheet_llr_entry = Entry(box_is, bg="white",width=100,font=("Times", 8))        self.inspection_sheet_llr_entry.pack(side=LEFT)        #self.inspection_sheet_llr_entry.insert(END,"C:/Documents and Settings/appereo1/Bureau/sqa/ENM/IS_SwRD_ENM_ET3135_S-5.1.1.xlsm")        button_check_hlr = Button(box_is, text='Check',width=width_check, state=NORMAL,command=self.launchCheckIS_LLR)        button_check_hlr.pack(side=LEFT)        # HL Tests Cases and Procedures        second_check_reqs = LabelFrame(check_reqs,text="High Level Software Verification Cases and Procedures",bd=0)        second_check_reqs.pack(anchor=W)        box = Frame(second_check_reqs,padx=10)        box.pack()        button_get_folder = Button(box, text='Set SHLVCP Folder',width=width_button, state=NORMAL,command=self.getFolderDialogSHLVCP)        button_get_folder.pack(side=LEFT)        self.folder_shlvcp_entry = Entry(box, bg="white",width=100,font=("Times", 9))        self.folder_shlvcp_entry.pack(side=LEFT)        self.folder_shlvcp_entry.insert(END,"")        button_check = Button(box, text='Check',width=width_check, state=NORMAL,command=self.launchCheckSHLVCP)        button_check.pack(side=LEFT)        button_gen_is = Button(box, text='Export IS',width=width_check, state=NORMAL,command=self.genInspectSheetSHLVCP)        button_gen_is.pack(side=LEFT)        # Any document        first_check_reqs = LabelFrame(check_reqs,text="Any document",bd=0)        first_check_reqs.pack(anchor=W)        box_is = Frame(first_check_reqs,padx=10)        box_is.pack()        button_get_is_filename = Button(box_is, text='Set Inspection sheet',width=width_button, state=NORMAL,command=self.getFolderDialogIS)        button_get_is_filename.pack(side=LEFT)        self.inspection_sheet_doc_entry = Entry(box_is, bg="white",width=100,font=("Times", 8))        self.inspection_sheet_doc_entry.pack(side=LEFT)        self.inspection_sheet_doc_entry.insert(END,"C:/Documents and Settings/appereo1/Bureau/sqa/ENM/IS_SwRD_ENM_ET3135_S-5.1.1.xlsm")        button_check_hlr = Button(box_is, text='Check',width=width_check, state=NORMAL,command=self.launchCheckIS_Doc)        button_check_hlr.pack(side=LEFT)        # Image        last_pane = Frame(check_reqs, padx=20, pady=30)        last_pane.pack(side=LEFT)        #Drawing        self.check_reqs_img_can = Canvas(last_pane, width=128, height=128, highlightthickness=0)        try:            bitmap = PhotoImage(file="img/kghostview.gif")            self.check_reqs_img = self.check_reqs_img_can.create_image(64, 64, image=bitmap)            self.check_reqs_img_can.bitmap = bitmap        except TclError as exception:            print "TCL error:", exception        self.check_reqs_img_can.pack(fill=Y)        box_param = Frame(check_reqs,padx=10)        box_param.pack(anchor=W)        self.skip_change_synergy_var = IntVar()        self.button_cr_for_review = Checkbutton(box_param, text="Skip Change and Synergy check",                                                variable=self.skip_change_synergy_var, fg=foreground,                                                command=self.cb_skip_change_synergy)        self.button_cr_for_review.pack()        self.verif_issue_cr_process_start_entry = self.createEntry(box_param,'Version since CR is activated:',"",entry_size = 3,width=25)        self.reviewer_name_entry = self.createEntry(box_param,"Reviewer's name:","",entry_size = 30,width=15)        self._statusListbox(box_param)    def _statusListbox(self, master_frame):        # Status listbox        sub_frame = Frame(master_frame)        sub_frame.pack()        # crlistbox is updated thanks to RELOAD_CRLISTBOX keyword        self.statuslistbox = ThreadSafeListbox(sub_frame,                                 height=3,                                 width=40,                                 exportselection=0,                                 state=NORMAL,                                 bg="gray")        self.statuslistbox.delete(0, END)        for status in ("OK","NOK","PARTIALLY VERIFIED (NOK)","PARTIALLY VERIFIED (OK)"):            self.statuslistbox.insert(END, status)        self.vbar_statuslistbox = vbar_statuslistbox = Scrollbar(sub_frame, name="vbar_statuslistbox")        self.vbar_statuslistbox.pack(side=RIGHT, fill=Y)        vbar_statuslistbox["command"] = self.statuslistbox.yview        self.statuslistbox["yscrollcommand"] = vbar_statuslistbox.set        self.statuslistbox.bind("<ButtonRelease-1>", self.select_default_status)        self.statuslistbox.bind('<MouseWheel>', self.statuslistbox_scrollEvent)        self.statuslistbox.bind("<Key-Up>", lambda event, arg=self.statuslistbox: self.up_event(event, arg))        self.statuslistbox.bind("<Key-Down>", lambda event, arg=self.statuslistbox: self.down_event(event, arg))        self.statuslistbox.pack()    def select_default_status(self,event):        index = self.statuslistbox.curselection()[0]        if index != ():            self.default_status = self.statuslistbox.get(index)    def statuslistbox_scrollEvent(self, event):        if event.delta > 0:            self.statuslistbox.yview_scroll(-2, 'units')        else:            self.statuslistbox.yview_scroll(2, 'units')class scrollTxtArea:    def __init__(self,                 root,                 wrap=WORD,                 width=60,                 height=16):        frame=Frame(root)        frame.pack()        self.textPad(frame,                     height=height,                     width=width,                     wrap=wrap)        return    def textPad(self,                frame,                wrap=WORD,                width=60,                height=16):        #add a frame and put a text area into it        textPad=Frame(frame)        self.text=Text(textPad,                       height=height,                       width=width,                       wrap=wrap)        # add a vertical scroll bar to the text area        scroll=Scrollbar(textPad)        self.text.configure(yscrollcommand=scroll.set)        scroll.config(command=self.text.yview)        #pack everything        self.text.pack(side=LEFT)        scroll.pack(side=RIGHT,fill=Y)        textPad.pack(side=TOP)        returnclass smallWindows(Frame,                   Toplevel,                   Text):    def scrollEvent(self, event):        if event.delta > 0:            # scroll up            self.help_text.yview_scroll(-2, 'units')        else:            # scroll down            self.help_text.yview_scroll(2, 'units')    def write(self,txt):        self.help_text.delete(0.0,END)        self.help_text.insert(END,txt)    def exit(self):        self.destroy()    def start(self,window):        window.mainloop()    def create(self,               icon="ico_sys_desktop.ico",               title="",               bg="#80c0c0",               width=120,               height=16,               labels=("",""),               callback=None):        help_window = Toplevel()        help_window.iconbitmap(icon)        help_window.title(title)        help_window.resizable(False, False)        help_window.grab_set()        help_window.focus_set()        help_frame_label = Label(help_window,                                 text=labels[0])        help_frame_label.pack(anchor=W)        help_frame = Frame(help_window, bg=bg)        help_frame.pack()        scrolltxt_first_area=scrollTxtArea(help_frame,                          wrap=WORD,                          width=width,                          height=height)        self.help_text = scrolltxt_first_area.text        scrollbar = Scrollbar(help_frame)        second_frame_label = Label(help_window,                                   text=labels[1])        second_frame_label.pack(anchor=W)        second_frame = Frame(help_window, bg=bg)        second_frame.pack(anchor=W)        #if 0==1:        scrolltxt_second_area=scrollTxtArea(second_frame,                          wrap=WORD,                          width=width,                          height=height)        self.second_text = scrolltxt_second_area.text        #scrolltxt_second_area.text['yscrollcommand'] = scrolltxt_second_area.scroll.set        ok_button = Button(help_window, text='Apply Changes', command = callback)        ok_button.pack(side=LEFT,anchor=E)        cancel_button = Button(help_window, text='Cancel', command = help_window.destroy)        cancel_button.pack(anchor=E)        return help_windowimport threadingclass MyTkApp(threading.Thread,smallWindows):    def __init__(self,data):        threading.Thread.__init__(self)        self.data = data    def callback(self):       self.small_windows.quit()    def setAddr(self,dico_addr):        self.addr_hw_sw_compatibility = dico_addr["hw_sw_compat"]        self.addr_pn = dico_addr["pn"]        self.addr_checksum = dico_addr["checksum"]    def eocWindow(self,data):        self.small_windows = smallWindows()        eoc_window = self.small_windows.create(title="EOC information")        hw_sw_compatibility = data[0]        pn = data[1]        checksum = data[2]        addr_hw_sw_compatibility = self.addr_hw_sw_compatibility        addr_pn = self.addr_pn        addr_checksum = self.addr_checksum        txt  = "User program flash memory software area:\n"        txt += "----------------------------------------\n\n"        txt += "HW/SW compatibility index ({:s}): {:s}\n".format(addr_hw_sw_compatibility,hw_sw_compatibility)        txt += "SW Part Number ({:s}): {:s}\n".format(addr_pn,pn)        txt += "Software checksum ({:s}): {:s}\n\n".format(addr_checksum,checksum)        txt += "User program flash memory hardware area:\n"        txt += "----------------------------------------\n\n"        txt += "HW/SW compatibility index: {:s}\n".format("")        txt += "Board Part Number: {:s}\n".format("")        txt += "Hardware checksum: {:s}\n\n".format("")        self.small_windows.write(txt)        bou1 = Button(eoc_window,                      text='Quit',                      command = eoc_window.destroy)        bou1.pack(side=RIGHT)        #self.small_windows.protocol("WM_DELETE_WINDOW", self.callback)        return eoc_window        #self.small_windows.start(self.small_windows)    def run(self):        eoc_window = self.eocWindow(self.data)        eoc_window.mainloop()class Interface(Frame,                Tool,                GuiTool,                ReviewGui,                ChangeGui,                Project,                Baseline,                ConfigIndexGui,                ParametersGui,                CheckGui):    def displayOutput(self,                      master,                      width_output_log=110):        """        Main UI text console        :param master:        :param width_output_log:        :return:        """        # Output log        general_output_frame = Frame(master)        general_output_frame.pack(ipadx=5, ipady=5)        sub_general_output_frame = Frame(general_output_frame)        sub_general_output_frame.pack(fill=X, expand=1)        self.log_scrollbar = log_scrollbar = Scrollbar(sub_general_output_frame)        self.log_scrollbar.pack(side=RIGHT, fill=Y)        self.general_output_txt = ThreadSafeConsole(sub_general_output_frame,                                       wrap=WORD,                                       width=width_output_log,                                       height=24,                                       fg='green',                                       bg='black')        self.log_scrollbar["command"] = self.general_output_txt.yview        self.general_output_txt["yscrollcommand"] = log_scrollbar.set        #self.general_output_txt.bind("<MouseWheel>", self.log_scrollEvent)        #self.general_output_txt.bind("<Key-Up>", self.log_upEvent)        #self.general_output_txt.bind("<Key-Down>", self.log_downEvent)        self.general_output_txt.pack()        # Clear        self.button_clear = Button(general_output_frame, text='Clear', command=self.click_clear)        self.button_clear.pack(side=LEFT, padx=0, pady=10)    def openHLink(self, event,filename,hyperlink_tag):        start, end = self.general_output_txt.tag_prevrange(hyperlink_tag,                                                           self.general_output_txt.index("@%s,%s" % (event.x, event.y)))        print "Going to %s..." % self.general_output_txt.get(start, end)        ishttp = re.match(r'^http:',filename)        if not ishttp:            print "gen_dir", self.gen_dir            print "docx_filename", filename            target = join(self.gen_dir, filename)        else:            # HTTP page            target = filename        self.openTarget(target)    def resetReleaseListbox(self):        self.releaselistbox.clear()        #self.releaselistbox.configure(bg="gray")        self.releaselistbox.disable()    def resetBaselineListbox(self):        self.baselinelistbox.clear()        #self.baselinelistbox.configure(bg="gray")        self.baselinelistbox.disable()    def resetProjectListbox(self):        self.projectlistbox.clear()        try:            #self.projectlistbox.configure(bg="gray")            self.projectlistbox.disable()        except TclError as exception:            print "TCL Error:", exception    def _find_projects(self):        self.beginCmd("SYNERGY GET PROJECTS COMMAND",color=False)        self.projectlistbox.clear()        self.projectlistbox.insert(END, "Looking for projects ...")        self.projectlistbox.enable()        self.projectlistbox.clear()        self.log("Get available projects...")        self.queue.put("GET_PROJECTS")  # action to get projects        self.click_clear()    def find_releases(self):        """         Display Synergy releases or from file in the GUI        """        # Display release        self.releaselistbox.clear()        self.releaselistbox.write("Looking for releases ...")        list_releases = []        if self.partnumber not in ("All", "") or \                        self.standard not in ("All", ""):            self.log("Get available releases related to a part number ...")            if self.dico_list_pn != {}:                self.releaselistbox.delete(0, END)                if self.partnumber not in ("All", ""):                    self.releaselistbox.insert(END, "All")                    if self.dico_pn_vs_rl.has_key(self.partnumber):                        list_releases = self.dico_pn_vs_rl[self.partnumber]                        for release in self.dico_pn_vs_rl[self.partnumber]:                            self.log("Find release: " + release)                            self.releaselistbox.insert(END, release)                else:                    # Display all releases                    self.display_release()                self.releaselistbox.configure(bg="white")                self.releaselistbox.selection_set(first=0)        else:            # Get list of releases from Synergy            self.beginCmd("SYNERGY GET RELEASES COMMAND",color=False)            self.queue.put("GET_RELEASES")  # action to get releases            regexp = self.release_regexp  #'^SW_(.*)/(.*)$'            self.queue.put(regexp)        self.click_clear()    def select_baseline(self, event):        """        :param event:        :return:        """        self.clear_project()        index = self.baselinelistbox.curselection()        if index in (0, ()):            self.baseline = "None"            self.setBaselineSynergy(self.baseline)        else:            self.baseline = self.baselinelistbox.get(index)            if self.baseline == "All":                self.setBaselineSynergy("None")                # self.log("All baselines selected")            else:                self.setBaselineSynergy(self.baseline)                # self.log("Selected baseline: " + self.baseline)                self.projectlistbox.enable()                self.button_find_projects.configure(state=NORMAL)                self.button_list_items.configure(state=NORMAL)                self.button_list_tasks.configure(state=NORMAL)                self._find_release_vs_baseline()                self._find_projects()    def select_release(self, event):        self.clear_baselines()        self.clear_project()        index = self.releaselistbox.curselection()        if index in (0, ()):            self.release = ""            # self.log("All releases selected")            self.setBaseline("None")        else:            self.release = self.releaselistbox.get(index)            if self.release == "All":                self.setBaseline("None")            else:                self.beginCmd("SYNERGY GET BASELINES COMMAND",color=False)                self.setBaseline(self.release)                #self.queue.put("GET_RELEASE_INFO")                #self.queue.put(self.release)                self.updateBaselineListboxInProgress                self.queue.put("GET_BASELINES") # action to get baselines                self.queue.put(self.release)                self.button_list_items.configure(state=NORMAL)                self.button_list_tasks.configure(state=NORMAL)    def select_project(self, event):        index = self.projectlistbox.curselection()        if index in (0, ()):            project = ""            self.setProject("None")        else:            project = self.projectlistbox.get(index)            if project == "All":                self.setProject("All")                self.log("All projects selected")            else:                self.setProject(project)                self.button_select.configure(state=NORMAL)                self.button_list_items.configure(state=NORMAL)                self.button_list_tasks.configure(state=NORMAL)                self.log("Selected project: " + project)        self.project = project    def setBaseline(self, release):        '''         set CM Synergy release        '''        self.baseline_change = release        self.release = release        self.button_select.configure(state=NORMAL)        #self.baseline_txt.configure(text="Release: " + release)        self.release_entry.configure(state='normal')        self.release_entry.delete(0, END)        self.release_entry.insert(END, release)        self.release_entry.configure(state='readonly')        #self.impl_cr.configure(text="CR implemented for release " + self._splitComma(self.impl_release))        self.list_items_explain.configure(            text="Export items listing linked to a release " + self.release + " (directories and executable objects are discarded)")        self.list_tasks_explain.configure(            text="Export tasks listing linked to a release " + self.release + " (automatic tasks and components tasks are discarded)")        self.list_history_explain.configure(text="Export history listing linked to a release " + self.release)        self.click_clear()        self.log("Selected release: " + release)        self.clear_baselines()        self.clear_project()        # self.queue.put("GET_RELEASE_INFO")        # self.queue.put(release)    def unsetRelease(self):        self.baseline_change = ""        self.release = "All"        self.release_entry.configure(state='normal')        self.release_entry.delete(0, END)        self.release_entry.configure(state='readonly')    def unsetBaselineSynergy(self):        pass        #self.baseline_synergy_txt.configure(text="Baseline")    def unsetProject(self):        pass        #self.project_txt.configure(text="Project")    def clear_release(self):        #self.release = "All"        self.unsetRelease()        #self.releaselistbox.selection_clear(first=0, last=END)    def clear_project(self):        '''        Clear project listbox        '''        self.project = "All"        self.unsetProject()        #self.projectlistbox.selection_clear(first=0, last=END)        self.project_entry.configure(state='normal')        self.project_entry.delete(0, END)        self.project_entry.configure(state='readonly')    def display_standard(self):        # Insert standards if exist        if self.dico_list_std != {}:            self.stdlistbox.insert(END, "All")            list_stds = self.dico_list_std.keys()            list_stds.sort()            ##            std_index = 0            for key in list_stds:                self.stdlistbox.insert(END, key)                ##                std_index += 1                self.stdlistbox.itemconfig(END, bg='white', fg='black')                ##                num = 0                for value in self.dico_list_std[key]:                    ##                    if num > 0:                    self.stdlistbox.insert(END, value)                    self.stdlistbox.itemconfig(END, bg='grey', fg='white')                ##                    num += 1            self.stdlistbox.configure(bg="white")            self.stdlistbox.selection_set(first=0)    def display_partnumber(self):        # Insert part number if exist        if self.dico_list_pn != {}:            self.pnlistbox.insert(END, "All")            list_pns = self.dico_list_pn.keys()            list_pns.sort()            for key in list_pns:                self.pnlistbox.insert(END, key)            self.pnlistbox.configure(bg="white")            self.pnlistbox.selection_set(first=0)    def display_release(self):        # Insert releases if exist        if self.dico_rl_vs_pn != {}:            self.releaselistbox.insert(END, "All")            list_rls = self.dico_rl_vs_pn.keys()            list_rls.sort()            # besoin de comparer ici la liste self.current_list_partnumber avec la liste self.dico_rl_vs_pn            for key in list_rls:                if list(set(self.current_list_partnumber).intersection(self.dico_rl_vs_pn[key])) != []:                    self.releaselistbox.insert(END, key)            self.releaselistbox.configure(bg="white")            self.releaselistbox.selection_set(first=0)    def _invert_dol_nonunique(self, d):        '''         To reverse dictionnary        '''        newdict = {}        for k in d:            for v in d[k]:                newdict.setdefault(v, []).append(k)        return newdict    def _invert_dol(self,d):        #return dict((v, k) for k in d for v in d[k])        newdict = {}        for k in d:            for v in d[k]:                newdict.setdefault(v, []).append(k)        return newdict    def setDefault(self):        self.login = ""        self.password = ""        self.author = ""        self.default_template_type = ""        self.reference = ""        self.revision = ""        self.part_number = ""        self.board_part_number = ""        self.checksum = ""        self.dal = ""        self.previous_release = ""        self.verbose = "no"        self.release_regexp = ""        # Release        self.release = ""        self.impl_release = ""        self.baseline_change = ""        # Baseline        self.baseline = ""        self.baseline_delivery = ""        # Project        self.project = ""        self.qams_server_ip = "localhost"    def _readConfig(self):        '''         Read ini config file        '''        try:            config_file = join("conf","docid.ini")            self.config_parser.read(config_file)            self.login = self.getOptions("User", "login")            self.password = self.getOptions("User", "password")            self.author = self.getOptions("User", "author")            if self.config_parser.has_section("Default"):                self.default_template_type = self.getOptions("Default", "template")                self.reference = self.getOptions("Default", "reference")                self.revision = self.getOptions("Default", "issue")                self.part_number = self.getOptions("Default", "part_number")                self.board_part_number = self.getOptions("Default", "board_part_number")                self.checksum = self.getOptions("Default", "checksum")                self.dal = self.getOptions("Default", "dal")                self.previous_baseline = self.getOptions("Default", "previous_baseline")                self.verbose = self.getOptions("Default", "verbose")                self.release_regexp = self.getOptions("Default", "release_regexp")                # Release                self.release = self.getOptions("Default", "release")                # Detect on                self.previous_release = self.getOptions("Default", "detect_release")                # Implemented on                self.impl_release = self.getOptions("Default", "impl_release")                self.baseline_change = self.release                # Baseline                self.baseline = self.getOptions("Default", "baseline")                self.baseline_delivery = self.getOptions("Default", "baseline_delivery")                # Project                self.project = self.getOptions("Default", "project")                self.qams_server_ip = self.getOptions("Default","qams_server_ip")            else:                self.setDefault()            # get A/C standards            self.dico_rl_vs_pn = {}            if self.config_parser.has_section("Standards"):                if self.config_parser.has_option("Standards", "file"):                    file_csv_name = self.config_parser.get("Standards", "file")                    file_csv_name = join("conf",file_csv_name)                    self.dico_std = {}                    self.dico_list_std_vs_stdac = {}                    self.dico_list_std = {}                    self.dico_list_pn = {}                    self.dico_list_pn_modified = {}                    self.dico_list_pn_vs_stdac = {}                    self.dico_list_pn_reverted = {}                    self.dico_list_pn_modified_reverted = {}                    self.dico_std_vs_pn = {}                    # Standards avion versus PN                    self.dico_std_ac_vs_pn = {}                    self.dico_pn_vs_rl = {}                    with open(file_csv_name, 'rb') as file_csv_handler:                        reader = csv.reader(self.CommentStripper(file_csv_handler))                        for row in reader:                            num = 0                            list_all = []                            # List of standards                            list_std = []                            # list of part numbers                            list_pn = []                            # List of release                            list_rl = []                            attr = []                            ci_name = ""                            type_id = ""                            for col in row:                                if num == 0:                                    # Tag appearing in release box                                    tag = col                                elif num == 1:                                    # Type of identification: Standard, Part Nunmber                                    type_id = col                                    attr.append(type_id)                                elif num == 2:                                    # Name of Configuration Item: ATUPU,ENMU etc ...                                    ci_name = col                                    attr.append(ci_name)                                    ##                                list_all.append(attr)                                else:                                    list_all.append(col)                                    if type_id in ("PN", "SW"):                                        list_pn.append(col)                                    elif type_id == "STD":                                        list_std.append(col)                                    elif type_id == "RL":                                        list_rl.append(col)                                    else:                                        pass                                num += 1                            if type_id in ("PN", "SW"):                                self.dico_list_pn[tag] = list_pn                            elif type_id == "STD":                                # STD                                self.dico_list_std[tag] = list_std                            ##                                self.dico_std_ac_vs_pn[tag] = list_std                            elif type_id == "RL":                                self.dico_rl_vs_pn[tag] = list_rl                            else:                                pass                            self.dico_std[tag] = list_all                    #self.dico_pn_vs_rl = self._invert_dol_nonunique(self.dico_rl_vs_pn)                    self.dico_pn_vs_rl = self._invert_dol(self.dico_rl_vs_pn)                    self.dico_list_std_vs_stdac = self._invert_dol_nonunique(self.dico_list_std)                    #                    # Dans la liste des part numbers remplacer les standards avions par les sous-standards projets                    #                    for key_pn, values_std in self.dico_list_pn.iteritems():                        ##                    print values_std                        list_pn_vs_std = []                        list_pn_vs_stdac = []                        for value_std in values_std:                            ##                        print value_std                            if self.dico_list_std.has_key(value_std):                                # value_std est un standard avion                                # on remplace le standard avion par les sous-standards projet                                list_pn_vs_std.extend(self.dico_list_std[value_std])                                list_pn_vs_stdac.append(value_std)                            else:                                list_pn_vs_stdac.extend(self.dico_list_std_vs_stdac[value_std])                                list_pn_vs_std.append(value_std)                        self.dico_list_pn_vs_stdac[key_pn] = list_pn_vs_stdac                        self.dico_list_pn_modified[key_pn] = list_pn_vs_std                    self.dico_list_stdac_vs_pn = self._invert_dol_nonunique(self.dico_list_pn_vs_stdac)                    ##                    print self.dico_list_stdac_vs_pn                    # Inverse le dictionnaire des part_numbers                    self.dico_list_pn_modified_reverted = self._invert_dol_nonunique(self.dico_list_pn_modified)                    # Met � jour la liste des standards aves les sous-standards                    self.dico_std.update(self.dico_list_pn_modified_reverted)                    ##                    print self.dico_std                    # revert dico to update dictionary with part numbers                    self.dico_list_pn_reverted = self._invert_dol_nonunique(self.dico_list_pn)                    for key_std, value_pn in self.dico_list_pn_reverted.iteritems():                        for key_std_aircraft, value_std in self.dico_list_std.iteritems():                            if key_std in self.dico_list_std[key_std_aircraft]:                                # le sous-standard key_std est-il associe a un standard key_std_aircraft ?                                # Example:                                #   dico_list_std => Standard 1,STD,EPDS,S1,S1.1                                #   dico_list_pn => 955CE05Y03:S1                                #                   335CE06YXX:S1                                #   dico_list_pn_reverted => S1:955CE05Y03,335CE06YXX                                #   Ici S1 fait partie du Standard 1 donc on ajoute la liste des part number � dico_std_vs_pn                                #   dico_std_vs_pn => Standard 1,955CE05Y03,335CE06YXX                                #                                self.dico_std[key_std_aircraft].extend(self.dico_list_pn_reverted[key_std])                                self.dico_std_vs_pn[key_std_aircraft] = self.dico_list_pn_reverted[key_std]                            elif key_std == key_std_aircraft:                                self.dico_std[key_std_aircraft].extend(self.dico_list_pn_reverted[key_std])                                self.dico_std_vs_pn[key_std_aircraft] = self.dico_list_pn_reverted[key_std]                    # Create table Standard, sub-standard versus part number                    self.dico_std_vs_pn.update(self.dico_list_pn_modified_reverted)                    self.current_list_partnumber = self.dico_list_pn.keys()                    self.std_exists = True                else:                    self.std_exists = False            if self.config_parser.has_section("EOC"):                self.addr_hw_sw_compatibility = self.getOptions("EOC","addr_hw_sw_compatibility")                self.addr_pn = self.getOptions("EOC","addr_pn")                self.addr_checksum = self.getOptions("EOC","addr_checksum")        except KeyError as exception:            print "A/C standards determination failed", exception        except IOError as exception:            print "A/C standards determination failed:", exception        except AttributeError as exception:            print "Interface instance has no attribute 'config_parser':", exception        finally:            self.setDefault()            print "THE END"    def getStandard(self):        return self.std_exists    def click_update_pn_csv(self):        self._readConfig()        if self.getStandard():            self.pnlistbox.delete(0,END)            self.display_partnumber()            self.stdlistbox.delete(0,END)            self.display_standard()        #self.releaselistbox.delete(0, END)        #self.queue.put("GET_RELEASES")  # action to get releases    def click_update_config(self):        # read config file        self._readConfig()        self.regexp_entry.delete(0, END)        self.regexp_entry.insert(END, self.release_regexp)        if self.ccb_cr_parent != "":            if self.ccb_cr_parent == "yes":                self.cr_with_parent.set(1)            else:                self.cr_with_parent.set(0)            self.button_cr_with_parent.configure(state="disable")        else:            self.button_cr_with_parent.configure(state="normal")        self.queue.put("RELOAD_CONFIG")    def select_project_setting(self, event):        """        :param event:        :return:        """        item_id = self.project_setting_listbox.curselection()        if item_id != ():            item = self.project_setting_listbox.get(item_id)            self.config_selected_id = int(item_id[0]) + 1            print "Config:",item_id        else:            pass    def displayHyperlink(self,                         hyperlink_tag="",                         filename="",                         text="Log created."):        #self.docx_filename = filename        #hyperlink_tag = "hlink"        self.general_output_txt.tag_configure(hyperlink_tag, foreground='yellow', underline=1)        # self.general_output_txt.tag_bind("hlink", "<Button-1>", self.openHLink_ccb)        self.general_output_txt.tag_bind(hyperlink_tag, "<Button-1>",lambda event,arg1=filename,arg2=hyperlink_tag : self.openHLink(event,filename,hyperlink_tag))        self.general_output_txt.tag_bind(hyperlink_tag, "<Enter>", self.onLink)        self.general_output_txt.tag_bind(hyperlink_tag, "<Leave>", self.outsideLink)        self.general_output_txt.insert(END, time.strftime("%H:%M:%S", time.localtime()) + " " + text + "\n")        self.general_output_txt.insert(END, "Available here: ")        self.general_output_txt.insert(END, filename, hyperlink_tag)        self.general_output_txt.insert(END, "\n")        self.defill()    def __init__(self,                 notebook,                 queue,                 system="",                 item="",                 queue_thread_gui=None,                 ihm=False,                 login="",                 **kwargs):        """        Init of Interface Class        :param notebook:        :param queue:        :param system:        :param item:        :param queue_thread_gui:        :param kwargs:        :return:        """        global foreground        global entry_size        global item_id        self.initialdir = os.getcwd()        self.std_exists = False        self.current_list_partnumber = []        self.dico_std = {}        # read config file        #self.default_template_type = "SCI"        self.reference = ""  #"ET1234-V"        self.revision = ""  #"1D1"        self.release = ""        self.baseline_change = ""        self.baseline = ""        self.previous_baseline = ""        self.baseline_cur = ""        self.baseline_prev = ""        self.detect_release = ""        self.project = ""        self.verbose = "no"        # if no config parser        self.author = ""        self.part_number = ""        self.board_part_number = ""        self.checksum = ""        self.dal = ""        self.release_regexp = ""        self.previous_release = ""        self.impl_release = ""        self.dico_rl_vs_pn = {}        # Read config        self._readConfig()        self.login = login        if self.author == "":            # Get author in            self.author,mail,tel,service,qams_user_id = self.get_user_infos(login)        # Set logging        self.loginfo = logging.getLogger(__name__)        if self.verbose == "yes":            out_hdlr = logging.FileHandler(filename='docid.log')        else:            out_hdlr = logging.StreamHandler(sys.stdout)        out_hdlr.setFormatter(logging.Formatter('%(asctime)s %(message)s'))        out_hdlr.setLevel(logging.INFO)        self.loginfo.addHandler(out_hdlr)        self.loginfo.setLevel(logging.INFO)        self.loginfo.debug("NO")        self.log("Start log",False)        self.system = system        self.item = item        self.component = ""        self.cr_type = ""        self.review_qams_id = ""        self.project_to_delete = ""        #        # Get        #       - Database        #       - Aircraft        #        if self.item != "":            self.database, self.aircraft = self.get_sys_item_database(self.system, self.item)            if self.database is None:                self.database, self.aircraft = self.get_sys_database()        else:            self.database, self.aircraft = self.get_sys_database()        self.standard = ""        self.partnumber = ""  # Warning, P/N managed by the listbox pnlistbox in the GUI class        try:            self.item_id = item_id        except NameError:            self.item_id = (1,)            item_id = (1,)        self.session_started = False        self.queue = queue        self.queue_thread_gui = queue_thread_gui        self.project_list = []        self.project_set_list = []        #self.attribute = "CR_implemented_for"        #self.type_cr_workflow = "None"        self.config_selected_id = 1        self.reviewer = "Nobody"        self.default_status = "OK"        # Create widgets        entry_size = 40        ChangeGui.__init__(self)        # Add pages to the notebook.        # Use Pmw megawidget        width = 500        height = 576        #try:        page_parameters = notebook.add('Parameters')        #page_create_cid = notebook.add('Create CID')        page_create_ccb = notebook.add('Generate CCB/CIB')        page_create_checklist = notebook.add('Create Review Report')        #page_check_baseline = notebook.add('Synergy specific commands')        page_synergy_cli = notebook.add('Synergy Easy Command Line Interface')        page_check_llr = notebook.add('Checker')        page_output = notebook.add('Output')        self.log("Create build_parameters_folder",False)        self.build_parameters_folder(page_parameters, **kwargs)        # Build SQA checklist folder in the notebook        self.log("Create build_checklist_folder",False)        self._build_checklist_folder(page_create_checklist, **kwargs)        self.log("Create build_ccb_folder",False)        top = Frame(page_create_ccb)        top_frame = self.build_cid_folder(top,img_display='normal')        top_frame.pack(anchor=NW,side=LEFT)        ccb_right = self._build_ccb_folder(top,img_display='normal')        ccb_right.pack()        top.pack()        list_cr_frame = self._build_list_cr_frame(page_create_ccb)        list_cr_frame.pack(anchor=W,                           fill=BOTH)        # Build Synergy CLI folder in the notebook        self.log("Create synergy_cli",False)        self._synergy_cli(page_synergy_cli,                          width=width,                          height=height,                          **kwargs)        # Fill reviews list        # Check        self.log("Create check_folder",False)        self.build_check_folder(page_check_llr)        self.log("Create displayOutput",False)        #for key in kwargs:        #    self.__dict__[key] = kwargs[key]        self.displayOutput(page_output)        # Important pour que le notebook ai la taille du frame        self.log("setnaturalsize",False)        notebook.setnaturalsize()        #except AttributeError,e:        #    print "AttributeError",e        self.active_release_var = False        self.domain_reference = "SACR"    def cb_skip_change_synergy(self):        print "variable 'Skip Change Synergy check' is", self.skip_change_synergy_var.get()    def _setPreviousRelease(self, event=""):        '''        Set detected on parameter for change request query        '''        self.previous_release = self.previous_release_entry.get()        self.detect_release = self.previous_release        text = "Filter Change requests detected on "        if self.previous_release == "":            text += "all releases "        else:            text += " release " + self._splitComma(self.previous_release)        # self.detect_cr.configure(text=text)        self.log(text)        self.defill()    def hidepage(self, notebook, pageName):        ##        pass        """New method hidepage"""        # hide is not possible if only one page present        if len(notebook._pageNames) == 1:            return        pageInfo = notebook._pageAttrs[pageName]        ##        print "pageInfo",pageInfo        # attribute visible does not exist in PMW v1.3.0        ##        # return, if already hidden        ##        if pageInfo['visible'] == 0:        ##            return        ##        ##        pageInfo['visible'] = 0        pageIndex = notebook.index(pageName)        if pageIndex == 0:            newTopIndex = 1        else:            newTopIndex = 1  #pageIndex - 1        if newTopIndex >= 0:            newTopPage = notebook._pageNames[newTopIndex]            notebook.selectpage(newTopPage)        if notebook._withTabs:            notebook._pending['tabs'] = 1            notebook._layout()        ##    def select_item(self, event):        ##        ''' select item and enable OK button to goto the next popup window'''        ##        item_id = self.itemslistbox.curselection()        ##        self.item_id = item_id    def changeColour(self, colour):        print colour    ##        self.listbox_txt.configure(background = colour)    def _synergy_cli(self,                     page,                     width=500,                     height=576,                     **kwargs):        Frame.__init__(self, page, width=width, height=height, relief=GROOVE, **kwargs)        self.pack(fill=BOTH, expand=1)        # command        row_index = 1        command_frame = LabelFrame(self, text='Synergy command input:', bd=0)        command_frame.pack(fill=BOTH, expand=1, ipadx=5, ipady=5)        command_frame.pack(ipadx=5, ipady=5)        self.command_txt = Text(command_frame, wrap=WORD, height=10)        self.command_txt.pack(fill=X, expand=1,anchor=N)        self.command_txt.pack(anchor=N)        if 0==1:            command_ex = Text(command_frame, fg=foreground, bg="grey", height=10)            command_ex.insert(END, 'Examples:\n=========\n')            command_ex.insert(END, 'task -u -qu -rel SW_PLAN/01 -f "%displayname %status %task_synopsis"\n')            command_ex.insert(END, 'task -show objects 602\n')            command_ex.insert(END, 'task -show info 21\n')            command_ex.insert(END, 'task -show change_request 68\n')            command_ex.insert(END,                              'query "is_child_of(\'SwRD-1.4:dir:2\', cvtype=\'project\' and name=\'SW_ENM\' and version=\'3.6\')"\n')            command_ex.insert(END,                              'query -sby name -ch -n "SQAP_SW_PLAN_PQ 0.1.0.155.docx" -release SW_PLAN/01 -f "%name %version %task %task_synopsis %change_request %change_request_synopsis"\n')            command_ex.insert(END,                              'query -sby name -ch -n *.* -release A267/11  -f "%name %version %modify_time %status %task %change_request"\n')            command_ex.insert(END, 'dir SW_PLAN_WDS\PSAC@SW_PLAN_WDS:doc\n')            command_ex.insert(END,                              'baseline -c SW_PLAN_SQA_01_01 -d "Create planning review baseline" -r SW_PLAN/01 -purpose "For planning review actions tracking" -p SW_PLAN_SQA-1.0')            command_ex.pack(fill=X, expand=1)        # send command        button_send_cmd = Button(command_frame, text='Execute', command=self.click_send_cmd)        button_send_cmd.pack(side=RIGHT, fill=X, padx=5)        # Build checklist folder in the notebook        self.log("Create check_baseline_folder",False)        bottom_frame = Frame(self)        bottom_frame.pack()        self._check_baseline_folder(bottom_frame,                                    width=width,                                    height=height,                                    **kwargs)    def _build_sqap_folder(self, page, **kwargs):        global entry_size        global project_item        self.item = project_item        # Create top frame, with scrollbar and listbox        Frame.__init__(self, page, width=500, height=576, relief=GROOVE, **kwargs)        self.pack(fill=BOTH)        row_index = 1        # Description of the selected project        self.project_description_pg2 = Label(self, text="Project:", fg=foreground)        self.project_description_pg2.grid(row=row_index, sticky='E')        self.project_description_entry_pg2 = Entry(self, width=entry_size)        self.project_description_entry_pg2.insert(END, self.getItemDescription(project_item))        self.project_description_entry_pg2.grid(row=row_index, column=1, sticky='E')        # Author        row_index = row_index + 1        self.author_txt_pg2 = Label(self, text='Author:', fg=foreground)        self.author_txt_pg2.grid(row=row_index, sticky='E')        self.author_entry_pg2 = Entry(self, state=NORMAL, width=entry_size)        self.author_entry_pg2.insert(END, self.author)        self.author_entry_pg2.grid(row=row_index, column=1, sticky='E')        reference, revision, status = self.getDocInfo(project_item)        # Reference        row_index = row_index + 1        self.reference_txt_pg2 = Label(self, text='Reference:', fg=foreground)        self.reference_entry_pg2 = Entry(self, state=NORMAL, width=entry_size)        self.reference_entry_pg2.insert(END, reference)        self.reference_txt_pg2.grid(row=row_index, sticky='E')        self.reference_entry_pg2.grid(row=row_index, column=1, sticky='E')        # Revision        row_index = row_index + 1        self.revision_txt_pg2 = Label(self, text='Issue:', fg=foreground)        self.revision_entry_pg2 = Entry(self, state=NORMAL, width=entry_size)        self.revision_entry_pg2.insert(END, revision)        self.revision_txt_pg2.grid(row=row_index, sticky='E')        self.revision_entry_pg2.grid(row=row_index, column=1, sticky='E')        # Status        row_index = row_index + 1        self.status_txt = Label(self, text='Status:', fg=foreground)        self.status_entry = Entry(self, state=NORMAL, width=entry_size)        self.status_entry.insert(END, status)        self.status_txt.grid(row=row_index, sticky='E')        self.status_entry.grid(row=row_index, column=1, sticky='E')        # Build        row_index = row_index + 1        self.button_select_pg2 = Button(self, text='Build', state=NORMAL, command=self.click_build_sqap)        self.button_select_pg2.grid(row=row_index, column=1, pady=5, sticky='E')        # Modifications log        modification_log_text = self.getLastModificationLog(reference)        modif_log_frame = Frame(page, bg='#80c0c0')        modif_log_frame.pack()        scrollbar = Scrollbar(modif_log_frame)        page.bind('<MouseWheel>', self.log_scrollEvent)        scrollbar.pack(side=RIGHT, fill=Y)        self.modif_log_label = Label(modif_log_frame, text='Modifications log:', fg=foreground)        self.modif_log_label.pack(fill=X);        self.modif_log = Text(modif_log_frame, wrap=WORD, yscrollcommand=scrollbar.set, width=100, height=10)        self.modif_log.pack()        scrollbar.config(command=self.modif_log.yview)        self.modif_log.insert(END, modification_log_text)    def click_get_baseline_status(self):        self.queue.put("GET_BASELINE_STATUS")        self.queue.put(self.baseline)        self.click_clear()    def click_get_release_status(self):        self.queue.put("GET_RELEASE_INFO")        self.queue.put(self.release)        self.click_clear()    def press_preview_cr_query(self, event):        ''' get preview of CR query for testing purpose            CTRL + p'''        self.queue.put("PREVIEW_CR_QUERY")  # order to read session status    def press_read_session_status(self, event):        ''' Read status of synergy session            CTRL + t '''        self.queue.put("READ_STATUS")  # order to read session status    def press_close_session(self, event):        ''' Close synergy session            CTRL + w'''        self.queue.put("CLOSE_SESSION")  # order to read session status    def press_ctrl_s(self, event):        ''' Read items and give scope            CTRL + s '''        self.queue.put("SCOPE")        self.queue.put(self.release)        self.queue.put(self.project)        self.queue.put(self.baseline)    def press_start_apache(self, event):        ''' Launch apache session            CTRL + H '''        self.queue.put("START_APACHE")        config = "httpd_ece.conf"        self.apache_start(config)        pass    def getActive(self):        return self.active_release_var    def cb_active_release(self,checkbutton):        active = checkbutton.get()        print "variable 'Active released' is", active        if active == 1:            self.active_release_var = True        else:            self.active_release_var = False    def cb_software_release_only(self,checkbutton):        sw_only = checkbutton.get()        print "variable 'SW release only' is", sw_only        if sw_only == 1:            self.release_regexp = "^SW_(.*)/(.*)$"        else:            self.release_regexp = ""        self.regexp_entry.delete(0, END)        self.regexp_entry.insert(END, self.release_regexp)    def filterSWRelease(self):        if self.release_regexp == "^SW_(.*)/(.*)$":            sw_only = True        else:            sw_only = False        return sw_only    def __del__(self):        # kill threads        pass    def click_event(self, event):        self.listbox.activate("@%d,%d" % (event.x, event.y))        index = self.listbox.index("active")        self.select(index)        self.on_select(index)        return "break"    def double_click_event(self, event):        index = self.listbox.index("active")        self.select(index)        self.on_double(index)        return "break"    menu = None    def select_attribute(self, event):        index = self.attributes_set_box.curselection()        if index in (0, ()):            self.attribute = ""        else:            self.attribute = interface.attributes_set_box.get(index)        self.log("Selected CR filter attribute: " + self.attribute, False)    def setCR_Type(self,cr_type):        self.cr_type = cr_type    def updateCR_Type(self,                      system="",                      item=""):        if system == "":            system = self.system        if item == "":            item = self.item        cr_type = self._getItemCRType(item,                                      system)        if cr_type is not None:            self.setCR_Type(cr_type)            self.updateCR_TypeEntry(cr_type)            # As it is related to a board            if hasattr(self, 'ccb_var_type'):                #print "Set ccb_var_type to SACR"                self.ccb_var_type.set("SACR")            else:                # Notebook CCB folder not yet created                # Abnormal situation                print "Notebook CCB folder not yet created. Abnormal situation."            if hasattr(self, 'cid_var_type'):                #print "Set cid_var_type to ECMR"                self.cid_var_type.set("CID")            else:                # Notebook CID folder not yet created                # Abnormal situation                print "Notebook CID folder not yet created. Abnormal situation."        else:            print "CR type is None"            print "Item:",item            print "System:",system            self.setCR_Type("")            self.updateCR_TypeEntry("")    def select_item(self, event):        """        Called by Interface GUI to select item (board, LRU)        :param event:        :return:        """        item_id = self.itemslistbox.curselection()        self.item_id = item_id        if item_id != () and '0' not in item_id:            self.item = self.itemslistbox.get(item_id)            description = self.getItemDescription(self.item)            self.domain_reference = "SACR"            self.ccb_type("SACR")            self.cid_type()            #self.updateCR_Type(self.system,            #                   self.item)            self.log("Selected item: {:s}: {:s}".format(self.item, description))            self.log("Selected CR type: {:s}".format(self.cr_type))            # Re populate components_listbox            components_list = self.populate_components_listbox_wo_select(self.componentslistbox,                                                                         self.item,                                                                         self.system)            #part_number = self.part_number_entry.get()            #if part_number == "":            pn = self.getItemPartNumber(self.item)            dico = {"board_part_number":"{:s}LnnnnYnn".format(pn)}            self.updateField(self.board_part_number_entry, dico, "board_part_number")            dico = {"part_number":""}            self.updateField(self.part_number_entry, dico, "part_number")        else:            self.log("No specific item selected")            self.item = ""            self.setCR_Type("")            self.updateCR_TypeEntry("")            dico = {"board_part_number":""}            self.updateField(self.board_part_number_entry, dico, "board_part_number")            components_list = self.populate_components_listbox_wo_select(self.componentslistbox, "", self.system)        # Reset component selection        self.componentslistbox.selection_set(first=0)        cr_type = self._getItemCRType(self.item,                                      self.system)        if cr_type is not None:            self.setCR_Type(cr_type)            self.updateCR_TypeEntry(cr_type)        self.defill()    def updateCR_TypeEntry(self,cr_type):        self.cr_type_entry.configure(state='normal')        self.cr_type = cr_type        self.cr_type_entry.delete(0, END)        self.cr_type_entry.insert(END, cr_type)        if cr_type != "":            # Locked            self.cr_type_entry.configure(state='readonly')        else:            pass            # Attention: self.list_cr_type = []    def select_component(self, event):        ''' select component'''        component_id = self.componentslistbox.curselection()        print "COMPNENT_ID",component_id        if component_id != () and '0' not in component_id:            self.component = self.componentslistbox.get(component_id)            # Refresh review reports            #self.click_refresh_list()            description = self.getComponentDescription(self.component)            cr_type = self._getComponentCRType(self.component)            if cr_type is not None:                self.updateCR_TypeEntry(cr_type)                m = re.match("^(SW|PLD)_(.*)", cr_type)                if m:                    print "select_component cr_type",cr_type                    if m.group(1) == "SW":                        #self.hideHCMR()                        #self.displaySwDeliverySheetButton()                        self.ccb_type("SCR")                        self.domain_reference = "SW"                    elif m.group(1) == "PLD":                        #self.displayHCMR()                        #self.hideSwDeliverySheetButton()                        #self.ccb_var_type.set("PLDCR")                        self.ccb_type("PLDCR")                        #self.forceCCBType("PLDCR")                        #self.cid_var_type.set("HCMR")                        #self.hcmr_var_type.set("HCMR_PLD")                        self.domain_reference = "PLD"                    self.cid_type()                self.log("Selected component: {:s}: {:s}".format(self.component, description))                self.log("Selected CR type: {:s}".format(self.cr_type))            else:                self.domain_reference = ""                self.log("Selected component: {:s}: {:s}".format(self.component, description))                self.log("No CR type found.")            # Component Part Number            pn = self.getComponentPartNumber(self.component)            dico = {"part_number":"ECEcc-{:s}-vvrr".format(pn)}            self.updateField(self.part_number_entry, dico, "part_number")            # Component Part Number            board_pn = self.getComponentBoardPartNumber(self.component)            dico = {"board_part_number":"{:s}LnnnnYnn".format(board_pn)}            self.updateField(self.board_part_number_entry, dico, "board_part_number")        else:            self.log("No specific component selected")            self.component = ""            # Use item selection to update CR type            item_id = self.itemslistbox.curselection()            if item_id != () and '0' not in item_id:                self.item = self.itemslistbox.get(item_id)                #self.updateCR_Type(self.system,                #                self.item)                self.ccb_type("SACR")                self.domain_reference = "SACR"            else:                self.ccb_type()                self.clearCR_Type()                self.domain_reference = ""            self.cid_type()            dico = {"part_number":""}            # Reset component selection            self.updateField(self.part_number_entry, dico, "part_number")            if self.item != "":                cr_type = self._getItemCRType(self.item,                                              self.system)            else:                cr_type = ""            if cr_type is not None:                self.setCR_Type(cr_type)                self.updateCR_TypeEntry(cr_type)        self.defill()    def clearCR_Type(self):        self.cr_type = ""        self.cr_type_entry.delete(0, END)    def double_click_system(self, event):        pass    def list_items(self):        self.queue.put("LIST_ITEMS")  # action to get items according to release or project        self.queue.put(self.release)        self.queue.put(self.project)        self.queue.put(self.baseline)    def _find_release_vs_baseline(self):        self.queue.put("GET_RELEASE_VS_BASELINE")  # action to get releases        self.queue.put((self.baseline))        self.click_clear()    def updateReleaseListBox(self,output):        self.log("Available release found:")        self.queue_thread_gui.put("release")        self.queue_thread_gui.put(output)    def noneReleaseListBox(self):        self.log(" No available releases found.")        self.queue_thread_gui.put("no_release")    def updateBaselineListBox(self,output):        self.log("Available baseline found:")        self.queue_thread_gui.put("baseline")        self.queue_thread_gui.put(output)    def noneBaselineListBox(self):        self.log(" No available baselines found.")        self.queue_thread_gui.put("no_baseline")    def updateProjectListBox(self,output):        #self.log("Available baseline found:")        self.queue_thread_gui.put("project")        self.queue_thread_gui.put(output)    def noneProjectListBox(self):        #self.log(" No available baselines found.")        self.queue_thread_gui.put("no_project")    def reloadCR_ListBox(self,list):        self.queue_thread_gui.put("reload_crlistbox")        self.queue_thread_gui.put(list)    def preview_CR_Query(self):        self.queue_thread_gui.put("preview_cr_query")    def getUserCmd(self):        self.queue_thread_gui.put("read_user_cmd")    def displayEOC_Info(self,data):        self.queue_thread_gui.put("eoc_info")        self.queue_thread_gui.put(data)    def resultGenerateCID(self,                          docx_filename,                          exception,                          text=""):        self.queue_thread_gui.put("end_cid_built")        self.queue_thread_gui.put(docx_filename)        self.queue_thread_gui.put(exception)        self.queue_thread_gui.put(text)    def displayResultGenerateCID(self,                                 docx_filename,                                 exception,                                 text="DOCUMENT"):        if "SESSION" in text:            generation = ""        else:            generation = " GENERATION"        if not docx_filename:            self.success.config(fg='yellow',                                bg = 'red',                                text="{:s}{:s} FAILED".format(text,generation))            if exception is not None:                self.log(exception.strerror + ", document not saved.\n")            self.defill()        else:            print "text",text            if ("CONFIG" in text) or \                    ("CHANGE" in text) or \                    ("LISTING" in text) or \                    ("USER" in text) or \                    ("INSPECTION" in text):                print "Open result window"                window = Toplevel()                window.iconbitmap("ico_sys_desktop.ico")                window.title("Download document")                window.resizable(False,False)                window.grab_set()                window.focus_set()                last_pane = Frame(window, padx=20, pady=30)                last_pane.pack()                cid_word_img_can = Canvas(last_pane, width=128, height=128, highlightthickness=0)                try:                    if ("LISTING" in text) or ("INSPECTION" in text):                        #image_file = "img/file_doc.gif"                        image_file = "img/Excel2007.gif"                    elif "CONFIG" in text:                        image_file = "img/kfm.gif"                    elif "CHANGE" in text:                        image_file = "img/120px-OfficeWord.gif"                    elif "USER" in text:                        image_file = "img/file_doc.gif"                    else:                        image_file = "img/kfm.gif"                    bitmap = PhotoImage(file=image_file)                    print 'bitmap'                    cid_word_img = cid_word_img_can.create_image(64, 64, image=bitmap)                    cid_word_img_can.bitmap = bitmap                    cid_word_img_can.pack(fill=Y)                    cid_word_img_can.bind("<Double-Button-1>", lambda event,arg=window: self.openCID(event,arg))                    cid_word_img_can.itemconfigure(cid_word_img, state='normal')                except TclError as exception:                    print "TCL error:", exception                #self.cid_word_img_can.itemconfigure(self.cid_word_img,state='normal')           # elif "CHANGE" in text:           #     self.ccb_word_img_can.itemconfigure(self.ccb_word_img,state='normal')            else:                pass            self.success.config(fg='magenta',                                bg = 'green',                                text="{:s}{:s} SUCCEEDED".format(text,generation))            # Create hyperlink            if generation != "" and docx_filename is not None:                self.displayHyperlink("hlink",docx_filename,"{:s} in Word format.".format(text))        self.docx_filename = docx_filename        #self.cr_activate_all_button()        print "end displayResultGenerateCID"    def resultStartSession(self,stdout,stderr):        self.queue_thread_gui.put("start_session")        self.queue_thread_gui.put(stdout)        self.queue_thread_gui.put(stderr)    def sayNoDatabase(self):        self.queue_thread_gui.put("no_database")    def displaySynergyQuery(self,query):        self.log('ccm ' + query)        self.defill()    def log(self,            text="",            display_gui=True,            color=""):        '''        Log messages        '''        self.loginfo.info(text)        ##        print time.strftime("%H:%M:%S", time.localtime()) + " " + text        if display_gui:            text = re.sub(r"\r", r"", text)            if color == "":                self.queue_thread_gui.put("simple")                self.queue_thread_gui.put(text)                #self.general_output_txt.insert(END, time.strftime("%H:%M:%S", time.localtime()) + " " + text + "\n")            else:                self.queue_thread_gui.put("color")                self.queue_thread_gui.put(text)                self.queue_thread_gui.put(color)                #self.general_output_txt.tag_configure("color", foreground=color)                #self.general_output_txt.insert(END, time.strftime("%H:%M:%S", time.localtime()) + " " + text + "\n", "color")        else:            print text    def defill(self):        self.general_output_txt.see(END)    def logrun(self, text, display_gui=True):        '''        Log messages        '''        self.loginfo.info(text)        if display_gui:            self.general_output_txt.insert(END, time.strftime("%H:%M:%S", time.localtime()) + " " + text)    def __find_partnumber(self):        # Display part numbers        if self.standard != "":            if self.dico_list_pn != {}:                self.pnlistbox.delete(0, END)                if self.standard != "All":                    self.pnlistbox.insert(END, "All")                    if self.dico_std_vs_pn.has_key(self.standard):                        if self.dico_list_stdac_vs_pn.has_key(self.standard):                            self.current_list_partnumber = self.dico_list_stdac_vs_pn[self.standard]                        else:                            self.current_list_partnumber = self.dico_std_vs_pn[self.standard]                        ##                        print self.current_list_partnumber                        for pn in self.current_list_partnumber:                            self.pnlistbox.insert(END, pn)                else:                    self.current_list_partnumber = self.dico_list_pn.keys()                    self.display_partnumber()                self.find_releases()                self.pnlistbox.configure(bg="white")                self.pnlistbox.selection_set(first=0)    def getBaseline(self):        '''        Get baseline which may be:            - A standard            - A Part Number            - A Synergy release        '''        return (self.baseline_change)    def select_standard(self, event):        '''        Select standard        Find related Part number        Display baseline to applied for Change query        '''        index = self.stdlistbox.curselection()        if index in (0, ()):            self.standard = ""            self.partnumber = ""            self.log("All standards selected")        else:            self.standard = self.stdlistbox.get(index)            self.partnumber = "All"            if self.standard == "All":                self.log("All standards selected")            else:                self.log("Standard selected: " + self.standard)        self.general_output_txt.see(END)        self.__find_partnumber()        self.setBaseline(self.standard)    def select_partnumber(self, event):        '''        Select part number        Find related Synergy release        Display baseline to applied for Change query        '''        index = self.pnlistbox.curselection()        if index == 0 or index == ():            self.partnumber = ""            self.log("All Part Numbers selected")        else:            self.partnumber = self.pnlistbox.get(index)            if self.partnumber == "All":                self.log("All Part Numbers selected")            else:                self.log("Part Number selected: " + self.partnumber)        self.general_output_txt.see(END)        self.find_releases()        self.setBaseline(self.partnumber)    def make_menu(self):        menu = Menu(self.listbox, tearoff=0)        self.menu = menu        self.fill_menu()    def log_scrollEvent(self, event):        ##        print event.delta        if event.delta > 0:            ##            print 'd�placement vers le haut'            self.general_output_txt.yview_scroll(-2, 'units')        else:            ##            print 'd�placement vers le bas'            self.general_output_txt.yview_scroll(2, 'units')    def log_upEvent(self, event):        ##        print event.delta        ##        print 'd�placement vers le haut'        self.general_output_txt.yview_scroll(-2, 'units')    def log_downEvent(self, event):        ##        print event.delta        ##        print 'd�placement vers le bas'        self.general_output_txt.yview_scroll(2, 'units')    def click_clear(self):        self.general_output_txt.delete(0.0, END)    def click_quit(self):        global thread_build_docx        if tkMessageBox.askokcancel("Quit", "Do you really want to quit now?"):            if isinstance(thread_build_docx, ThreadQuery):                thread_build_docx.stopSession()                ##                if self.item != "":                ##                    context = self.item                ##                else:                context = self.system                thread_build_docx.storeSelection(self.project, context, self.release, self.baseline)            ##            else:            ##            self.storeSelection(self.project,thread_build_docx.item,self.release,self.baseline)            ##            if queue.empty():            ##                print "QUEUE EMPTY"            ##            else:            ##                print "QUEUE NOT EMPTY"            ##            queue.join()            self.destroy()            fenetre.destroy()    def click_logout(self):        if tkMessageBox.askokcancel("Log out", "Do you really want to log out?"):            thread_build_docx.stopSession()            thread_build_docx.storeSelection(self.project, thread_build_docx.system, self.release, self.baseline)            self.destroy()            fenetre.destroy()    def click_cancel_build_cid(self):        global cancel_build        cancel_build = True        print "Abort CID generation."    def getCIDType(self):        """        according to cid_var_type (SCI/HCMR) and hcmr_var_type (HCMR_PLD/HCMR_BOARD)        :return: SCI, HCMR_PLD, HCMR_BOARD or ECMR        """        cid_type = self.cid_var_type.get()        if cid_type == "HCMR":            if self.hcmr_var_type.get() == "HCMR_PLD":                cid_type = "HCMR_PLD"            elif self.hcmr_var_type.get() == "HCMR_BOARD":                cid_type = "HCMR_BOARD"        return cid_type    def click_send_cmd(self):        '''        Function which put SEND_CMD in the queue        to execute Synergy CLI command written in        the Synergy command text area        '''        self.queue.put("SEND_CMD")  # order to send synergy CLI        self.click_clear()    def click_build_sqap(self):        '''        Function which put        - author        - reference        - revision        into the queue        called when the user press the Build button        '''        # Get author        author = self.author        # Get reference        reference = self.reference_entry_pg2.get()        if reference == "":            reference = "TBD"        # Get revision        revision = self.revision_entry_pg2.get()        if revision == "":            revision = "TBD"        self.queue.put("BUILD_SQAP")  # order to build docx        self.queue.put([author, reference, revision])class Console(Interface, Tool):    def getTypeWorkflow(self):        return False    def defill(self):        pass    def log(self, text, display_gui=False):        Interface.log(self, text, False)    def _readConfig(self):        Interface._readConfig(self)    def __init__(self, master, queue, system, item, **kwargs):        global item_id        ##        self.tk = master        self.std_exists = False        self.current_list_partnumber = []        self.dico_std = {}        self.checkbutton_all = False        # read config file        self.default_template_type = "SCI"        self.reference = ""  #"ET1234-V"        self.revision = ""  #"1D1"        self.release = ""        self.baseline_change = ""        self.baseline = ""        self.previous_baseline = ""        self.project = ""        # Read config        self._readConfig()        # Set logging        self.loginfo = logging.getLogger(__name__)        if self.verbose == "yes":            out_hdlr = logging.FileHandler(filename='docid_cli.log')        else:            out_hdlr = logging.StreamHandler(sys.stdout)        out_hdlr.setFormatter(logging.Formatter('%(asctime)s %(message)s'))        out_hdlr.setLevel(logging.INFO)        self.loginfo.addHandler(out_hdlr)        self.loginfo.setLevel(logging.INFO)        self.loginfo.debug("NO")        self.system = system        self.item = item        self.cr_type = ""        # Get        #       - Database        #       - Aircraft        #        if self.item != "":            self.database, self.aircraft = self.get_sys_item_database(self.system, self.item)            if self.database == None:                self.database, self.aircraft = self.get_sys_database()        else:            self.database, self.aircraft = self.get_sys_database()        self.standard = ""        self.partnumber = ""  # Warning, P/N managed by the listbox pnlistbox in the GUI class        ##        self.board_part_number = ""        self.item_id = item_id        self.session_started = False        self.queue = queue        self.project_list = []        self.project_set_list = []        self.attribute = "CR_implemented_for"        ##        self.release_list = []        ##        self.baseline_list = []        self.type_cr_workflow = "None"class Gui(Interface):    '''    Display the bottom of the GUI which is generic for all notebooks.    '''    docx_filename = ""    def __init__(self,                 master,                 queue,                 system="",                 item="",                 queue_thread_gui=None,                 login=""):        """        Init of Gui class        :param master:        :param queue:        :param system:        :param item:        :param queue_thread_gui:        :return:        """        Tool.__init__(self)        self.queue = queue        self.root = master        # notebook        self.notebook = Pmw.NoteBook(master)        self.notebook.pack(fill='both', expand=1, padx=10, pady=2)        # ccb_var_type define which CR domain is used        #self.ccb_var_type = StringVar()        #self.ccb_var_type.set("PLDCR")  # initialize        # cid_var_type define which CID is to be built        #self.cid_var_type = StringVar()        #self.cid_var_type.set("HCMR_PLD")        # Specific high panels        Interface.__init__(self,                           self.notebook,                           queue,                           system,                           item,                           queue_thread_gui=queue_thread_gui,                           ihm=master,                           login=login)        # Focus on a notebook        print "Interface init done"        self.notebook.tab('Parameters').focus_set()        self.updateCR_Type(system,item)        # Bottom common panel        # progress bar        progress_bar_frame = Frame(master, width=200, height=10)        progress_bar_frame.pack(ipadx=5, ipady=10)        if 0==1:            self.progress = ttk.Progressbar(progress_bar_frame, orient='horizontal', mode='determinate',length = 200)            self.progress["maximum"] = 500            self.progress["value"] = 400            self.progress.pack(expand=True, fill=BOTH, padx=10,pady=10, side=LEFT)        # self.pb_vd.pack_forget()        self.success = Label(progress_bar_frame, text='', fg='red', width=150)        self.success.pack(expand=True, fill=BOTH, padx=5, pady=10, side=LEFT)        # Quit        self.button_quit = Button(progress_bar_frame, text='Quit', command=self.click_quit)        self.button_quit.pack(side=RIGHT, padx=0, pady=10)        self.click_set_user_config_flag_on = False        self.click_open_relbaspro_flag_on = False        print "End GUI notebook definition"        # End GUI notebook definition    def onLink(self, event):        event.widget.configure(cursor="arrow")    def outsideLink(self, event):        event.widget.configure(cursor="xterm")    def documentation(self):        doc_html_filename = join("html","index.html")        #doc_html_filename = join("_build",doc_html_filename)        #doc_html_filename = join("doc",doc_html_filename)        os.startfile(doc_html_filename)    def help(self):        self.help_window = Toplevel()        self.help_window.iconbitmap("ico_sys_desktop.ico")        self.help_window.title("Help")        self.help_window.resizable(False, False)        self.help_window.grab_set()        self.help_window.focus_set()        help_frame = Frame(self.help_window, bg='#80c0c0')        help_frame.pack()        scrollbar = Scrollbar(help_frame)        #self.help_window.bind('<MouseWheel>', self.scrollEvent)        scrollbar.pack(side=RIGHT, fill=Y)        self.help_text = CustomText(help_frame, wrap=WORD, width=140, height=30)        self.help_text.configure(yscrollcommand=scrollbar.set)        scrollbar.config(command=self.help_text.yview)        self.help_text.tag_configure("rose",foreground="#ff6666")        self.help_text.tag_configure("blue",foreground="#00A")        self.help_text.tag_configure("green",foreground="#D00")        self.help_text.tag_configure("red",foreground="#0D0")        self.help_text.tag_configure("light_grey",foreground="#DDD")        self.refreshFrame('README.txt', self.help_text)        self.help_text.HighlightPattern("\[[a-zA-Z]*\]", "green",regexp=True)        self.help_text.HighlightPattern("\*\*(\w+)\*\*", "blue",regexp=True)        self.help_text.HighlightPattern("\w+(\[\])*(?=\s*=)", "rose",regexp=True)        self.help_text.HighlightPattern("\"(\w+)\"", "red",regexp=True)        self.help_text.HighlightPattern(";.*", "light_grey",regexp=True)        self.help_text.pack()        bou1 = Button(self.help_window, text='Quit', command=self.help_window.destroy)        bou1.pack(side=RIGHT)        self.help_window.mainloop()    def scrollEvent(self, event):        if event.delta > 0:            # deplacement vers le haut            self.help_text.yview_scroll(-2, 'units')        else:            # deplacement vers le bas            self.help_text.yview_scroll(2, 'units')    def about(self):        tkMessageBox.showinfo(            "do Configuration Index Document",            "doCID " + VERSION + ": \n\nGenerate:\n - Configuration Index Document\n"                                 " - Change Control Board report\n"                                 " - Inspection Sheets from specifications \n"                                 " - Review report\n\n "                                 "Written by Olivier Appere\n\n"                                 "Mail: olivier.appere@zodiacaerospace.com\n"                                 "Tel: 01 55 82 51 04\n\n"                                 " (c) Copyright 2013-2015")    def intranet(self):        self.queue.put("EASY_IG")    def check_for_update(self):        # Check for update        self.queue.put("CHECK_UPDATE")    def get_qa_action_items(self):        # get QA action items        name,mail,tel,service,qams_user_id = self.get_user_infos(self.login)        url = "http://{:s}/qams/atomik/index.php?action=export/export_docid_actions_list&user_id={:d}".format(self.qams_server_ip,qams_user_id)        #self.log("Get QA action items for {:s} user.".format(name))        #self.log("URL: {:s}".format(url))        self.displayHyperlink(hyperlink_tag="hlink_qams",                              filename=url,                              text="Get QA action items for {:s} user.".format(name))        self.queue.put("GET_QA_ACTIONS")        self.queue.put(self.qams_server_ip)    def getBPROC_Procedure(self,title="Read B-PROC procedure",ext=('.bproc','.xml')):        # open dialog window        # get filename        filename = tkFileDialog.askopenfilename(defaultextension = ext[0],                                                filetypes=[('xml files',ext[0]),('xml files',ext[1])],                                                initialdir=self.initialdir,                                                title=title)        # New value for default initial directory        self.initialdir = os.path.dirname(filename)        return filename    def read_bproc(self):        self.click_clear()        self.success.config(fg='red',bg = 'yellow',text="B-PROC MAKEFILE READING IN PROGRESS")        bproc_filename = self.getBPROC_Procedure()        html_name = Tool.extractName(bproc_filename)        self.log("Read B-PROC procedure {:s}.".format(html_name))        self.queue.put("READ_BPROC")        self.queue.put(bproc_filename)    def read_gproc(self):        self.click_clear()        self.success.config(fg='red',bg = 'yellow',text="G-PROC MAKEFILE READING IN PROGRESS")        bproc_filename = self.getBPROC_Procedure(ext=(".gproc",".xml"),title="Read G-PROC procedure")        html_name = Tool.extractName(bproc_filename)        self.log("Read G-PROC procedure {:s}.".format(html_name))        self.queue.put("READ_GPROC")        self.queue.put(bproc_filename)    def read_rtp(self):        self.click_clear()        self.success.config(fg='red',bg = 'yellow',text="RTRT RTP MAKEFILE READING IN PROGRESS")        filename = self.getBPROC_Procedure(ext=(".rtp",".xml"),title="Read RTRT RTP procedure")        html_name = Tool.extractName(filename)        self.log("Read RTRT RTP procedure {:s}.".format(html_name))        self.queue.put("READ_RTP")        self.queue.put(filename)    def read_rod(self):        tkMessageBox.showinfo("Not implemented yet.")    def read_eoc(self):        self.click_clear()        self.success.config(fg='red',bg = 'yellow',text="EXECUTABLE OBJECT CODE READING IN PROGRESS")        eoc_filename = self.getBPROC_Procedure(ext=(".hex",".srec"),title="Read EOC file")        html_name = Tool.extractName(eoc_filename)        self.log("Read EOC file {:s}.".format(html_name))        self.queue.put("READ_EOC")        self.queue.put(eoc_filename)    def go_change(self):        url = "http://spar-syner1.in.com:8600/change"        webbrowser.open(url)    def _displayRelease(self, baseline_frame, release):        baseline_label = Label(baseline_frame,                               text='Standard/Part Number/Release applied:')        baseline_label.pack(side=LEFT)        if release != "":            self.baseline_txt = Label(baseline_frame, text=release)            self.button_select.configure(state=NORMAL)            self.button_list_history.configure(state=NORMAL)            self.button_list_items.configure(state=NORMAL)            self.button_list_tasks.configure(state=NORMAL)        else:            self.baseline_txt = Label(baseline_frame, text="None")        self.baseline_txt.pack()    def _displayBaseline(self, baseline_frame, baseline):        baseline_synergy_label = Label(baseline_frame, text='Baseline applied:')        baseline_synergy_label.pack(side=LEFT)        if baseline != "":            self.baseline_synergy_txt = Label(baseline_frame, text=baseline)            self.button_list_tasks.configure(state=NORMAL)            self.button_list_items.configure(state=NORMAL)        else:            self.baseline_synergy_txt = Label(baseline_frame, text="None")        self.baseline_synergy_txt.pack()    def _displayProject(self, baseline_frame, project):        project_label = Label(baseline_frame, text='Project applied:')        project_label.pack(side=LEFT)        if project != "":            self.project_txt = Label(baseline_frame, text=project)        else:            self.project_txt = Label(baseline_frame, text="None")        self.project_txt.pack()    def put_in_gui_queue(self,func):        #print "FUNC",func        self.queue_thread_gui.put(func)    def check_queue(self):        #print "go in check_queue"        while self.queue_thread_gui.qsize():            #print "check queue"            try:                param = self.queue_thread_gui.get(0)                #print "PARAM",param                if param == "simple":                    # log                    text = self.queue_thread_gui.get(1)                    self.general_output_txt.insert(END, time.strftime("%H:%M:%S", time.localtime()) + " " + text + "\n")                    self.defill()                elif param == "color":                    # log                    text = self.queue_thread_gui.get(1)                    color = self.queue_thread_gui.get(2)                    self.general_output_txt.tag_configure("color", foreground=color)                    self.general_output_txt.insert(END, time.strftime("%H:%M:%S", time.localtime()) + " " + text + "\n", "color")                    self.defill()                elif param == "start_session":                    stdout = self.queue_thread_gui.get(1)                    stderr = self.queue_thread_gui.get(1)                    if stderr:                        if re.match(r'Another Synergy CLI session is running',stderr):                            self.log("Session already started.")                            # which database is used ?                            #self._getSessionStatus()                            #self.queue.put("READ_STATUS")                            session_started = True                        elif re.match(r'Database protected',stderr):                            self.log(stderr)                            session_started = False                        elif re.match(r'Cannot connect to (the server|router)',stderr):                            self.log(stderr)                            session_started = False                        elif re.match(r'Invalid username or password',stderr):                            self.log("Invalid username or password.")                            session_started = False                        elif re.match(r'Invalid Role',stderr):                            self.log("Invalid Role.")                            session_started = False                        elif re.match(r'The /pw option requires a value',stderr):                            self.log("Password is missing.")                            session_started = False                        elif re.match(r'Wrong path for ccm.exe',stderr):                            self.log("Wrong path for ccm.exe. Check docid.ini file config (Windows XP/Windows 7).")                            session_started = False                        else:                            self.log(stderr)                            session_started = True                    elif stdout:                        print "Session started successfully"                        if 0==1:                            if Tool.isAttributeValid(self.previous_release):                                self.logrun("Previous selected release was: ")                                self.general_output_txt.insert(END, self.previous_release, self._add(self._setRelease))                                self.general_output_txt.insert(END, "\n")                            if Tool.isAttributeValid(self.previous_baseline):                                self.logrun("Previous selected baseline was: ")                                self.general_output_txt.insert(END, self.previous_baseline, self._add(self._setBaseline))                                self.general_output_txt.insert(END, "\n")                            if Tool.isAttributeValid(self.previous_project):                                self.logrun("Previous selected project was: ")                                self.general_output_txt.insert(END, self.previous_project, self._add(self._setProject))                                self.general_output_txt.insert(END, "\n")                        session_started = True                    else:                        session_started = False                    print "session_started"                    if session_started:                        try:                            # CID                            self.button_select.configure(state=NORMAL)                            # SDS                            self.button_create_delivery_sheet.configure(state=NORMAL)                            # Set                            self.button_synergy_keyset.configure(state=NORMAL)                                    data = self.retrieveLastSelection(self.system)                            if data not in([],None):                                print"DATA",data                                if data[0][1] not in (None,""):                                    # delete text                                    self.reference_entry.delete(0, END)                                    self.reference_entry.insert(0, data[0][1])                                if data[0][2] not in (None,""):                                    self.revision_entry.delete(0, END)                                    self.revision_entry.insert(0, data[0][2])                                # Create hyoerlink                                self.previous_release = data[0][6]                                self.previous_baseline = data[0][7]                                self.previous_project = data[0][4]                                self.links = {}                        except AttributeError,e:                            print e                            match_out = re.match(r'^(.*):(.*):([0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3})',stdout)                    if match_out:                        if stderr != "":                            self.log(" " + stderr,False)                        self.log("Computer   => " + match_out.group(1))                        self.log("Session ID => " + match_out.group(2))                        self.log("IP address => " + match_out.group(3))                    else:                        self.log(stdout + stderr,False)                    if not session_started:                        self.displayResultGenerateCID(False,                                                      None,                                                      "SESSION LOGGING")                    else:                        self.displayResultGenerateCID(True,                                                      None,                                                      "SESSION LOGGING")                elif param == "no_database":                    self.log("No database available or bypass mode activated.")                    self.log("Database:" + self.database)                    self.log("Login:"+ self.login)                elif param == "baseline":                    # baselinelistbox                    output = self.queue_thread_gui.get(1)                    self.baselinelistbox.clear() #delete(0, END)                    if len(output) > 1:                        self.baselinelistbox.write("All")                        self.baselinelistbox.begin()                    for line in output:                        line = re.sub(r"^ *[0-9]{1,3}\) ",r"",line)                        self.baselinelistbox.write(line)                        self.baselinelistbox_1.write(line)                        self.baselinelistbox_2.write(line)                        self.log(line)                    self.baselinelistbox.white()                elif param == "no_baseline":                    # baselinelistbox                    self.baselinelistbox.clear() #.delete(0, END)                    self.baselinelistbox.write("None")                    self.baselinelistbox.white()                elif param == "project":                    list_projects = self.queue_thread_gui.get(1)                    if list_projects != []:                        # Update list of project of GUI                        self.projectlistbox.clear()                        if len(list_projects) > 1:                            self.projectlistbox.write("All")                        for project in list_projects:                            self.projectlistbox.write(project)                            self.log( "     " + project)                        if len(list_projects) > 1:                            self.projectlistbox.begin()                        self.projectlistbox.configure(bg="white")                        self.log("Available projects found:")                    else:                        self.log("No available projects found.")                        self.projectlistbox.clear()                        self.projectlistbox.write("None")                        self.projectlistbox.white()                    self.releaselistbox.enable()                    self.button_select.configure(state=NORMAL)                    self.button_create_delivery_sheet.configure(state=NORMAL)                    self.baselinelistbox.enable()                    # Set scrollbar at the bottom                    self.defill()                elif param == "no_project":                    self.log("No available projects found.")                    self.projectlistbox.clear()                    self.projectlistbox.write("None")                    self.projectlistbox.white()                    self.releaselistbox.enable()                    self.button_select.configure(state=NORMAL)                    self.button_create_delivery_sheet.configure(state=NORMAL)                    self.baselinelistbox.enable()                    # Set scrollbar at the bottom                    self.defill()                elif param == "release":                    buffer = self.queue_thread_gui.get(1)                    self.log("Available releases found:")                    self.releaselistbox.clear()                    self.populateReleaseBox(buffer)                     # Set scrollbar at the bottom                    self.defill()                elif param == "no_release":                    self.log("No available releases found.")                    self.resetReleaseListbox()                     # Set scrollbar at the bottom                    self.defill()                elif param == "read_user_cmd":                    print "read_user_cmd"                    cmd_txt = self.command_txt.get(1.0,END)                    output = cmd_txt.splitlines()                    self.queue.put("EXEC_USER_CMD")                    self.queue.put(output)                    self.endCmd("GET USER COMMAND.")                elif param == "preview_cr_query":                    self.endCmd("PREVIEW CHANGE REQUEST QUERY.")                    dico = self.getParameters()                    self.click_clear()                    self.getGUICRStatus()                    self.selectCR_Domain()                    self.getGUICRType(self.system,                                      self.item)                    #list_cr_domains_str  = ",".join(self.list_cr_doamin)                    #list_status_str = ",".join(self.list_cr_status)                    #list_types_str = ",".join(self.list_cr_type)                    #list_targets_str = self.impl_release                    self.log("")                    self.log("DOMAINS:")                    self.log("-------")                    self.log("")                    for cr_domain in self.list_cr_doamin:                        self.log("  " + cr_domain)                    self.log("")                    self.log("STATUS:")                    self.log("------")                    self.log("")                    for cr_status in self.list_cr_status:                        self.log("  " + cr_status)                    self.log("")                    self.log("CR TYPES:")                    self.log("--------")                    self.log("")                    for cr_type in self.list_cr_type:                        self.log("  " + cr_type)                    self.log("")                    self.log("IMPLEMENTED FOR:")                    self.log("---------------")                    self.log("")                    self.log("  " + dico["implemented"])                    self.log("")                    self.log("DETECTED ON:")                    self.log("-----------")                    self.log("")                    self.log("  " + dico["detect"])                    self.log("")                    condition,detect_attribut = self._createConditionStatus(detect_release=dico["detect"],                                                                        impl_release=dico["implemented"],                                                                        cr_type=dico["cr_type"],                                                                        old_cr_workflow=self.getTypeWorkflow)                    self.log("Preview CR query: ccm query -u -sby problem_number " + condition + " ... ")                elif param == "reload_crlistbox":                    try:                        print "Display CR RELOAD_CRLISTBOX"                        list_cr = self.queue_thread_gui.get(1)                        # Update list of project of GUI                        crlistbox = self.crlistbox                        crlistbox.configure(state=NORMAL)                        crlistbox.delete(0, END)                        inter = 0                        for cr_description in list_cr:                            crlistbox.insert(END, cr_description)                            if inter % 2 == 0:                                crlistbox.itemconfig(inter,{'bg':'gray88','fg':'black'})                            else:                                crlistbox.itemconfig(inter,{'bg':'lightgrey','fg':'black'})                            inter += 1                        crlistbox.configure(bg="white")                    except AttributeError:                        pass                elif param == "end_cid_built":                    docx_filename = self.queue_thread_gui.get(1)                    exception = self.queue_thread_gui.get(2)                    text = self.queue_thread_gui.get(3)                    self.displayResultGenerateCID(docx_filename,                                                  exception,                                                  text)                elif param == "eoc_info":                    print "create EOC information window"                    data = self.queue_thread_gui.get(1)                    hw_sw_compatibility = data[0]                    pn = data[1]                    checksum = data[2]                    addr_hw_sw_compatibility = self.addr_hw_sw_compatibility                    addr_pn = self.addr_pn                    addr_checksum = self.addr_checksum                    txt  = "\nUser program flash memory hardware/software:\n"                    txt += "---------------------------------------------\n\n"                    txt += "HW/SW compatibility index ({:s}): {:s}\n".format(addr_hw_sw_compatibility,hw_sw_compatibility)                    txt += "Board/SW Part Number ({:s}): {:s}\n".format(addr_pn,pn)                    txt += "Checksum ({:s}): {:s}\n\n".format(addr_checksum,checksum)                    self.general_output_txt.insert(END, txt + "\n")                    self.success.config(fg='magenta',bg = 'green',text="EXECUTABLE OBJET CODE READING SUCCEEDED")                    print "exit EOC information window mainloop"            except Queue.Empty:                break;            #else:            #    time.sleep(2)        self.after(1000, self.check_queue)def destroy_app():    global fenetre    global thread_build_docx    if tkMessageBox.askokcancel("Quit", "Do you really want to quit now?"):        thread_build_docx.stopSession()        thread_build_docx.storeSelection(thread_build_docx.master_ihm.project,                                         thread_build_docx.item,                                         thread_build_docx.master_ihm.release,                                         thread_build_docx.master_ihm.baseline)        thread_build_docx.stop()        ##        interface.destroy()        for child in fenetre.winfo_children():            print "CHILD:",child            child.destroy()        fenetre.destroy()if __name__ == '__main__':    no_start_session = False    try:        # command line option ?        import argparse        parser = argparse.ArgumentParser()        parser.add_argument("--cli", help="launch doCID in command line input mode", action="store_true")        parser.add_argument("-system", help="System")        parser.add_argument("-item", help="Item")        parser.add_argument("-release", help="Target release")        parser.add_argument("-cr_type", help="Component selected (ex: SW_ENM etc.)")        parser.add_argument("-baseline", nargs='?', help="Baseline selected (ex: SW_ENM_02_06 etc.)")        args = parser.parse_args()        if args.cli:            ##            text = "Launching doCID in CLI mode"            ##            sys.stdout.write(text + '\n')            ##            sys.stdout.write("Implemented for: " + args.release + '\n')            ##            sys.stdout.write("CR scope: " + args.cr_type + '\n')            ##            sys.stdout.write("System: " + args.system + '\n')            ##            sys.stdout.write("Item: " + args.item + '\n')            # Begin DoCID in GUI mode            no_start_session = False            session_started = False            project_item = ""            system = args.system  #"Dassault F5X PDS"            item = args.item  #"ESSNESS"            item_id = 1            login_success = False            # Verify if the database SQLite exists            try:                with open('docid.db3'):                    pass            except IOError:                print 'SQLite database does not exists.'                tool = Tool()                tool.sqlite_create()                # instance threads            queue = Queue.Queue()            ##            fenetre = Tk()            interface = Console("", queue, system, item)            interface.cr_type = args.cr_type            interface.previous_release = ""  # detect_release            interface.impl_release = args.release            interface.baseline = ""            interface.project = ""            ##            print "Instantiate ThreadQuery\n"            thread_docid = ThreadQuery("doc", interface, queue)            if thread_docid.launch_session:                # Wait Synergy session begin                ##                print "Wait Synergy session begin\n"                while not session_started and not thread_docid.start_session_failed:                    pass                if not thread_docid.start_session_failed:                    ##                    print "ARG",args.baseline                    if args.baseline != None:                        output = thread_docid._getItems(args.release, args.baseline)                        text = "List of objects exported."                        print output                    ##                        print "Launch Synergy get objects query\n"                    else:                        output = thread_docid._getCR("", "SCR")                        text = "List of CR exported."                        print output                    ##                        print "Launch Synergy get cr query\n"                    test_log = open("test.log", "w")                    message = text                    test_log.write(message)                    test_log.close()                else:                    print "Synergy session login failed\n"            sys.stdout.flush()        else:            # Begin DoCID in GUI mode            icone = "ico_sys_desktop.ico"            session_started = False            project_item = ""            system = "None"            login_success = False            tool = Tool()            # Verify if the database SQLite exists            try:                with open('docid.db3'):                    pass            except IOError:                print 'SQLite database does not exists.'                tool.sqlite_create()                ##        verrou = threading.Lock()            start = tool.getOptions("Default", "start")            if start == "auto":                login = tool.getOptions("User", "login")                password = tool.getOptions("User", "password")                system = tool.getOptions("Default", "system")                item = tool.getOptions("Default", "item")                login_success = True            else:                login_window = Tk()                Pmw.initialise(login_window)                login_window.iconbitmap(icone)                login_window.title("Login")                login_window.resizable(False, False)                login_window.grab_set()                login_window.focus_set()                # Create login interface                interface_login = Login(login_window)                # create a toplevel menu                mainmenu = Menu(login_window)                menubar = Menu(mainmenu)                ##            menubar.add_command(label = "Help", command=gui.help)                ##            menubar.add_separator()                ##            menubar.add_command(label = "Quit", command=interface_login.click_quit)                ##            mainmenu.add_cascade(label = "Home", menu = menubar)                ##            mainmenu.add_command(label = "About", command=gui.about)                # Bind control keys                mainmenu.bind_all("<Control-b>", interface_login.press_bypass_start_session)                mainmenu.bind_all("<Control-h>", interface_login.press_start_apache)                # display the menu                login_window.configure(menu=mainmenu)                # infinite loop                interface_login.mainloop()                #login_window.destroy()            # Login succeeded ?            if login_success:                ##        sys.exit()                fenetre = Tk()                #                # Tk =====> Gui                #    =====> ThreadQuery                #                Pmw.initialise(fenetre)                fenetre.iconbitmap(icone)                fenetre.title("doCID: Just create a configuration index document in one click")                # enable height window resize                fenetre.resizable(False, False)                # instance threads                queue_gui_thread = Queue.Queue()                queue_thread_gui = Queue.Queue()                #                # Queue =====> Gui                #       =====> ThreadQuery                #                gui = Gui(fenetre,                          queue_gui_thread,                          system,                          item,                          queue_thread_gui=queue_thread_gui,                          login=login)                # gui instanciates class Interface by "interface" which is global ... not cool                # gui creates a "notebook" with "fenetre" then                #     creates an "interface" with "notebook"                #                # Gui =====> Interface                #                thread_build_docx = ThreadQuery("doc",                                                gui,                                                queue_gui_thread,                                                no_start_session=no_start_session,                                                login=login,                                                password=password,                                                item=item,                                                system=system,                                                queue_thread_gui=queue_thread_gui)                # fenetre is just used here for polling processIncoming                # See: self.master.after(1000, self.periodicCall)                #                # ThreadQuery <===== Interface                #             =====> BuildDoc                #                # create a toplevel menu                mainmenu = Menu(fenetre)                menubar = Menu(mainmenu)                #menubar.add_command(label="Change Requests query", command=gui.ccb_minutes)                #menubar.add_separator()                #menubar.add_command(label="Create Plan Review minutes", command=gui.plan_review_minutes)                #menubar.add_command(label="Create Specification Review minutes", command=gui.spec_review_minutes)                #menubar.add_separator()                # HOME                #menubar.add_command(label="Create SQLite action items database", command=gui.click_create_actions_db)                #menubar.add_command(label="Set SQLite action items database", command=gui.select_actions_db)                menubar.add_command(label="Set user configuration", command=gui.click_set_user_config)                menubar.add_separator()                menubar.add_command(label="Reload .ini config file", command=gui.click_update_config)                menubar.add_command(label="Reload PN csv file", command=gui.click_update_pn_csv)                menubar.add_command(label="Reload SQLite config file", command=gui.fillConfig)                #menubar.add_separator()                #menubar.add_command(label="Log out", command=gui.click_logout)                menubar.add_separator()                menubar.add_command(label="Quit", command=gui.click_quit)                mainmenu.add_cascade(label="Configuration", menu=menubar)                # Tool                toolbar = Menu(mainmenu)                toolbar.add_command(label="Read BPROC procedure", command=gui.read_bproc)                toolbar.add_command(label="Read GPROC makefile", command=gui.read_gproc)                toolbar.add_separator()                toolbar.add_command(label="Read EOC file", command=gui.read_eoc)                toolbar.add_separator()                toolbar.add_command(label="Read RTRT .rtp file", command=gui.read_rtp)                toolbar.add_command(label="Read RTRT .rod file", command=gui.read_rod)                toolbar.add_separator()                toolbar.add_command(label="IBM Rational Change", command=gui.go_change)                mainmenu.add_cascade(label="Tools", menu=toolbar)                # Action items                qamsbar = Menu(mainmenu)                qamsbar.add_command(label="Add action item", command=gui.action.click_update_action_item)                qamsbar.add_command(label="Display action items list", command=gui.action.click_list_action_item)                qamsbar.add_separator()                qamsbar.add_command(label="Create SQLite action items database", command=gui.click_create_actions_db)                qamsbar.add_command(label="Set SQLite action items database", command=gui.select_actions_db)                qamsbar.add_separator()                qamsbar.add_command(label="Get QA action items from QAMS", command=gui.get_qa_action_items)                mainmenu.add_cascade(label="Action items", menu=qamsbar)                # BPROC                #bprocbar = Menu(mainmenu)                #mainmenu.add_cascade(label="BPROC", menu=bprocbar)                # Help                helpbar = Menu(mainmenu)                helpbar.add_command(label="Help", command=gui.help)                helpbar.add_command(label="Documentation", command=gui.documentation)                helpbar.add_separator()                #helpbar.add_command(label="Intranet", command=gui.intranet)                helpbar.add_command(label="Check for update", command=gui.check_for_update)                helpbar.add_separator()                helpbar.add_command(label="About", command=gui.about)                mainmenu.add_cascade(label="Help", menu=helpbar)                # Intranet                intranetbar = Menu(mainmenu)                intranetbar.add_command(label="Go", command=gui.intranet)                mainmenu.add_cascade(label="Intranet", menu=intranetbar)                # Bind control keys                mainmenu.bind_all("<Control-s>", gui.press_ctrl_s)                mainmenu.bind_all("<Control-t>", gui.press_read_session_status)                mainmenu.bind_all("<Control-w>", gui.press_close_session)                mainmenu.bind_all("<Control-h>", gui.press_start_apache)                mainmenu.bind_all("<Control-p>", gui.press_preview_cr_query)                # display the menu                fenetre.configure(menu=mainmenu)                # --------------------------                # to bind the window manager's CLOSE event to destroy_app function                # --------------------------                fenetre.protocol("WM_DELETE_WINDOW", destroy_app)                #                # Start thread ThreadQuery                #                print "start thread ThreadQuery "                thread_build_docx.start()                def task():                    gui.success.config(fg='red',bg = 'yellow',text="SESSION LOGGING IN PROGRESS")                    gui.log("Open Synergy session with database {base} and login {login}. Please wait ...".format(base=thread_build_docx.database,login=login))                    gui.queue.put("START_SESSION")                if no_start_session:                    gui.log("No database opened.")                    thread_build_docx.start_session_failed = True                    thread_build_docx.launch_session = False                else:                    task()                    #gui.after(2000,task)                #                # Start GUI Interface                #                gui.after(1000, gui.check_queue)                gui.mainloop()    except OSError as e:        print >> sys.stderr, "Execution failed:", e